
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.23.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/footer.svelte generated by Svelte v3.23.0 */

    const file = "src/footer.svelte";

    function create_fragment(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "footer svelte-1mif5cs");
    			add_location(div, file, 4, 0, 21);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Footer", $$slots, []);
    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    /* src/header.svelte generated by Svelte v3.23.0 */

    const file$1 = "src/header.svelte";

    function create_fragment$1(ctx) {
    	let meta0;
    	let t0;
    	let meta1;
    	let t1;
    	let a0;
    	let t2;
    	let a1;
    	let t3;
    	let a2;
    	let t4;
    	let a3;
    	let t5;
    	let a4;
    	let t6;
    	let a5;
    	let t7;
    	let a6;
    	let t8;
    	let a7;
    	let t9;
    	let a8;
    	let t10;
    	let a9;
    	let t11;
    	let a10;
    	let t12;
    	let a11;
    	let t13;
    	let a12;
    	let t14;
    	let a13;
    	let t15;
    	let a14;
    	let t16;
    	let a15;

    	const block = {
    		c: function create() {
    			meta0 = element("meta");
    			t0 = space();
    			meta1 = element("meta");
    			t1 = space();
    			a0 = element("a");
    			t2 = space();
    			a1 = element("a");
    			t3 = space();
    			a2 = element("a");
    			t4 = space();
    			a3 = element("a");
    			t5 = space();
    			a4 = element("a");
    			t6 = space();
    			a5 = element("a");
    			t7 = space();
    			a6 = element("a");
    			t8 = space();
    			a7 = element("a");
    			t9 = space();
    			a8 = element("a");
    			t10 = space();
    			a9 = element("a");
    			t11 = space();
    			a10 = element("a");
    			t12 = space();
    			a11 = element("a");
    			t13 = space();
    			a12 = element("a");
    			t14 = space();
    			a13 = element("a");
    			t15 = space();
    			a14 = element("a");
    			t16 = space();
    			a15 = element("a");
    			attr_dev(meta0, "name", "viewport");
    			attr_dev(meta0, "content", "width=device-width, initial-scale=1");
    			add_location(meta0, file$1, 3, 0, 20);
    			attr_dev(meta1, "name", "viewport");
    			attr_dev(meta1, "content", "width=device-width, height=device-height, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0");
    			add_location(meta1, file$1, 4, 0, 89);
    			attr_dev(a0, "name", "page1");
    			set_style(a0, "position", "absolute");
    			set_style(a0, "top", "0vw");
    			set_style(a0, "left", "0vw");
    			set_style(a0, "width", "100vw");
    			add_location(a0, file$1, 7, 0, 239);
    			attr_dev(a1, "name", "page2");
    			set_style(a1, "position", "absolute");
    			set_style(a1, "top", "0vw");
    			set_style(a1, "left", "100vw");
    			set_style(a1, "width", "100vw");
    			add_location(a1, file$1, 8, 0, 321);
    			attr_dev(a2, "name", "page3");
    			set_style(a2, "position", "absolute");
    			set_style(a2, "top", "0vw");
    			set_style(a2, "left", "200vw");
    			set_style(a2, "width", "100vw");
    			add_location(a2, file$1, 9, 0, 405);
    			attr_dev(a3, "name", "page4");
    			set_style(a3, "position", "absolute");
    			set_style(a3, "top", "0vw");
    			set_style(a3, "left", "300vw");
    			set_style(a3, "width", "100vw");
    			add_location(a3, file$1, 10, 0, 489);
    			attr_dev(a4, "name", "page5");
    			set_style(a4, "position", "absolute");
    			set_style(a4, "top", "0vw");
    			set_style(a4, "left", "400vw");
    			set_style(a4, "width", "100vw");
    			add_location(a4, file$1, 11, 0, 573);
    			attr_dev(a5, "name", "page6");
    			set_style(a5, "position", "absolute");
    			set_style(a5, "top", "0vw");
    			set_style(a5, "left", "500vw");
    			set_style(a5, "width", "100vw");
    			add_location(a5, file$1, 12, 0, 657);
    			attr_dev(a6, "name", "page7");
    			set_style(a6, "position", "absolute");
    			set_style(a6, "top", "0vw");
    			set_style(a6, "left", "600vw");
    			set_style(a6, "width", "100vw");
    			add_location(a6, file$1, 13, 0, 741);
    			attr_dev(a7, "name", "page8");
    			set_style(a7, "position", "absolute");
    			set_style(a7, "top", "0vw");
    			set_style(a7, "left", "700vw");
    			set_style(a7, "width", "100vw");
    			add_location(a7, file$1, 14, 0, 825);
    			attr_dev(a8, "name", "page9");
    			set_style(a8, "position", "absolute");
    			set_style(a8, "top", "0vw");
    			set_style(a8, "left", "800vw");
    			set_style(a8, "width", "100vw");
    			add_location(a8, file$1, 15, 0, 909);
    			attr_dev(a9, "name", "page10");
    			set_style(a9, "position", "absolute");
    			set_style(a9, "top", "0vw");
    			set_style(a9, "left", "900vw");
    			set_style(a9, "width", "100vw");
    			add_location(a9, file$1, 16, 0, 993);
    			attr_dev(a10, "name", "page11");
    			set_style(a10, "position", "absolute");
    			set_style(a10, "top", "0vw");
    			set_style(a10, "left", "1000vw");
    			set_style(a10, "width", "100vw");
    			add_location(a10, file$1, 17, 0, 1078);
    			attr_dev(a11, "name", "page12");
    			set_style(a11, "position", "absolute");
    			set_style(a11, "top", "0vw");
    			set_style(a11, "left", "1100vw");
    			set_style(a11, "width", "100vw");
    			add_location(a11, file$1, 18, 0, 1164);
    			attr_dev(a12, "name", "page13");
    			set_style(a12, "position", "absolute");
    			set_style(a12, "top", "0vw");
    			set_style(a12, "left", "1200vw");
    			set_style(a12, "width", "100vw");
    			add_location(a12, file$1, 19, 0, 1250);
    			attr_dev(a13, "name", "page14");
    			set_style(a13, "position", "absolute");
    			set_style(a13, "top", "0vw");
    			set_style(a13, "left", "1300vw");
    			set_style(a13, "width", "100vw");
    			add_location(a13, file$1, 20, 0, 1336);
    			attr_dev(a14, "name", "page15");
    			set_style(a14, "position", "absolute");
    			set_style(a14, "top", "0vw");
    			set_style(a14, "left", "1400vw");
    			set_style(a14, "width", "100vw");
    			add_location(a14, file$1, 21, 0, 1422);
    			attr_dev(a15, "name", "front");
    			set_style(a15, "position", "absolute");
    			set_style(a15, "top", "0vw");
    			set_style(a15, "left", "1500vw");
    			set_style(a15, "width", "100vw");
    			add_location(a15, file$1, 22, 0, 1508);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, meta0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, meta1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a0, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, a1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, a2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, a3, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, a4, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, a5, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, a6, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, a7, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, a8, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, a9, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, a10, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, a11, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, a12, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, a13, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, a14, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, a15, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(meta0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(meta1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(a1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(a2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(a3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(a4);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(a5);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(a6);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(a7);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(a8);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(a9);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(a10);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(a11);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(a12);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(a13);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(a14);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(a15);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Header", $$slots, []);
    	return [];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/specifics/Cover.svelte generated by Svelte v3.23.0 */

    const file$2 = "src/specifics/Cover.svelte";

    // (45:0) {#if firstSetup}
    function create_if_block_9(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "buttonNext OneStuck svelte-1b77s1w");
    			add_location(div, file$2, 45, 1, 826);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(45:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (48:0) {#if secondSetup}
    function create_if_block_8(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$2, 48, 1, 920);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$2, 49, 1, 980);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[10], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(48:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (52:0) {#if thirdSetup}
    function create_if_block_7(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$2, 52, 1, 1063);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$2, 53, 1, 1124);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[11], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[9], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(52:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (56:0) {#if fourthSetup}
    function create_if_block_6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$2, 56, 1, 1209);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$2, 57, 1, 1269);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[12], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(56:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (60:0) {#if fifthSetup}
    function create_if_block_5(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[2]);
    			add_location(a, file$2, 60, 1, 1352);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$2, 61, 1, 1394);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglefourthSetup*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 4) {
    				attr_dev(a, "href", /*prev*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(60:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (88:1) {#if firstSetup}
    function create_if_block_4(ctx) {
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text("↑ Press left side to click through, ↑");
    			br = element("br");
    			t1 = text("or swipe left to skip.");
    			add_location(br, file$2, 87, 69, 2537);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, br, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(br);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(88:1) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (89:1) {#if secondSetup}
    function create_if_block_3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("The past is full, full of era’s distinguished by people / culture / etc.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(89:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (90:1) {#if thirdSetup}
    function create_if_block_2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("The future is empty, hypothetical.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(90:1) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (91:1) {#if fourthSetup}
    function create_if_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("“Heat will kill more people in 2100 than it does today”, is a hollow statement as the people killed do not yet exist.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(91:1) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (92:1) {#if fifthSetup}
    function create_if_block(ctx) {
    	let t0;
    	let sub;
    	let br;
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text("NOW AND THEN");
    			sub = element("sub");
    			sub.textContent = "2";
    			br = element("br");
    			t2 = text("manipulates time by looking at the past and the future as parallel lines, lines of THENs, growing from NOW. A sense of past humanity is reflected onto a heating future, lending it an ethos to better imagine what is at stake and when.");
    			add_location(sub, file$2, 91, 29, 2897);
    			add_location(br, file$2, 91, 41, 2909);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, sub, anchor);
    			insert_dev(target, br, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(sub);
    			if (detaching) detach_dev(br);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(92:1) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let div0;
    	let t5;
    	let sub;
    	let t7;
    	let div1;
    	let t8;
    	let t9;
    	let div2;
    	let t10;
    	let t11;
    	let div3;
    	let t12;
    	let t13;
    	let div4;
    	let t14;
    	let t15;
    	let div5;
    	let t16;
    	let t17;
    	let div6;
    	let t18;
    	let t19;
    	let div7;
    	let t20;
    	let t21;
    	let div8;
    	let t22;
    	let t23;
    	let t24;
    	let t25;
    	let t26;
    	let div10;
    	let div9;
    	let t27;
    	let div12;
    	let div11;
    	let a0;
    	let t29;
    	let a1;
    	let if_block0 = /*firstSetup*/ ctx[3] && create_if_block_9(ctx);
    	let if_block1 = /*secondSetup*/ ctx[4] && create_if_block_8(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[5] && create_if_block_7(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[6] && create_if_block_6(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[7] && create_if_block_5(ctx);
    	let if_block5 = /*firstSetup*/ ctx[3] && create_if_block_4(ctx);
    	let if_block6 = /*secondSetup*/ ctx[4] && create_if_block_3(ctx);
    	let if_block7 = /*thirdSetup*/ ctx[5] && create_if_block_2(ctx);
    	let if_block8 = /*fourthSetup*/ ctx[6] && create_if_block_1(ctx);
    	let if_block9 = /*fifthSetup*/ ctx[7] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			div0 = element("div");
    			t5 = text(/*pagetitleText*/ ctx[0]);
    			sub = element("sub");
    			sub.textContent = "2";
    			t7 = space();
    			div1 = element("div");
    			t8 = text("now");
    			t9 = space();
    			div2 = element("div");
    			t10 = text("& then");
    			t11 = space();
    			div3 = element("div");
    			t12 = text("& then");
    			t13 = space();
    			div4 = element("div");
    			t14 = text("& then");
    			t15 = space();
    			div5 = element("div");
    			t16 = text("& then");
    			t17 = space();
    			div6 = element("div");
    			t18 = text("& then");
    			t19 = space();
    			div7 = element("div");
    			t20 = text("& then");
    			t21 = space();
    			div8 = element("div");
    			if (if_block5) if_block5.c();
    			t22 = space();
    			if (if_block6) if_block6.c();
    			t23 = space();
    			if (if_block7) if_block7.c();
    			t24 = space();
    			if (if_block8) if_block8.c();
    			t25 = space();
    			if (if_block9) if_block9.c();
    			t26 = space();
    			div10 = element("div");
    			div9 = element("div");
    			t27 = space();
    			div12 = element("div");
    			div11 = element("div");
    			a0 = element("a");
    			a0.textContent = "[font: GlyphWorld ↗︎]";
    			t29 = space();
    			a1 = element("a");
    			a1.textContent = "[font: Ortica ↗︎]";
    			add_location(sub, file$2, 72, 85, 1724);
    			attr_dev(div0, "class", "pagetitle Disappear svelte-1b77s1w");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$2, 72, 0, 1639);
    			attr_dev(div1, "class", "pagetitle OneStuck svelte-1b77s1w");
    			set_style(div1, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div1, file$2, 74, 0, 1744);
    			attr_dev(div2, "class", "pagetitle then One leftOne svelte-1b77s1w");
    			set_style(div2, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div2, file$2, 76, 0, 1824);
    			attr_dev(div3, "class", "pagetitle then One rightOne svelte-1b77s1w");
    			set_style(div3, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div3, file$2, 77, 0, 1918);
    			attr_dev(div4, "class", "pagetitle then Two leftOne svelte-1b77s1w");
    			set_style(div4, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div4, file$2, 79, 0, 2014);
    			attr_dev(div5, "class", "pagetitle then Two rightOne svelte-1b77s1w");
    			set_style(div5, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div5, file$2, 80, 0, 2108);
    			attr_dev(div6, "class", "pagetitle then Three leftOne svelte-1b77s1w");
    			set_style(div6, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div6, file$2, 82, 0, 2204);
    			attr_dev(div7, "class", "pagetitle then Three rightOne svelte-1b77s1w");
    			set_style(div7, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div7, file$2, 83, 0, 2300);
    			attr_dev(div8, "class", "pagetext OneStuck svelte-1b77s1w");
    			set_style(div8, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div8, file$2, 86, 0, 2399);
    			attr_dev(div9, "class", "progressline");
    			set_style(div9, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div9, file$2, 99, 39, 3302);
    			attr_dev(div10, "class", "activedotnew activedotFan");
    			add_location(div10, file$2, 99, 0, 3263);
    			attr_dev(a0, "href", "https://www.glyphworld.online/");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "class", "svelte-1b77s1w");
    			add_location(a0, file$2, 105, 3, 3490);
    			attr_dev(a1, "href", "http://collletttivo.it/");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "class", "svelte-1b77s1w");
    			add_location(a1, file$2, 106, 3, 3590);
    			attr_dev(div11, "class", "bottomLineText text svelte-1b77s1w");
    			set_style(div11, "text-align", "right");
    			add_location(div11, file$2, 104, 2, 3426);
    			attr_dev(div12, "class", "text bottomLine svelte-1b77s1w");
    			add_location(div12, file$2, 103, 0, 3394);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t5);
    			append_dev(div0, sub);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t8);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, t10);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, t12);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, t14);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, t16);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, t18);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, t20);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div8, anchor);
    			if (if_block5) if_block5.m(div8, null);
    			append_dev(div8, t22);
    			if (if_block6) if_block6.m(div8, null);
    			append_dev(div8, t23);
    			if (if_block7) if_block7.m(div8, null);
    			append_dev(div8, t24);
    			if (if_block8) if_block8.m(div8, null);
    			append_dev(div8, t25);
    			if (if_block9) if_block9.m(div8, null);
    			insert_dev(target, t26, anchor);
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div9);
    			insert_dev(target, t27, anchor);
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div11);
    			append_dev(div11, a0);
    			append_dev(div11, t29);
    			append_dev(div11, a1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_9(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_8(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_7(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_6(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_5(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t5, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div1, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div2, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div3, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div4, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div5, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div6, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div7, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block5) ; else {
    					if_block5 = create_if_block_4(ctx);
    					if_block5.c();
    					if_block5.m(div8, t22);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block6) ; else {
    					if_block6 = create_if_block_3(ctx);
    					if_block6.c();
    					if_block6.m(div8, t23);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block7) ; else {
    					if_block7 = create_if_block_2(ctx);
    					if_block7.c();
    					if_block7.m(div8, t24);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block8) ; else {
    					if_block8 = create_if_block_1(ctx);
    					if_block8.c();
    					if_block8.m(div8, t25);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block9) ; else {
    					if_block9 = create_if_block(ctx);
    					if_block9.c();
    					if_block9.m(div8, null);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div8, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div9, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div8);
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    			if (if_block7) if_block7.d();
    			if (if_block8) if_block8.d();
    			if (if_block9) if_block9.d();
    			if (detaching) detach_dev(t26);
    			if (detaching) detach_dev(div10);
    			if (detaching) detach_dev(t27);
    			if (detaching) detach_dev(div12);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let distanceBLines = "calc((95vh - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { prev } = $$props;
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(3, firstSetup = true);
    		$$invalidate(4, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(3, firstSetup = false);
    		$$invalidate(4, secondSetup = true);
    		$$invalidate(5, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(4, secondSetup = false);
    		$$invalidate(5, thirdSetup = true);
    		$$invalidate(6, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(5, thirdSetup = false);
    		$$invalidate(6, fourthSetup = true);
    		$$invalidate(7, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(6, fourthSetup = false);
    		$$invalidate(7, fifthSetup = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cover> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Cover", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		distanceBLines,
    		marginSides,
    		pagetitleText,
    		rotate,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("distanceBLines" in $$props) distanceBLines = $$props.distanceBLines;
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    		if ("firstSetup" in $$props) $$invalidate(3, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(4, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(5, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(6, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(7, fifthSetup = $$props.fifthSetup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup
    	];
    }

    class Cover extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { pagetitleText: 0, rotate: 1, prev: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cover",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<Cover> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<Cover> was created without expected prop 'rotate'");
    		}

    		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
    			console.warn("<Cover> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<Cover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<Cover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Cover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Cover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<Cover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<Cover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/ExtremeHeatI.svelte generated by Svelte v3.23.0 */

    const file$3 = "src/specifics/ExtremeHeatI.svelte";

    // (65:0) {#if firstSetup}
    function create_if_block_17(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$3, 65, 1, 1092);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[1]);
    			add_location(a, file$3, 66, 1, 1153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[14], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 2) {
    				attr_dev(a, "href", /*next*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17.name,
    		type: "if",
    		source: "(65:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (69:0) {#if secondSetup}
    function create_if_block_16(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$3, 69, 1, 1219);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$3, 70, 1, 1279);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[15], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(69:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (73:0) {#if thirdSetup}
    function create_if_block_15(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$3, 73, 1, 1362);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$3, 74, 1, 1423);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[16], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(73:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (77:0) {#if fourthSetup}
    function create_if_block_14(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[2]);
    			add_location(a, file$3, 77, 1, 1508);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$3, 78, 1, 1550);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglethirdSetup*/ ctx[15], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 4) {
    				attr_dev(a, "href", /*prev*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(77:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (96:0) {#if firstSetup}
    function create_if_block_13(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("It’s June, after the warmest May on record. Its getting warmer, and Extreme heat is becoming more and more common.");
    			attr_dev(div, "class", "pagetext svelte-ryynyx");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$3, 96, 1, 1836);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(96:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (101:0) {#if secondText}
    function create_if_block_12(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("The dangers of heat depend on temperature and humidity. High humidity makes it harder for sweat to evaporate from the body, which can cause it to overheat.");
    			attr_dev(div, "class", "pagetext svelte-ryynyx");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$3, 101, 1, 2045);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(101:0) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (106:0) {#if thirdSetup}
    function create_if_block_11(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("When the temperature start to approach that of the human body, they become extremely dangerous. Heat of 35°C, especially when humid, can only be endured for several hours at a time before it becomes fatal.");
    			attr_dev(div, "class", "pagetext svelte-ryynyx");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			set_style(div, "font-weight", "normal");
    			set_style(div, "font-style", "normal");
    			add_location(div, file$3, 106, 1, 2295);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(106:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (112:0) {#if fourthSetup}
    function create_if_block_10(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("With each eccess extremely hot day of 35°C, mortality rates increase by ~ 0,0004%.");
    			attr_dev(div, "class", "pagetext svelte-ryynyx");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			set_style(div, "font-weight", "normal");
    			set_style(div, "font-style", "normal");
    			add_location(div, file$3, 112, 1, 2644);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(112:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (127:0) {#if firstSetup}
    function create_if_block_9$1(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$1.name,
    		type: "if",
    		source: "(127:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (133:0) {:else}
    function create_else_block(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("26,6 °C");
    			t1 = space();
    			div1 = element("div");
    			t2 = text("41.1 °C");
    			attr_dev(div0, "class", "text celcius svelte-ryynyx");
    			set_style(div0, "bottom", "calc(" + /*distanceBLines*/ ctx[10] + " * 8)");
    			set_style(div0, "left", /*celciusWidth*/ ctx[12]);
    			add_location(div0, file$3, 133, 1, 3023);
    			attr_dev(div1, "class", "text celcius svelte-ryynyx");
    			set_style(div1, "bottom", "calc(" + /*distanceBLines*/ ctx[10] + " * 8)");
    			set_style(div1, "right", "calc(" + /*celciusWidth*/ ctx[12] + " * 1)");
    			add_location(div1, file$3, 134, 1, 3130);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t2);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(133:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (132:0) {#if firstSetup}
    function create_if_block_8$1(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(132:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (138:0) {#if secondSetup}
    function create_if_block_5$1(ctx) {
    	let div0;
    	let svg;
    	let polygon0;
    	let polygon1;
    	let polygon2;
    	let polyline;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let t3;
    	let div2;
    	let t4;
    	let t5;
    	let div3;
    	let t7;
    	let t8;
    	let div4;
    	let t9;
    	let div4_style_value;
    	let if_block0 = /*temp*/ ctx[6] && create_if_block_7$1(ctx);
    	let if_block1 = /*temp*/ ctx[6] && create_if_block_6$1(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			svg = svg_element("svg");
    			polygon0 = svg_element("polygon");
    			polygon1 = svg_element("polygon");
    			polygon2 = svg_element("polygon");
    			polyline = svg_element("polyline");
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div1 = element("div");
    			t2 = text("Humidity");
    			t3 = space();
    			div2 = element("div");
    			t4 = text("0%");
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "100%";
    			t7 = space();
    			if (if_block1) if_block1.c();
    			t8 = space();
    			div4 = element("div");
    			t9 = text("Extreme Danger");
    			attr_dev(polygon0, "class", "caution svelte-ryynyx");
    			set_style(polygon0, "background-color", "yellow");
    			attr_dev(polygon0, "points", "0 0 250 0 250 100 200 100 200 200 150 200 150 400 100 400 100 500 50 500 50 700 0 700 0 0");
    			add_location(polygon0, file$3, 140, 3, 3410);
    			attr_dev(polygon1, "class", "extremeCaution svelte-ryynyx");
    			attr_dev(polygon1, "points", "450 0 450 100 400 100 400 200 300 200 300 300 250 300 250 400 200 400 200 500 150 500 150 700 50 700 50 500 100 500 100 400 150 400 150 200 200 200 200 100 250 100 250 0 450 0");
    			add_location(polygon1, file$3, 141, 3, 3573);
    			attr_dev(polygon2, "class", "danger svelte-ryynyx");
    			attr_dev(polygon2, "points", "450 0 700 0 700 100 600 100 600 200 500 200 500 300 400 300 400 400 350 400 350 500 300 500 300 600 250 600 250 700 150 700 150 500 200 500 200 400 250 400 250 300 300 300 300 200 400 200 400 100 450 100 450 0");
    			add_location(polygon2, file$3, 142, 3, 3795);
    			attr_dev(polyline, "class", "extremeDanger svelte-ryynyx");
    			attr_dev(polyline, "points", "800 700 250 700 250 600 300 600 300 500 350 500 350 400 400 400 400 300 500 300 500 200 600 200 600 100 700 100 700 0 800 0 800 700");
    			add_location(polyline, file$3, 143, 3, 4043);
    			attr_dev(svg, "class", "graph");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 800 700");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$3, 139, 2, 3303);
    			attr_dev(div0, "class", "backgroundBox svelte-ryynyx");
    			add_location(div0, file$3, 138, 1, 3273);
    			attr_dev(div1, "class", "text humidity humidityTop svelte-ryynyx");
    			set_style(div1, "top", "calc(" + /*distanceBLines*/ ctx[10] + " * 1)");
    			set_style(div1, "right", "calc(100vw - " + /*marginSides*/ ctx[11] + ")");
    			set_style(div1, "height", "calc(" + /*distanceBLines*/ ctx[10] + " * 8)");
    			add_location(div1, file$3, 150, 1, 4351);
    			attr_dev(div2, "class", "text humidity svelte-ryynyx");
    			set_style(div2, "top", "calc(" + /*distanceBLines*/ ctx[10] + " * 1)");
    			set_style(div2, "left", "5px");
    			add_location(div2, file$3, 151, 1, 4519);
    			attr_dev(div3, "class", "text humidity svelte-ryynyx");
    			set_style(div3, "bottom", "0%");
    			set_style(div3, "left", "5px");
    			add_location(div3, file$3, 152, 1, 4608);
    			attr_dev(div4, "class", "text celcius inGraph svelte-ryynyx");
    			attr_dev(div4, "style", div4_style_value = "bottom: 15px; right: calc(" + /*celciusWidth*/ ctx[12] + " + 15px); /*transform: rotate(" + /*rotate*/ ctx[0] + ");*/");
    			add_location(div4, file$3, 157, 1, 4860);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, svg);
    			append_dev(svg, polygon0);
    			append_dev(svg, polygon1);
    			append_dev(svg, polygon2);
    			append_dev(svg, polyline);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, t9);
    		},
    		p: function update(ctx, dirty) {
    			if (/*temp*/ ctx[6]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*temp*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_6$1(ctx);
    					if_block1.c();
    					if_block1.m(t8.parentNode, t8);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*rotate*/ 1 && div4_style_value !== (div4_style_value = "bottom: 15px; right: calc(" + /*celciusWidth*/ ctx[12] + " + 15px); /*transform: rotate(" + /*rotate*/ ctx[0] + ");*/")) {
    				attr_dev(div4, "style", div4_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(138:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (148:1) {#if temp}
    function create_if_block_7$1(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Temp.");
    			attr_dev(div, "class", "text celcius celciusTop svelte-ryynyx");
    			set_style(div, "bottom", "calc(" + /*distanceBLines*/ ctx[10] + " * 8)");
    			add_location(div, file$3, 148, 2, 4250);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(148:1) {#if temp}",
    		ctx
    	});

    	return block;
    }

    // (155:1) {#if temp}
    function create_if_block_6$1(ctx) {
    	let div;
    	let t;
    	let div_style_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Caution");
    			attr_dev(div, "class", "text celcius inGraph svelte-ryynyx");
    			attr_dev(div, "style", div_style_value = "top: calc(" + /*distanceBLines*/ ctx[10] + " + 15px); left: calc(" + /*celciusWidth*/ ctx[12] + " + 15px); /*transform: rotate(" + /*rotate*/ ctx[0] + ");*/");
    			add_location(div, file$3, 155, 2, 4692);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1 && div_style_value !== (div_style_value = "top: calc(" + /*distanceBLines*/ ctx[10] + " + 15px); left: calc(" + /*celciusWidth*/ ctx[12] + " + 15px); /*transform: rotate(" + /*rotate*/ ctx[0] + ");*/")) {
    				attr_dev(div, "style", div_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(155:1) {#if temp}",
    		ctx
    	});

    	return block;
    }

    // (161:0) {#if extremeHeatII}
    function create_if_block_4$1(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let t2;
    	let div2;
    	let t3;
    	let div3;
    	let t4;
    	let div4;
    	let t5;
    	let br;
    	let t6;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = text("35°C");
    			t2 = space();
    			div2 = element("div");
    			t3 = space();
    			div3 = element("div");
    			t4 = space();
    			div4 = element("div");
    			t5 = text("body");
    			br = element("br");
    			t6 = text("temp.");
    			attr_dev(div0, "class", "backgroundBoxII svelte-ryynyx");
    			add_location(div0, file$3, 161, 1, 5034);
    			attr_dev(div1, "class", "text celcius svelte-ryynyx");
    			set_style(div1, "bottom", "calc(" + /*distanceBLines*/ ctx[10] + " * 8)");
    			set_style(div1, "left", "calc(" + /*celciusWidth*/ ctx[12] + " * 9.5)");
    			add_location(div1, file$3, 163, 1, 5072);
    			set_style(div2, "position", "absolute");
    			set_style(div2, "left", "calc(" + /*celciusWidth*/ ctx[12] + " * 10)");
    			set_style(div2, "width", "0px");
    			set_style(div2, "border-right", "1px dotted darkred");
    			set_style(div2, "height", "calc(" + /*distanceBLines*/ ctx[10] + " * 8)");
    			set_style(div2, "top", "calc(" + /*distanceBLines*/ ctx[10] + " * 1)");
    			add_location(div2, file$3, 165, 1, 5189);
    			attr_dev(div3, "class", "bodyTemp svelte-ryynyx");
    			set_style(div3, "top", /*distanceBLines*/ ctx[10]);
    			set_style(div3, "left", "calc(" + /*celciusWidth*/ ctx[12] + " * 11)");
    			set_style(div3, "right", "calc(" + /*celciusWidth*/ ctx[12] + " * 5)");
    			set_style(div3, "height", "calc(" + /*distanceBLines*/ ctx[10] + " * 8)");
    			add_location(div3, file$3, 167, 1, 5379);
    			add_location(br, file$3, 169, 137, 5679);
    			attr_dev(div4, "class", "text celcius svelte-ryynyx");
    			set_style(div4, "bottom", "0%");
    			set_style(div4, "left", "calc(" + /*celciusWidth*/ ctx[12] + " * 11)");
    			set_style(div4, "right", "calc(" + /*celciusWidth*/ ctx[12] + " * 5)");
    			set_style(div4, "text-align", "center");
    			add_location(div4, file$3, 169, 1, 5543);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, t5);
    			append_dev(div4, br);
    			append_dev(div4, t6);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(161:0) {#if extremeHeatII}",
    		ctx
    	});

    	return block;
    }

    // (182:3) {#if firstSetup}
    function create_if_block_3$1(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://climate.copernicus.eu/surface-air-temperature-may-2020");
    			attr_dev(a, "class", "svelte-ryynyx");
    			add_location(a, file$3, 181, 20, 5843);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(182:3) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (183:3) {#if secondSetup}
    function create_if_block_2$1(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://www.weather.gov/phi/heatcond");
    			attr_dev(a, "class", "svelte-ryynyx");
    			add_location(a, file$3, 182, 21, 5985);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(183:3) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (184:3) {#if thirdSetup}
    function create_if_block_1$1(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://stundin.is/grein/11213/gaetum-glimt-vid-vanda-tengdan-samspili-mikils-hita-og-raka-fyrr-en-aaetlad-var/");
    			attr_dev(a, "class", "svelte-ryynyx");
    			add_location(a, file$3, 183, 20, 6100);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(184:3) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (185:3) {#if fourthSetup}
    function create_if_block$1(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "http://www.impactlab.org/news-insights/valuing-climate-change-mortality/");
    			attr_dev(a, "class", "svelte-ryynyx");
    			add_location(a, file$3, 184, 21, 6291);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(185:3) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let div0;
    	let t4;
    	let br;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let div2;
    	let div1;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let div4;
    	let div3;
    	let if_block0 = /*firstSetup*/ ctx[3] && create_if_block_17(ctx);
    	let if_block1 = /*secondSetup*/ ctx[4] && create_if_block_16(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[7] && create_if_block_15(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[8] && create_if_block_14(ctx);
    	let if_block4 = /*firstSetup*/ ctx[3] && create_if_block_13(ctx);
    	let if_block5 = /*secondText*/ ctx[5] && create_if_block_12(ctx);
    	let if_block6 = /*thirdSetup*/ ctx[7] && create_if_block_11(ctx);
    	let if_block7 = /*fourthSetup*/ ctx[8] && create_if_block_10(ctx);
    	let if_block8 = /*firstSetup*/ ctx[3] && create_if_block_9$1(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*firstSetup*/ ctx[3]) return create_if_block_8$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block9 = current_block_type(ctx);
    	let if_block10 = /*secondSetup*/ ctx[4] && create_if_block_5$1(ctx);
    	let if_block11 = /*extremeHeatII*/ ctx[9] && create_if_block_4$1(ctx);
    	let if_block12 = /*firstSetup*/ ctx[3] && create_if_block_3$1(ctx);
    	let if_block13 = /*secondSetup*/ ctx[4] && create_if_block_2$1(ctx);
    	let if_block14 = /*thirdSetup*/ ctx[7] && create_if_block_1$1(ctx);
    	let if_block15 = /*fourthSetup*/ ctx[8] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			div0 = element("div");
    			t4 = text("Extreme");
    			br = element("br");
    			t5 = text("Heat");
    			t6 = space();
    			if (if_block4) if_block4.c();
    			t7 = space();
    			if (if_block5) if_block5.c();
    			t8 = space();
    			if (if_block6) if_block6.c();
    			t9 = space();
    			if (if_block7) if_block7.c();
    			t10 = space();
    			if (if_block8) if_block8.c();
    			t11 = space();
    			if_block9.c();
    			t12 = space();
    			if (if_block10) if_block10.c();
    			t13 = space();
    			if (if_block11) if_block11.c();
    			t14 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block12) if_block12.c();
    			t15 = space();
    			if (if_block13) if_block13.c();
    			t16 = space();
    			if (if_block14) if_block14.c();
    			t17 = space();
    			if (if_block15) if_block15.c();
    			t18 = space();
    			div4 = element("div");
    			div3 = element("div");
    			add_location(br, file$3, 91, 67, 1800);
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$3, 91, 0, 1733);
    			attr_dev(div1, "class", "bottomLineText text svelte-ryynyx");
    			set_style(div1, "text-align", "right");
    			add_location(div1, file$3, 180, 2, 5762);
    			attr_dev(div2, "class", "text bottomLine svelte-ryynyx");
    			add_location(div2, file$3, 179, 0, 5730);
    			attr_dev(div3, "class", "progressline");
    			set_style(div3, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			add_location(div3, file$3, 189, 1, 6480);
    			attr_dev(div4, "class", "activedotnew activedotFan");
    			add_location(div4, file$3, 188, 0, 6439);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t4);
    			append_dev(div0, br);
    			append_dev(div0, t5);
    			insert_dev(target, t6, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if_block9.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			if (if_block12) if_block12.m(div1, null);
    			append_dev(div1, t15);
    			if (if_block13) if_block13.m(div1, null);
    			append_dev(div1, t16);
    			if (if_block14) if_block14.m(div1, null);
    			append_dev(div1, t17);
    			if (if_block15) if_block15.m(div1, null);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_17(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_16(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_15(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[8]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_14(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}

    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_13(ctx);
    					if_block4.c();
    					if_block4.m(t7.parentNode, t7);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*secondText*/ ctx[5]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_12(ctx);
    					if_block5.c();
    					if_block5.m(t8.parentNode, t8);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_11(ctx);
    					if_block6.c();
    					if_block6.m(t9.parentNode, t9);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*fourthSetup*/ ctx[8]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_10(ctx);
    					if_block7.c();
    					if_block7.m(t10.parentNode, t10);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block8) ; else {
    					if_block8 = create_if_block_9$1(ctx);
    					if_block8.c();
    					if_block8.m(t11.parentNode, t11);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block9) {
    				if_block9.p(ctx, dirty);
    			} else {
    				if_block9.d(1);
    				if_block9 = current_block_type(ctx);

    				if (if_block9) {
    					if_block9.c();
    					if_block9.m(t12.parentNode, t12);
    				}
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_5$1(ctx);
    					if_block10.c();
    					if_block10.m(t13.parentNode, t13);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*extremeHeatII*/ ctx[9]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_4$1(ctx);
    					if_block11.c();
    					if_block11.m(t14.parentNode, t14);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block12) ; else {
    					if_block12 = create_if_block_3$1(ctx);
    					if_block12.c();
    					if_block12.m(div1, t15);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block13) ; else {
    					if_block13 = create_if_block_2$1(ctx);
    					if_block13.c();
    					if_block13.m(div1, t16);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block14) ; else {
    					if_block14 = create_if_block_1$1(ctx);
    					if_block14.c();
    					if_block14.m(div1, t17);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*fourthSetup*/ ctx[8]) {
    				if (if_block15) ; else {
    					if_block15 = create_if_block$1(ctx);
    					if_block15.c();
    					if_block15.m(div1, null);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div3, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t6);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t10);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t11);
    			if_block9.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(div2);
    			if (if_block12) if_block12.d();
    			if (if_block13) if_block13.d();
    			if (if_block14) if_block14.d();
    			if (if_block15) if_block15.d();
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let celciusWidth = "calc((100vw - (100vw / 8)) / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let secondText = false;
    	let temp = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let extremeHeatII = false;

    	const togglefirstSetup = () => {
    		$$invalidate(3, firstSetup = true);
    		$$invalidate(4, secondSetup = false);
    		$$invalidate(5, secondText = false);
    		$$invalidate(6, temp = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(3, firstSetup = false);
    		$$invalidate(4, secondSetup = true);
    		$$invalidate(5, secondText = true);
    		$$invalidate(6, temp = true);
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(9, extremeHeatII = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(4, secondSetup = false);
    		$$invalidate(5, secondText = false);
    		$$invalidate(6, temp = false);
    		$$invalidate(7, thirdSetup = true);
    		$$invalidate(8, fourthSetup = false);
    		$$invalidate(9, extremeHeatII = true);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, fourthSetup = true);
    		$$invalidate(9, extremeHeatII = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ExtremeHeatI> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("ExtremeHeatI", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(17, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		celciusWidth,
    		firstSetup,
    		secondSetup,
    		secondText,
    		temp,
    		thirdSetup,
    		fourthSetup,
    		extremeHeatII,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(17, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(10, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(11, marginSides = $$props.marginSides);
    		if ("celciusWidth" in $$props) $$invalidate(12, celciusWidth = $$props.celciusWidth);
    		if ("firstSetup" in $$props) $$invalidate(3, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(4, secondSetup = $$props.secondSetup);
    		if ("secondText" in $$props) $$invalidate(5, secondText = $$props.secondText);
    		if ("temp" in $$props) $$invalidate(6, temp = $$props.temp);
    		if ("thirdSetup" in $$props) $$invalidate(7, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(8, fourthSetup = $$props.fourthSetup);
    		if ("extremeHeatII" in $$props) $$invalidate(9, extremeHeatII = $$props.extremeHeatII);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		secondText,
    		temp,
    		thirdSetup,
    		fourthSetup,
    		extremeHeatII,
    		distanceBLines,
    		marginSides,
    		celciusWidth,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		pagetitleText
    	];
    }

    class ExtremeHeatI extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			pagetitleText: 17,
    			rotate: 0,
    			next: 1,
    			prev: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExtremeHeatI",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[17] === undefined && !("pagetitleText" in props)) {
    			console.warn("<ExtremeHeatI> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[0] === undefined && !("rotate" in props)) {
    			console.warn("<ExtremeHeatI> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[1] === undefined && !("next" in props)) {
    			console.warn("<ExtremeHeatI> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
    			console.warn("<ExtremeHeatI> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<ExtremeHeatI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<ExtremeHeatI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<ExtremeHeatI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<ExtremeHeatI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<ExtremeHeatI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<ExtremeHeatI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<ExtremeHeatI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<ExtremeHeatI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/CriticalDecadeI.svelte generated by Svelte v3.23.0 */

    const file$4 = "src/specifics/CriticalDecadeI.svelte";

    // (51:0) {#if firstText}
    function create_if_block_13$1(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$4, 51, 1, 825);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[1]);
    			add_location(a, file$4, 52, 1, 886);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 2) {
    				attr_dev(a, "href", /*next*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$1.name,
    		type: "if",
    		source: "(51:0) {#if firstText}",
    		ctx
    	});

    	return block;
    }

    // (55:0) {#if secondText}
    function create_if_block_12$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$4, 55, 1, 951);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$4, 56, 1, 1011);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[13], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$1.name,
    		type: "if",
    		source: "(55:0) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (59:0) {#if thirdText}
    function create_if_block_11$1(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[2]);
    			add_location(a, file$4, 59, 1, 1093);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$4, 60, 1, 1135);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 4) {
    				attr_dev(a, "href", /*prev*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$1.name,
    		type: "if",
    		source: "(59:0) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    // (78:0) {#if firstText}
    function create_if_block_10$1(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Since 1880 Earth’s average global temperature has increased by 1,1 - 1,3°C.");
    			attr_dev(div, "class", "pagetext svelte-o4v6jv");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$4, 78, 1, 1437);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$1.name,
    		type: "if",
    		source: "(78:0) {#if firstText}",
    		ctx
    	});

    	return block;
    }

    // (83:0) {#if secondText}
    function create_if_block_9$2(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Two-thirds of that warming happened in the last 45 years.");
    			attr_dev(div, "class", "pagetext svelte-o4v6jv");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$4, 83, 1, 1618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$2.name,
    		type: "if",
    		source: "(83:0) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (88:0) {#if thirdText}
    function create_if_block_8$2(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("The Paris Agreement aims to limit warming to + 1,5°C.");
    			attr_dev(div, "class", "pagetext svelte-o4v6jv");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$4, 88, 1, 1775);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$2.name,
    		type: "if",
    		source: "(88:0) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    // (110:1) {#if thirdText}
    function create_if_block_7$2(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "1,5°C";
    			attr_dev(span, "class", "tempnumber text svelte-o4v6jv");
    			add_location(span, file$4, 111, 3, 2370);
    			attr_dev(div, "class", "temperature svelte-o4v6jv");
    			set_style(div, "width", "100%");
    			set_style(div, "background-color", "rgba(0,0,0,0)", 1);
    			set_style(div, "border", "none");
    			add_location(div, file$4, 110, 2, 2262);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(110:1) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    // (120:0) {#if firstText}
    function create_if_block_6$2(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let t2;
    	let div3;
    	let t3;
    	let div4;
    	let t4;
    	let div5;
    	let t5;
    	let div6;
    	let t6;
    	let div7;
    	let t7;
    	let div8;
    	let t9;
    	let div9;
    	let t11;
    	let div10;
    	let t13;
    	let div11;
    	let t15;
    	let div12;
    	let t17;
    	let div13;
    	let t19;
    	let div14;
    	let t21;
    	let div15;
    	let t23;
    	let div16;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			div3 = element("div");
    			t3 = space();
    			div4 = element("div");
    			t4 = space();
    			div5 = element("div");
    			t5 = space();
    			div6 = element("div");
    			t6 = space();
    			div7 = element("div");
    			t7 = space();
    			div8 = element("div");
    			div8.textContent = "2010";
    			t9 = space();
    			div9 = element("div");
    			div9.textContent = "2000";
    			t11 = space();
    			div10 = element("div");
    			div10.textContent = "1990";
    			t13 = space();
    			div11 = element("div");
    			div11.textContent = "1980";
    			t15 = space();
    			div12 = element("div");
    			div12.textContent = "1970";
    			t17 = space();
    			div13 = element("div");
    			div13.textContent = "1960";
    			t19 = space();
    			div14 = element("div");
    			div14.textContent = "1950";
    			t21 = space();
    			div15 = element("div");
    			div15.textContent = "1940";
    			t23 = space();
    			div16 = element("div");
    			attr_dev(div0, "class", "line left line10 svelte-o4v6jv");
    			add_location(div0, file$4, 120, 1, 2523);
    			attr_dev(div1, "class", "line left line20 svelte-o4v6jv");
    			add_location(div1, file$4, 121, 1, 2561);
    			attr_dev(div2, "class", "line left line30 svelte-o4v6jv");
    			add_location(div2, file$4, 122, 1, 2599);
    			attr_dev(div3, "class", "line left line40 svelte-o4v6jv");
    			add_location(div3, file$4, 123, 1, 2637);
    			attr_dev(div4, "class", "line left line50 svelte-o4v6jv");
    			add_location(div4, file$4, 124, 1, 2675);
    			attr_dev(div5, "class", "line left line60 svelte-o4v6jv");
    			add_location(div5, file$4, 125, 1, 2713);
    			attr_dev(div6, "class", "line left line70 svelte-o4v6jv");
    			add_location(div6, file$4, 126, 1, 2751);
    			attr_dev(div7, "class", "line left line80 svelte-o4v6jv");
    			add_location(div7, file$4, 127, 1, 2789);
    			attr_dev(div8, "class", "text years left line10 svelte-o4v6jv");
    			add_location(div8, file$4, 129, 1, 2828);
    			attr_dev(div9, "class", "text years left line20 svelte-o4v6jv");
    			add_location(div9, file$4, 130, 1, 2876);
    			attr_dev(div10, "class", "text years left line30 svelte-o4v6jv");
    			add_location(div10, file$4, 131, 1, 2924);
    			attr_dev(div11, "class", "text years left line40 svelte-o4v6jv");
    			add_location(div11, file$4, 132, 1, 2972);
    			attr_dev(div12, "class", "text years left line50 svelte-o4v6jv");
    			add_location(div12, file$4, 133, 1, 3020);
    			attr_dev(div13, "class", "text years left line60 svelte-o4v6jv");
    			add_location(div13, file$4, 134, 1, 3068);
    			attr_dev(div14, "class", "text years left line70 svelte-o4v6jv");
    			add_location(div14, file$4, 135, 1, 3116);
    			attr_dev(div15, "class", "text years left line80 svelte-o4v6jv");
    			add_location(div15, file$4, 136, 1, 3164);
    			attr_dev(div16, "class", "verticalLine fromTop svelte-o4v6jv");
    			set_style(div16, "left", "calc(" + /*marginSides*/ ctx[8] + " + " + /*tempWidthA*/ ctx[9] + ")");
    			set_style(div16, "height", "calc(" + /*distanceBLines*/ ctx[7] + " * 9)");
    			add_location(div16, file$4, 138, 1, 3213);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div9, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div10, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div11, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, div12, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div13, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div14, anchor);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div15, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, div16, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div9);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div10);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(div12);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div13);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div14);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div15);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(div16);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(120:0) {#if firstText}",
    		ctx
    	});

    	return block;
    }

    // (147:0) {#if secondLines}
    function create_if_block_4$2(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let t2;
    	let t3;
    	let div3;
    	let if_block = /*secondText*/ ctx[4] && create_if_block_5$2(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			div3 = element("div");
    			attr_dev(div0, "class", "verticalLine fromTop svelte-o4v6jv");
    			set_style(div0, "left", "calc(" + /*marginSides*/ ctx[8] + " + " + /*tempWidthB*/ ctx[10] + ")");
    			set_style(div0, "height", "calc(" + /*distanceBLines*/ ctx[7] + " * 4.5)");
    			add_location(div0, file$4, 147, 1, 3451);
    			attr_dev(div1, "class", "horizontalLine svelte-o4v6jv");
    			set_style(div1, "left", "calc(" + /*marginSides*/ ctx[8] + " + " + /*tempWidthB*/ ctx[10] + ")");
    			set_style(div1, "width", "calc(" + /*tempWidthA*/ ctx[9] + " - " + /*tempWidthB*/ ctx[10] + ")");
    			set_style(div1, "top", "calc(" + /*distanceBLines*/ ctx[7] + " * 4.5)");
    			add_location(div1, file$4, 148, 1, 3581);
    			attr_dev(div2, "class", "verticalLine svelte-o4v6jv");
    			set_style(div2, "left", "calc(" + /*marginSides*/ ctx[8] + " + " + /*tempWidthA*/ ctx[9] + ")");
    			set_style(div2, "top", "calc(" + /*distanceBLines*/ ctx[7] + " * 4.5)");
    			set_style(div2, "height", "calc(" + /*distanceBLines*/ ctx[7] + " * 4.5)");
    			add_location(div2, file$4, 149, 1, 3744);
    			attr_dev(div3, "class", "line left line45 svelte-o4v6jv");
    			add_location(div3, file$4, 153, 1, 3975);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*secondText*/ ctx[4]) {
    				if (if_block) ; else {
    					if_block = create_if_block_5$2(ctx);
    					if_block.c();
    					if_block.m(t3.parentNode, t3);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t2);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(147:0) {#if secondLines}",
    		ctx
    	});

    	return block;
    }

    // (151:1) {#if secondText}
    function create_if_block_5$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "1975";
    			attr_dev(div, "class", "text years left line45 svelte-o4v6jv");
    			add_location(div, file$4, 151, 2, 3920);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(151:1) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (158:0) {#if thirdText}
    function create_if_block_3$2(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let t2;
    	let div3;
    	let t3;
    	let div4;
    	let t4;
    	let div5;
    	let t5;
    	let div6;
    	let t6;
    	let div7;
    	let t7;
    	let div8;
    	let t8;
    	let div9;
    	let t9;
    	let div10;
    	let t11;
    	let div11;
    	let t13;
    	let div12;
    	let t15;
    	let div13;
    	let t17;
    	let div14;
    	let t19;
    	let div15;
    	let t21;
    	let div16;
    	let t23;
    	let div17;
    	let t25;
    	let div18;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			div3 = element("div");
    			t3 = space();
    			div4 = element("div");
    			t4 = space();
    			div5 = element("div");
    			t5 = space();
    			div6 = element("div");
    			t6 = space();
    			div7 = element("div");
    			t7 = space();
    			div8 = element("div");
    			t8 = space();
    			div9 = element("div");
    			t9 = space();
    			div10 = element("div");
    			div10.textContent = "2020";
    			t11 = space();
    			div11 = element("div");
    			div11.textContent = "2030";
    			t13 = space();
    			div12 = element("div");
    			div12.textContent = "2040";
    			t15 = space();
    			div13 = element("div");
    			div13.textContent = "2050";
    			t17 = space();
    			div14 = element("div");
    			div14.textContent = "2060";
    			t19 = space();
    			div15 = element("div");
    			div15.textContent = "2070";
    			t21 = space();
    			div16 = element("div");
    			div16.textContent = "2080";
    			t23 = space();
    			div17 = element("div");
    			div17.textContent = "2090";
    			t25 = space();
    			div18 = element("div");
    			div18.textContent = "2100";
    			attr_dev(div0, "class", "verticalLine fromTop svelte-o4v6jv");
    			set_style(div0, "right", /*marginSides*/ ctx[8]);
    			set_style(div0, "height", "calc(" + /*distanceBLines*/ ctx[7] + " * 9)");
    			add_location(div0, file$4, 158, 1, 4037);
    			attr_dev(div1, "class", "line right line0 svelte-o4v6jv");
    			add_location(div1, file$4, 160, 1, 4146);
    			attr_dev(div2, "class", "line right line10 svelte-o4v6jv");
    			add_location(div2, file$4, 161, 1, 4184);
    			attr_dev(div3, "class", "line right line20 svelte-o4v6jv");
    			add_location(div3, file$4, 162, 1, 4223);
    			attr_dev(div4, "class", "line right line30 svelte-o4v6jv");
    			add_location(div4, file$4, 163, 1, 4262);
    			attr_dev(div5, "class", "line right line40 svelte-o4v6jv");
    			add_location(div5, file$4, 164, 1, 4301);
    			attr_dev(div6, "class", "line right line50 svelte-o4v6jv");
    			add_location(div6, file$4, 165, 1, 4340);
    			attr_dev(div7, "class", "line right line60 svelte-o4v6jv");
    			add_location(div7, file$4, 166, 1, 4379);
    			attr_dev(div8, "class", "line right line70 svelte-o4v6jv");
    			add_location(div8, file$4, 167, 1, 4418);
    			attr_dev(div9, "class", "line right line80 svelte-o4v6jv");
    			add_location(div9, file$4, 168, 1, 4457);
    			attr_dev(div10, "class", "text years right line0 svelte-o4v6jv");
    			add_location(div10, file$4, 170, 1, 4497);
    			attr_dev(div11, "class", "text years right line10 svelte-o4v6jv");
    			add_location(div11, file$4, 171, 1, 4545);
    			attr_dev(div12, "class", "text years right line20 svelte-o4v6jv");
    			add_location(div12, file$4, 172, 1, 4594);
    			attr_dev(div13, "class", "text years right line30 svelte-o4v6jv");
    			add_location(div13, file$4, 173, 1, 4643);
    			attr_dev(div14, "class", "text years right line40 svelte-o4v6jv");
    			add_location(div14, file$4, 174, 1, 4692);
    			attr_dev(div15, "class", "text years right line50 svelte-o4v6jv");
    			add_location(div15, file$4, 175, 1, 4741);
    			attr_dev(div16, "class", "text years right line60 svelte-o4v6jv");
    			add_location(div16, file$4, 176, 1, 4790);
    			attr_dev(div17, "class", "text years right line70 svelte-o4v6jv");
    			add_location(div17, file$4, 177, 1, 4839);
    			attr_dev(div18, "class", "text years right line80 svelte-o4v6jv");
    			add_location(div18, file$4, 178, 1, 4888);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div9, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div10, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div11, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div12, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, div13, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div14, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div15, anchor);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div16, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, div17, anchor);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div18, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div9);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div10);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div12);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(div13);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div14);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div15);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div16);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(div17);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div18);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(158:0) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    // (190:3) {#if firstText}
    function create_if_block_2$2(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://www.carbonbrief.org/state-of-the-climate-how-the-world-warmed-in-2019");
    			attr_dev(a, "class", "svelte-o4v6jv");
    			add_location(a, file$4, 189, 19, 5084);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(190:3) {#if firstText}",
    		ctx
    	});

    	return block;
    }

    // (191:3) {#if secondText}
    function create_if_block_1$2(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://econofact.org/global-temperature-and-human-activity");
    			attr_dev(a, "class", "svelte-o4v6jv");
    			add_location(a, file$4, 190, 20, 5240);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(191:3) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (192:3) {#if thirdText}
    function create_if_block$2(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://climateactiontracker.org/global/cat-thermometer/");
    			attr_dev(a, "class", "svelte-o4v6jv");
    			add_location(a, file$4, 191, 19, 5377);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(192:3) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let br0;
    	let t4;
    	let br1;
    	let t5;
    	let br2;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let div1;
    	let t11;
    	let div4;
    	let div2;
    	let span0;
    	let t13;
    	let div3;
    	let span1;
    	let t15;
    	let t16;
    	let div5;
    	let t17;
    	let t18;
    	let t19;
    	let div6;
    	let t20;
    	let div7;
    	let t22;
    	let t23;
    	let t24;
    	let div9;
    	let div8;
    	let t25;
    	let t26;
    	let t27;
    	let div10;
    	let t28;
    	let div12;
    	let div11;
    	let if_block0 = /*firstText*/ ctx[3] && create_if_block_13$1(ctx);
    	let if_block1 = /*secondText*/ ctx[4] && create_if_block_12$1(ctx);
    	let if_block2 = /*thirdText*/ ctx[5] && create_if_block_11$1(ctx);
    	let if_block3 = /*firstText*/ ctx[3] && create_if_block_10$1(ctx);
    	let if_block4 = /*secondText*/ ctx[4] && create_if_block_9$2(ctx);
    	let if_block5 = /*thirdText*/ ctx[5] && create_if_block_8$2(ctx);
    	let if_block6 = /*thirdText*/ ctx[5] && create_if_block_7$2(ctx);
    	let if_block7 = /*firstText*/ ctx[3] && create_if_block_6$2(ctx);
    	let if_block8 = /*secondLines*/ ctx[6] && create_if_block_4$2(ctx);
    	let if_block9 = /*thirdText*/ ctx[5] && create_if_block_3$2(ctx);
    	let if_block10 = /*firstText*/ ctx[3] && create_if_block_2$2(ctx);
    	let if_block11 = /*secondText*/ ctx[4] && create_if_block_1$2(ctx);
    	let if_block12 = /*thirdText*/ ctx[5] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			div0 = element("div");
    			t3 = text("The");
    			br0 = element("br");
    			t4 = text("Critical");
    			br1 = element("br");
    			t5 = text("Decade:");
    			br2 = element("br");
    			t6 = text("I");
    			t7 = space();
    			if (if_block3) if_block3.c();
    			t8 = space();
    			if (if_block4) if_block4.c();
    			t9 = space();
    			if (if_block5) if_block5.c();
    			t10 = space();
    			div1 = element("div");
    			t11 = space();
    			div4 = element("div");
    			div2 = element("div");
    			span0 = element("span");
    			span0.textContent = "0°C";
    			t13 = space();
    			div3 = element("div");
    			span1 = element("span");
    			span1.textContent = "1,2°C";
    			t15 = space();
    			if (if_block6) if_block6.c();
    			t16 = space();
    			div5 = element("div");
    			t17 = text("↑");
    			t18 = space();
    			if (if_block7) if_block7.c();
    			t19 = space();
    			div6 = element("div");
    			t20 = space();
    			div7 = element("div");
    			div7.textContent = "2020";
    			t22 = space();
    			if (if_block8) if_block8.c();
    			t23 = space();
    			if (if_block9) if_block9.c();
    			t24 = space();
    			div9 = element("div");
    			div8 = element("div");
    			if (if_block10) if_block10.c();
    			t25 = space();
    			if (if_block11) if_block11.c();
    			t26 = space();
    			if (if_block12) if_block12.c();
    			t27 = space();
    			div10 = element("div");
    			t28 = space();
    			div12 = element("div");
    			div11 = element("div");
    			add_location(br0, file$4, 75, 63, 1384);
    			add_location(br1, file$4, 75, 75, 1396);
    			add_location(br2, file$4, 75, 86, 1407);
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$4, 75, 0, 1321);
    			attr_dev(div1, "class", "backgroundBox svelte-o4v6jv");
    			add_location(div1, file$4, 98, 0, 1940);
    			attr_dev(span0, "class", "tempnumber text svelte-o4v6jv");
    			add_location(span0, file$4, 104, 2, 2073);
    			attr_dev(div2, "class", "temperature svelte-o4v6jv");
    			set_style(div2, "left", /*marginSides*/ ctx[8]);
    			set_style(div2, "border", "none");
    			add_location(div2, file$4, 103, 1, 2002);
    			attr_dev(span1, "class", "tempnumber text svelte-o4v6jv");
    			add_location(span1, file$4, 107, 2, 2192);
    			attr_dev(div3, "class", "temperature svelte-o4v6jv");
    			set_style(div3, "width", "calc(" + /*tempWidthA*/ ctx[9] + " - 1px)");
    			add_location(div3, file$4, 106, 1, 2123);
    			attr_dev(div4, "class", "tempMeter");
    			add_location(div4, file$4, 102, 0, 1977);
    			attr_dev(div5, "class", "arrow text svelte-o4v6jv");
    			set_style(div5, "width", /*marginSides*/ ctx[8]);
    			add_location(div5, file$4, 115, 0, 2436);
    			attr_dev(div6, "class", "line left line0 svelte-o4v6jv");
    			add_location(div6, file$4, 142, 0, 3348);
    			attr_dev(div7, "class", "text years left line0 svelte-o4v6jv");
    			add_location(div7, file$4, 143, 0, 3384);
    			attr_dev(div8, "class", "bottomLineText text svelte-o4v6jv");
    			set_style(div8, "text-align", "right");
    			add_location(div8, file$4, 188, 2, 5004);
    			attr_dev(div9, "class", "text bottomLine svelte-o4v6jv");
    			add_location(div9, file$4, 187, 0, 4972);
    			attr_dev(div10, "class", "activedot activedot5");
    			add_location(div10, file$4, 203, 0, 5536);
    			attr_dev(div11, "class", "progressline");
    			set_style(div11, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			add_location(div11, file$4, 205, 1, 5618);
    			attr_dev(div12, "class", "activedotnew activedotFan");
    			add_location(div12, file$4, 204, 0, 5577);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t3);
    			append_dev(div0, br0);
    			append_dev(div0, t4);
    			append_dev(div0, br1);
    			append_dev(div0, t5);
    			append_dev(div0, br2);
    			append_dev(div0, t6);
    			insert_dev(target, t7, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, span0);
    			append_dev(div4, t13);
    			append_dev(div4, div3);
    			append_dev(div3, span1);
    			append_dev(div4, t15);
    			if (if_block6) if_block6.m(div4, null);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, t17);
    			insert_dev(target, t18, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t22, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t23, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div8);
    			if (if_block10) if_block10.m(div8, null);
    			append_dev(div8, t25);
    			if (if_block11) if_block11.m(div8, null);
    			append_dev(div8, t26);
    			if (if_block12) if_block12.m(div8, null);
    			insert_dev(target, t27, anchor);
    			insert_dev(target, div10, anchor);
    			insert_dev(target, t28, anchor);
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div11);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstText*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_13$1(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondText*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_12$1(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_11$1(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}

    			if (/*firstText*/ ctx[3]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_10$1(ctx);
    					if_block3.c();
    					if_block3.m(t8.parentNode, t8);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*secondText*/ ctx[4]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_9$2(ctx);
    					if_block4.c();
    					if_block4.m(t9.parentNode, t9);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_8$2(ctx);
    					if_block5.c();
    					if_block5.m(t10.parentNode, t10);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block6) ; else {
    					if_block6 = create_if_block_7$2(ctx);
    					if_block6.c();
    					if_block6.m(div4, null);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*firstText*/ ctx[3]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_6$2(ctx);
    					if_block7.c();
    					if_block7.m(t19.parentNode, t19);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*secondLines*/ ctx[6]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_4$2(ctx);
    					if_block8.c();
    					if_block8.m(t23.parentNode, t23);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_3$2(ctx);
    					if_block9.c();
    					if_block9.m(t24.parentNode, t24);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*firstText*/ ctx[3]) {
    				if (if_block10) ; else {
    					if_block10 = create_if_block_2$2(ctx);
    					if_block10.c();
    					if_block10.m(div8, t25);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*secondText*/ ctx[4]) {
    				if (if_block11) ; else {
    					if_block11 = create_if_block_1$2(ctx);
    					if_block11.c();
    					if_block11.m(div8, t26);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block12) ; else {
    					if_block12 = create_if_block$2(ctx);
    					if_block12.c();
    					if_block12.m(div8, null);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div11, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t7);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div4);
    			if (if_block6) if_block6.d();
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t18);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t22);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t23);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(div9);
    			if (if_block10) if_block10.d();
    			if (if_block11) if_block11.d();
    			if (if_block12) if_block12.d();
    			if (detaching) detach_dev(t27);
    			if (detaching) detach_dev(div10);
    			if (detaching) detach_dev(t28);
    			if (detaching) detach_dev(div12);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let tempWidthA = "calc((100vw - (100vw / 8)) / 15 * 12)";
    	let tempWidthB = "calc(((100vw - (100vw / 8)) / 15 * 10) / 3 * 1)";
    	let firstText = true;
    	let secondText = false;
    	let thirdText = false;
    	let secondLines = false;

    	const togglefirstSetup = () => {
    		$$invalidate(3, firstText = true);
    		$$invalidate(4, secondText = false);
    		$$invalidate(5, thirdText = false);
    		$$invalidate(6, secondLines = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(3, firstText = false);
    		$$invalidate(4, secondText = true);
    		$$invalidate(5, thirdText = false);
    		$$invalidate(6, secondLines = true);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(3, firstText = false);
    		$$invalidate(4, secondText = false);
    		$$invalidate(5, thirdText = true);
    	};

    	const writable_props = ["rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CriticalDecadeI> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("CriticalDecadeI", $$slots, []);

    	$$self.$set = $$props => {
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		tempWidthA,
    		tempWidthB,
    		firstText,
    		secondText,
    		thirdText,
    		secondLines,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(7, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(8, marginSides = $$props.marginSides);
    		if ("tempWidthA" in $$props) $$invalidate(9, tempWidthA = $$props.tempWidthA);
    		if ("tempWidthB" in $$props) $$invalidate(10, tempWidthB = $$props.tempWidthB);
    		if ("firstText" in $$props) $$invalidate(3, firstText = $$props.firstText);
    		if ("secondText" in $$props) $$invalidate(4, secondText = $$props.secondText);
    		if ("thirdText" in $$props) $$invalidate(5, thirdText = $$props.thirdText);
    		if ("secondLines" in $$props) $$invalidate(6, secondLines = $$props.secondLines);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rotate,
    		next,
    		prev,
    		firstText,
    		secondText,
    		thirdText,
    		secondLines,
    		distanceBLines,
    		marginSides,
    		tempWidthA,
    		tempWidthB,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup
    	];
    }

    class CriticalDecadeI extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { rotate: 0, next: 1, prev: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CriticalDecadeI",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*rotate*/ ctx[0] === undefined && !("rotate" in props)) {
    			console.warn("<CriticalDecadeI> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[1] === undefined && !("next" in props)) {
    			console.warn("<CriticalDecadeI> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
    			console.warn("<CriticalDecadeI> was created without expected prop 'prev'");
    		}
    	}

    	get rotate() {
    		throw new Error("<CriticalDecadeI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<CriticalDecadeI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<CriticalDecadeI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<CriticalDecadeI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<CriticalDecadeI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<CriticalDecadeI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/CriticalDecadeII.svelte generated by Svelte v3.23.0 */

    const file$5 = "src/specifics/CriticalDecadeII.svelte";

    // (142:0) {#if firstText}
    function create_if_block_27(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$5, 142, 1, 2470);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[1]);
    			add_location(a, file$5, 143, 1, 2531);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 2) {
    				attr_dev(a, "href", /*next*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27.name,
    		type: "if",
    		source: "(142:0) {#if firstText}",
    		ctx
    	});

    	return block;
    }

    // (146:0) {#if secondText}
    function create_if_block_26(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$5, 146, 1, 2596);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$5, 147, 1, 2656);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26.name,
    		type: "if",
    		source: "(146:0) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (150:0) {#if thirdText}
    function create_if_block_25(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$5, 150, 1, 2738);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$5, 151, 1, 2799);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25.name,
    		type: "if",
    		source: "(150:0) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    // (154:0) {#if fourthText}
    function create_if_block_24(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$5, 154, 1, 2883);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$5, 155, 1, 2943);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24.name,
    		type: "if",
    		source: "(154:0) {#if fourthText}",
    		ctx
    	});

    	return block;
    }

    // (158:0) {#if fifthText}
    function create_if_block_23(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$5, 158, 1, 3025);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$5, 159, 1, 3085);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23.name,
    		type: "if",
    		source: "(158:0) {#if fifthText}",
    		ctx
    	});

    	return block;
    }

    // (162:0) {#if sixthText}
    function create_if_block_22(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[2]);
    			add_location(a, file$5, 162, 1, 3168);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$5, 163, 1, 3210);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglefifthSetup*/ ctx[21], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 4) {
    				attr_dev(a, "href", /*prev*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22.name,
    		type: "if",
    		source: "(162:0) {#if sixthText}",
    		ctx
    	});

    	return block;
    }

    // (183:0) {#if firstText}
    function create_if_block_21(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Emissions have risen steadily since the industrial revolution.");
    			attr_dev(div, "class", "pagetext svelte-1oda07b");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$5, 183, 1, 3514);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21.name,
    		type: "if",
    		source: "(183:0) {#if firstText}",
    		ctx
    	});

    	return block;
    }

    // (186:0) {#if secondText}
    function create_if_block_20(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("With our current level of emissions we have reached our limit.");
    			attr_dev(div, "class", "pagetext svelte-1oda07b");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$5, 186, 1, 3666);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20.name,
    		type: "if",
    		source: "(186:0) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (189:0) {#if thirdText}
    function create_if_block_19(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("From now on we must reduce.");
    			attr_dev(div, "class", "pagetext svelte-1oda07b");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$5, 189, 1, 3817);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19.name,
    		type: "if",
    		source: "(189:0) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    // (192:0) {#if fourthText}
    function create_if_block_18(ctx) {
    	let div;
    	let t0;
    	let sub;
    	let t2;
    	let br;
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("To limit warming to 1,5°C, global CO");
    			sub = element("sub");
    			sub.textContent = "2";
    			t2 = text(" emissions must have reached");
    			br = element("br");
    			t3 = text("net-zero by 2050.");
    			add_location(sub, file$5, 192, 96, 4029);
    			add_location(br, file$5, 192, 136, 4069);
    			attr_dev(div, "class", "pagetext svelte-1oda07b");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$5, 192, 1, 3934);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, sub);
    			append_dev(div, t2);
    			append_dev(div, br);
    			append_dev(div, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18.name,
    		type: "if",
    		source: "(192:0) {#if fourthText}",
    		ctx
    	});

    	return block;
    }

    // (195:0) {#if fifthText}
    function create_if_block_17$1(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("To reach net-zero by 2050, emissions must be halved by 2030.");
    			attr_dev(div, "class", "pagetext svelte-1oda07b");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$5, 195, 1, 4130);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$1.name,
    		type: "if",
    		source: "(195:0) {#if fifthText}",
    		ctx
    	});

    	return block;
    }

    // (206:1) {#if emissionGraph}
    function create_if_block_16$1(ctx) {
    	let svg;
    	let polyline;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polyline = svg_element("polyline");
    			attr_dev(polyline, "class", "cls-1 svelte-1oda07b");
    			attr_dev(polyline, "points", "365 748.07 0 748.07 0 0 68.47 0 78.61 94.09 111.59 187 148.35 280 194.96 374.03 224.21 467.1 252.83 561.07 331.85 654.03");
    			add_location(polyline, file$5, 207, 3, 4457);
    			attr_dev(svg, "class", "graph");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 748.07");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$5, 206, 2, 4347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polyline);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$1.name,
    		type: "if",
    		source: "(206:1) {#if emissionGraph}",
    		ctx
    	});

    	return block;
    }

    // (211:1) {#if fourthText}
    function create_if_block_15$1(ctx) {
    	let svg;
    	let polygon;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			attr_dev(polygon, "class", "cls-2");
    			attr_dev(polygon, "points", "365 748.07 0 748.07 0 467.1 365 748.07");
    			add_location(polygon, file$5, 212, 3, 4759);
    			attr_dev(svg, "class", "graph");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 748.07");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$5, 211, 2, 4649);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$1.name,
    		type: "if",
    		source: "(211:1) {#if fourthText}",
    		ctx
    	});

    	return block;
    }

    // (216:1) {#if fifthText}
    function create_if_block_14$1(ctx) {
    	let svg;
    	let polygon;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			attr_dev(polygon, "class", "cls-2");
    			attr_dev(polygon, "points", "365 748.07 0 748.07 0 467.1 182.5 654.03 365 748.07");
    			add_location(polygon, file$5, 217, 3, 4977);
    			attr_dev(svg, "class", "graph");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 748.07");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$5, 216, 2, 4867);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$1.name,
    		type: "if",
    		source: "(216:1) {#if fifthText}",
    		ctx
    	});

    	return block;
    }

    // (228:1) {#if fullMeter}
    function create_if_block_13$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "temperature fullMeter svelte-1oda07b");
    			add_location(div, file$5, 228, 2, 5134);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$2.name,
    		type: "if",
    		source: "(228:1) {#if fullMeter}",
    		ctx
    	});

    	return block;
    }

    // (231:1) {#if halfMeter}
    function create_if_block_12$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "temperature halfMeter svelte-1oda07b");
    			add_location(div, file$5, 231, 2, 5202);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$2.name,
    		type: "if",
    		source: "(231:1) {#if halfMeter}",
    		ctx
    	});

    	return block;
    }

    // (241:0) {#if secondText}
    function create_if_block_11$2(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let t2;
    	let div3;
    	let t3;
    	let div4;
    	let t4;
    	let div5;
    	let t5;
    	let div6;
    	let t6;
    	let div7;
    	let t7;
    	let div8;
    	let t8;
    	let div9;
    	let t10;
    	let div10;
    	let t12;
    	let div11;
    	let t14;
    	let div12;
    	let t16;
    	let div13;
    	let t18;
    	let div14;
    	let t20;
    	let div15;
    	let t22;
    	let div16;
    	let t24;
    	let div17;
    	let t26;
    	let div18;
    	let t27;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			div3 = element("div");
    			t3 = space();
    			div4 = element("div");
    			t4 = space();
    			div5 = element("div");
    			t5 = space();
    			div6 = element("div");
    			t6 = space();
    			div7 = element("div");
    			t7 = space();
    			div8 = element("div");
    			t8 = space();
    			div9 = element("div");
    			div9.textContent = "2020";
    			t10 = space();
    			div10 = element("div");
    			div10.textContent = "2010";
    			t12 = space();
    			div11 = element("div");
    			div11.textContent = "2000";
    			t14 = space();
    			div12 = element("div");
    			div12.textContent = "1990";
    			t16 = space();
    			div13 = element("div");
    			div13.textContent = "1980";
    			t18 = space();
    			div14 = element("div");
    			div14.textContent = "1970";
    			t20 = space();
    			div15 = element("div");
    			div15.textContent = "1960";
    			t22 = space();
    			div16 = element("div");
    			div16.textContent = "1950";
    			t24 = space();
    			div17 = element("div");
    			div17.textContent = "1940";
    			t26 = space();
    			div18 = element("div");
    			t27 = text("↑");
    			attr_dev(div0, "class", "line left line0 svelte-1oda07b");
    			add_location(div0, file$5, 241, 1, 5438);
    			attr_dev(div1, "class", "line left line10 svelte-1oda07b");
    			add_location(div1, file$5, 242, 1, 5475);
    			attr_dev(div2, "class", "line left line20 svelte-1oda07b");
    			add_location(div2, file$5, 243, 1, 5513);
    			attr_dev(div3, "class", "line left line30 svelte-1oda07b");
    			add_location(div3, file$5, 244, 1, 5551);
    			attr_dev(div4, "class", "line left line40 svelte-1oda07b");
    			add_location(div4, file$5, 245, 1, 5589);
    			attr_dev(div5, "class", "line left line50 svelte-1oda07b");
    			add_location(div5, file$5, 246, 1, 5627);
    			attr_dev(div6, "class", "line left line60 svelte-1oda07b");
    			add_location(div6, file$5, 247, 1, 5665);
    			attr_dev(div7, "class", "line left line70 svelte-1oda07b");
    			add_location(div7, file$5, 248, 1, 5703);
    			attr_dev(div8, "class", "line left line80 svelte-1oda07b");
    			add_location(div8, file$5, 249, 1, 5741);
    			attr_dev(div9, "class", "text years left line0 svelte-1oda07b");
    			add_location(div9, file$5, 251, 1, 5780);
    			attr_dev(div10, "class", "text years left line10 svelte-1oda07b");
    			add_location(div10, file$5, 252, 1, 5827);
    			attr_dev(div11, "class", "text years left line20 svelte-1oda07b");
    			add_location(div11, file$5, 253, 1, 5875);
    			attr_dev(div12, "class", "text years left line30 svelte-1oda07b");
    			add_location(div12, file$5, 254, 1, 5923);
    			attr_dev(div13, "class", "text years left line40 svelte-1oda07b");
    			add_location(div13, file$5, 255, 1, 5971);
    			attr_dev(div14, "class", "text years left line50 svelte-1oda07b");
    			add_location(div14, file$5, 256, 1, 6019);
    			attr_dev(div15, "class", "text years left line60 svelte-1oda07b");
    			add_location(div15, file$5, 257, 1, 6067);
    			attr_dev(div16, "class", "text years left line70 svelte-1oda07b");
    			add_location(div16, file$5, 258, 1, 6115);
    			attr_dev(div17, "class", "text years left line80 svelte-1oda07b");
    			add_location(div17, file$5, 259, 1, 6163);
    			attr_dev(div18, "class", "arrow text svelte-1oda07b");
    			set_style(div18, "width", /*marginSides*/ ctx[16]);
    			add_location(div18, file$5, 261, 1, 6212);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div9, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div10, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div11, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, div12, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, div13, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div14, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, div15, anchor);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, div16, anchor);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, div17, anchor);
    			insert_dev(target, t26, anchor);
    			insert_dev(target, div18, anchor);
    			append_dev(div18, t27);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div9);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div10);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(div12);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(div13);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div14);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(div15);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(div16);
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(div17);
    			if (detaching) detach_dev(t26);
    			if (detaching) detach_dev(div18);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$2.name,
    		type: "if",
    		source: "(241:0) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (265:0) {#if thirdText}
    function create_if_block_10$2(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let t2;
    	let div3;
    	let t3;
    	let div4;
    	let t4;
    	let div5;
    	let t5;
    	let div6;
    	let t6;
    	let div7;
    	let t7;
    	let div8;
    	let t9;
    	let div9;
    	let t11;
    	let div10;
    	let t13;
    	let div11;
    	let t15;
    	let div12;
    	let t17;
    	let div13;
    	let t19;
    	let div14;
    	let t21;
    	let div15;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			div3 = element("div");
    			t3 = space();
    			div4 = element("div");
    			t4 = space();
    			div5 = element("div");
    			t5 = space();
    			div6 = element("div");
    			t6 = space();
    			div7 = element("div");
    			t7 = space();
    			div8 = element("div");
    			div8.textContent = "2030";
    			t9 = space();
    			div9 = element("div");
    			div9.textContent = "2040";
    			t11 = space();
    			div10 = element("div");
    			div10.textContent = "2050";
    			t13 = space();
    			div11 = element("div");
    			div11.textContent = "2060";
    			t15 = space();
    			div12 = element("div");
    			div12.textContent = "2070";
    			t17 = space();
    			div13 = element("div");
    			div13.textContent = "2080";
    			t19 = space();
    			div14 = element("div");
    			div14.textContent = "2090";
    			t21 = space();
    			div15 = element("div");
    			div15.textContent = "2100";
    			attr_dev(div0, "class", "line right line10 svelte-1oda07b");
    			add_location(div0, file$5, 265, 1, 6303);
    			attr_dev(div1, "class", "line right line20 svelte-1oda07b");
    			add_location(div1, file$5, 266, 1, 6342);
    			attr_dev(div2, "class", "line right line30 svelte-1oda07b");
    			add_location(div2, file$5, 267, 1, 6381);
    			attr_dev(div3, "class", "line right line40 svelte-1oda07b");
    			add_location(div3, file$5, 268, 1, 6420);
    			attr_dev(div4, "class", "line right line50 svelte-1oda07b");
    			add_location(div4, file$5, 269, 1, 6459);
    			attr_dev(div5, "class", "line right line60 svelte-1oda07b");
    			add_location(div5, file$5, 270, 1, 6498);
    			attr_dev(div6, "class", "line right line70 svelte-1oda07b");
    			add_location(div6, file$5, 271, 1, 6537);
    			attr_dev(div7, "class", "line right line80 svelte-1oda07b");
    			add_location(div7, file$5, 272, 1, 6576);
    			attr_dev(div8, "class", "text years right line10 svelte-1oda07b");
    			add_location(div8, file$5, 274, 1, 6616);
    			attr_dev(div9, "class", "text years right line20 svelte-1oda07b");
    			add_location(div9, file$5, 275, 1, 6665);
    			attr_dev(div10, "class", "text years right line30 svelte-1oda07b");
    			add_location(div10, file$5, 276, 1, 6714);
    			attr_dev(div11, "class", "text years right line40 svelte-1oda07b");
    			add_location(div11, file$5, 277, 1, 6763);
    			attr_dev(div12, "class", "text years right line50 svelte-1oda07b");
    			add_location(div12, file$5, 278, 1, 6812);
    			attr_dev(div13, "class", "text years right line60 svelte-1oda07b");
    			add_location(div13, file$5, 279, 1, 6861);
    			attr_dev(div14, "class", "text years right line70 svelte-1oda07b");
    			add_location(div14, file$5, 280, 1, 6910);
    			attr_dev(div15, "class", "text years right line80 svelte-1oda07b");
    			add_location(div15, file$5, 281, 1, 6959);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div9, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div10, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div11, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, div12, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div13, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div14, anchor);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div15, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div9);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div10);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(div12);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div13);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div14);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div15);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$2.name,
    		type: "if",
    		source: "(265:0) {#if thirdText}",
    		ctx
    	});

    	return block;
    }

    // (285:0) {#if year20}
    function create_if_block_9$3(ctx) {
    	let div0;
    	let t1;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "2020";
    			t1 = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "text years right line0 svelte-1oda07b");
    			add_location(div0, file$5, 285, 1, 7028);
    			attr_dev(div1, "class", "line right line0 svelte-1oda07b");
    			add_location(div1, file$5, 286, 1, 7076);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$3.name,
    		type: "if",
    		source: "(285:0) {#if year20}",
    		ctx
    	});

    	return block;
    }

    // (291:0) {#if fourthText}
    function create_if_block_8$3(ctx) {
    	let div0;
    	let t0;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "2050";
    			attr_dev(div0, "class", "horizontalLine left svelte-1oda07b");
    			set_style(div0, "width", "100%");
    			set_style(div0, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 6)");
    			add_location(div0, file$5, 291, 1, 7139);
    			attr_dev(div1, "class", "text years right line30 svelte-1oda07b");
    			add_location(div1, file$5, 292, 1, 7234);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$3.name,
    		type: "if",
    		source: "(291:0) {#if fourthText}",
    		ctx
    	});

    	return block;
    }

    // (296:0) {#if line50}
    function create_if_block_7$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line right line30 svelte-1oda07b");
    			add_location(div, file$5, 296, 1, 7303);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$3.name,
    		type: "if",
    		source: "(296:0) {#if line50}",
    		ctx
    	});

    	return block;
    }

    // (299:0) {#if line30}
    function create_if_block_6$3(ctx) {
    	let div0;
    	let t1;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "2030";
    			t1 = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "text years right line10 svelte-1oda07b");
    			add_location(div0, file$5, 299, 1, 7361);
    			attr_dev(div1, "class", "line right line10 svelte-1oda07b");
    			add_location(div1, file$5, 300, 1, 7410);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(299:0) {#if line30}",
    		ctx
    	});

    	return block;
    }

    // (307:0) {#if fifthText}
    function create_if_block_5$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "horizontalLine left svelte-1oda07b");
    			set_style(div, "width", "100%");
    			set_style(div, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 8)");
    			add_location(div, file$5, 307, 1, 7475);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(307:0) {#if fifthText}",
    		ctx
    	});

    	return block;
    }

    // (310:0) {#if sixthText}
    function create_if_block_4$3(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = text("This is a Critical Decade.");
    			attr_dev(div0, "class", "horizontalLine left svelte-1oda07b");
    			set_style(div0, "width", "100%");
    			set_style(div0, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 8)");
    			set_style(div0, "border-top", "1px solid blue");
    			add_location(div0, file$5, 310, 1, 7592);
    			attr_dev(div1, "class", "text criticalText svelte-1oda07b");
    			set_style(div1, "left", /*marginSides*/ ctx[16]);
    			set_style(div1, "right", /*marginSides*/ ctx[16]);
    			set_style(div1, "top", "calc((" + /*distanceBLines*/ ctx[15] + " * 8)");
    			add_location(div1, file$5, 311, 1, 7715);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(310:0) {#if sixthText}",
    		ctx
    	});

    	return block;
    }

    // (325:3) {#if secondText}
    function create_if_block_3$3(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://www.iea.org/reports/global-energy-review-2020/global-energy-and-co2-emissions-in-2020#abstract");
    			attr_dev(a, "class", "svelte-1oda07b");
    			add_location(a, file$5, 324, 20, 8013);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(325:3) {#if secondText}",
    		ctx
    	});

    	return block;
    }

    // (326:3) {#if fourthText}
    function create_if_block_2$3(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://www.theguardian.com/environment/2020/feb/15/christiana-figueres-climate-emergency-this-is-the-decade-the-future-we-choose");
    			attr_dev(a, "class", "svelte-1oda07b");
    			add_location(a, file$5, 325, 20, 8194);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(326:3) {#if fourthText}",
    		ctx
    	});

    	return block;
    }

    // (327:3) {#if fifthText}
    function create_if_block_1$3(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://www.theguardian.com/environment/2020/feb/15/christiana-figueres-climate-emergency-this-is-the-decade-the-future-we-choose");
    			attr_dev(a, "class", "svelte-1oda07b");
    			add_location(a, file$5, 326, 19, 8401);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(327:3) {#if fifthText}",
    		ctx
    	});

    	return block;
    }

    // (328:3) {#if sixthText}
    function create_if_block$3(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://www.theguardian.com/environment/2020/feb/15/christiana-figueres-climate-emergency-this-is-the-decade-the-future-we-choose");
    			attr_dev(a, "class", "svelte-1oda07b");
    			add_location(a, file$5, 327, 19, 8608);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(328:3) {#if sixthText}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let div0;
    	let t6;
    	let br0;
    	let t7;
    	let br1;
    	let t8;
    	let br2;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let div1;
    	let t16;
    	let t17;
    	let t18;
    	let div3;
    	let t19;
    	let t20;
    	let div2;
    	let span0;
    	let t22;
    	let span1;
    	let t24;
    	let t25;
    	let t26;
    	let t27;
    	let t28;
    	let t29;
    	let t30;
    	let t31;
    	let t32;
    	let div5;
    	let div4;
    	let t33;
    	let t34;
    	let t35;
    	let t36;
    	let div7;
    	let div6;
    	let if_block0 = /*firstText*/ ctx[3] && create_if_block_27(ctx);
    	let if_block1 = /*secondText*/ ctx[4] && create_if_block_26(ctx);
    	let if_block2 = /*thirdText*/ ctx[5] && create_if_block_25(ctx);
    	let if_block3 = /*fourthText*/ ctx[6] && create_if_block_24(ctx);
    	let if_block4 = /*fifthText*/ ctx[7] && create_if_block_23(ctx);
    	let if_block5 = /*sixthText*/ ctx[14] && create_if_block_22(ctx);
    	let if_block6 = /*firstText*/ ctx[3] && create_if_block_21(ctx);
    	let if_block7 = /*secondText*/ ctx[4] && create_if_block_20(ctx);
    	let if_block8 = /*thirdText*/ ctx[5] && create_if_block_19(ctx);
    	let if_block9 = /*fourthText*/ ctx[6] && create_if_block_18(ctx);
    	let if_block10 = /*fifthText*/ ctx[7] && create_if_block_17$1(ctx);
    	let if_block11 = /*emissionGraph*/ ctx[8] && create_if_block_16$1(ctx);
    	let if_block12 = /*fourthText*/ ctx[6] && create_if_block_15$1(ctx);
    	let if_block13 = /*fifthText*/ ctx[7] && create_if_block_14$1(ctx);
    	let if_block14 = /*fullMeter*/ ctx[9] && create_if_block_13$2(ctx);
    	let if_block15 = /*halfMeter*/ ctx[10] && create_if_block_12$2(ctx);
    	let if_block16 = /*secondText*/ ctx[4] && create_if_block_11$2(ctx);
    	let if_block17 = /*thirdText*/ ctx[5] && create_if_block_10$2(ctx);
    	let if_block18 = /*year20*/ ctx[11] && create_if_block_9$3(ctx);
    	let if_block19 = /*fourthText*/ ctx[6] && create_if_block_8$3(ctx);
    	let if_block20 = /*line50*/ ctx[12] && create_if_block_7$3(ctx);
    	let if_block21 = /*line30*/ ctx[13] && create_if_block_6$3(ctx);
    	let if_block22 = /*fifthText*/ ctx[7] && create_if_block_5$3(ctx);
    	let if_block23 = /*sixthText*/ ctx[14] && create_if_block_4$3(ctx);
    	let if_block24 = /*secondText*/ ctx[4] && create_if_block_3$3(ctx);
    	let if_block25 = /*fourthText*/ ctx[6] && create_if_block_2$3(ctx);
    	let if_block26 = /*fifthText*/ ctx[7] && create_if_block_1$3(ctx);
    	let if_block27 = /*sixthText*/ ctx[14] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			div0 = element("div");
    			t6 = text("The");
    			br0 = element("br");
    			t7 = text("Critical");
    			br1 = element("br");
    			t8 = text("Decade:");
    			br2 = element("br");
    			t9 = text("II");
    			t10 = space();
    			if (if_block6) if_block6.c();
    			t11 = space();
    			if (if_block7) if_block7.c();
    			t12 = space();
    			if (if_block8) if_block8.c();
    			t13 = space();
    			if (if_block9) if_block9.c();
    			t14 = space();
    			if (if_block10) if_block10.c();
    			t15 = space();
    			div1 = element("div");
    			if (if_block11) if_block11.c();
    			t16 = space();
    			if (if_block12) if_block12.c();
    			t17 = space();
    			if (if_block13) if_block13.c();
    			t18 = space();
    			div3 = element("div");
    			if (if_block14) if_block14.c();
    			t19 = space();
    			if (if_block15) if_block15.c();
    			t20 = space();
    			div2 = element("div");
    			span0 = element("span");
    			span0.textContent = "current level emissions";
    			t22 = space();
    			span1 = element("span");
    			span1.textContent = "net-zero";
    			t24 = space();
    			if (if_block16) if_block16.c();
    			t25 = space();
    			if (if_block17) if_block17.c();
    			t26 = space();
    			if (if_block18) if_block18.c();
    			t27 = space();
    			if (if_block19) if_block19.c();
    			t28 = space();
    			if (if_block20) if_block20.c();
    			t29 = space();
    			if (if_block21) if_block21.c();
    			t30 = space();
    			if (if_block22) if_block22.c();
    			t31 = space();
    			if (if_block23) if_block23.c();
    			t32 = space();
    			div5 = element("div");
    			div4 = element("div");
    			if (if_block24) if_block24.c();
    			t33 = space();
    			if (if_block25) if_block25.c();
    			t34 = space();
    			if (if_block26) if_block26.c();
    			t35 = space();
    			if (if_block27) if_block27.c();
    			t36 = space();
    			div7 = element("div");
    			div6 = element("div");
    			add_location(br0, file$5, 179, 63, 3459);
    			add_location(br1, file$5, 179, 75, 3471);
    			add_location(br2, file$5, 179, 86, 3482);
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$5, 179, 0, 3396);
    			attr_dev(div1, "class", "backgroundBox svelte-1oda07b");
    			add_location(div1, file$5, 204, 0, 4296);
    			attr_dev(span0, "class", "tempnumber text svelte-1oda07b");
    			add_location(span0, file$5, 234, 2, 5289);
    			attr_dev(span1, "class", "tempnumber left text svelte-1oda07b");
    			add_location(span1, file$5, 235, 2, 5352);
    			attr_dev(div2, "class", "temperature infotext svelte-1oda07b");
    			add_location(div2, file$5, 233, 1, 5252);
    			attr_dev(div3, "class", "tempMeter svelte-1oda07b");
    			add_location(div3, file$5, 226, 0, 5091);
    			attr_dev(div4, "class", "bottomLineText text svelte-1oda07b");
    			set_style(div4, "text-align", "right");
    			add_location(div4, file$5, 323, 2, 7932);
    			attr_dev(div5, "class", "text bottomLine svelte-1oda07b");
    			add_location(div5, file$5, 322, 0, 7900);
    			attr_dev(div6, "class", "progressline");
    			set_style(div6, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			add_location(div6, file$5, 332, 1, 8854);
    			attr_dev(div7, "class", "activedotnew activedotFan");
    			add_location(div7, file$5, 331, 0, 8813);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t6);
    			append_dev(div0, br0);
    			append_dev(div0, t7);
    			append_dev(div0, br1);
    			append_dev(div0, t8);
    			append_dev(div0, br2);
    			append_dev(div0, t9);
    			insert_dev(target, t10, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, div1, anchor);
    			if (if_block11) if_block11.m(div1, null);
    			append_dev(div1, t16);
    			if (if_block12) if_block12.m(div1, null);
    			append_dev(div1, t17);
    			if (if_block13) if_block13.m(div1, null);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div3, anchor);
    			if (if_block14) if_block14.m(div3, null);
    			append_dev(div3, t19);
    			if (if_block15) if_block15.m(div3, null);
    			append_dev(div3, t20);
    			append_dev(div3, div2);
    			append_dev(div2, span0);
    			append_dev(div2, t22);
    			append_dev(div2, span1);
    			insert_dev(target, t24, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t25, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t26, anchor);
    			if (if_block18) if_block18.m(target, anchor);
    			insert_dev(target, t27, anchor);
    			if (if_block19) if_block19.m(target, anchor);
    			insert_dev(target, t28, anchor);
    			if (if_block20) if_block20.m(target, anchor);
    			insert_dev(target, t29, anchor);
    			if (if_block21) if_block21.m(target, anchor);
    			insert_dev(target, t30, anchor);
    			if (if_block22) if_block22.m(target, anchor);
    			insert_dev(target, t31, anchor);
    			if (if_block23) if_block23.m(target, anchor);
    			insert_dev(target, t32, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			if (if_block24) if_block24.m(div4, null);
    			append_dev(div4, t33);
    			if (if_block25) if_block25.m(div4, null);
    			append_dev(div4, t34);
    			if (if_block26) if_block26.m(div4, null);
    			append_dev(div4, t35);
    			if (if_block27) if_block27.m(div4, null);
    			insert_dev(target, t36, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div6);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstText*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_27(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondText*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_26(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_25(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthText*/ ctx[6]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_24(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthText*/ ctx[7]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_23(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthText*/ ctx[14]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_22(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}

    			if (/*firstText*/ ctx[3]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_21(ctx);
    					if_block6.c();
    					if_block6.m(t11.parentNode, t11);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*secondText*/ ctx[4]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_20(ctx);
    					if_block7.c();
    					if_block7.m(t12.parentNode, t12);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_19(ctx);
    					if_block8.c();
    					if_block8.m(t13.parentNode, t13);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*fourthText*/ ctx[6]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_18(ctx);
    					if_block9.c();
    					if_block9.m(t14.parentNode, t14);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*fifthText*/ ctx[7]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_17$1(ctx);
    					if_block10.c();
    					if_block10.m(t15.parentNode, t15);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*emissionGraph*/ ctx[8]) {
    				if (if_block11) ; else {
    					if_block11 = create_if_block_16$1(ctx);
    					if_block11.c();
    					if_block11.m(div1, t16);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*fourthText*/ ctx[6]) {
    				if (if_block12) ; else {
    					if_block12 = create_if_block_15$1(ctx);
    					if_block12.c();
    					if_block12.m(div1, t17);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*fifthText*/ ctx[7]) {
    				if (if_block13) ; else {
    					if_block13 = create_if_block_14$1(ctx);
    					if_block13.c();
    					if_block13.m(div1, null);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*fullMeter*/ ctx[9]) {
    				if (if_block14) ; else {
    					if_block14 = create_if_block_13$2(ctx);
    					if_block14.c();
    					if_block14.m(div3, t19);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*halfMeter*/ ctx[10]) {
    				if (if_block15) ; else {
    					if_block15 = create_if_block_12$2(ctx);
    					if_block15.c();
    					if_block15.m(div3, t20);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (/*secondText*/ ctx[4]) {
    				if (if_block16) {
    					if_block16.p(ctx, dirty);
    				} else {
    					if_block16 = create_if_block_11$2(ctx);
    					if_block16.c();
    					if_block16.m(t25.parentNode, t25);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*thirdText*/ ctx[5]) {
    				if (if_block17) ; else {
    					if_block17 = create_if_block_10$2(ctx);
    					if_block17.c();
    					if_block17.m(t26.parentNode, t26);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (/*year20*/ ctx[11]) {
    				if (if_block18) ; else {
    					if_block18 = create_if_block_9$3(ctx);
    					if_block18.c();
    					if_block18.m(t27.parentNode, t27);
    				}
    			} else if (if_block18) {
    				if_block18.d(1);
    				if_block18 = null;
    			}

    			if (/*fourthText*/ ctx[6]) {
    				if (if_block19) {
    					if_block19.p(ctx, dirty);
    				} else {
    					if_block19 = create_if_block_8$3(ctx);
    					if_block19.c();
    					if_block19.m(t28.parentNode, t28);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (/*line50*/ ctx[12]) {
    				if (if_block20) ; else {
    					if_block20 = create_if_block_7$3(ctx);
    					if_block20.c();
    					if_block20.m(t29.parentNode, t29);
    				}
    			} else if (if_block20) {
    				if_block20.d(1);
    				if_block20 = null;
    			}

    			if (/*line30*/ ctx[13]) {
    				if (if_block21) ; else {
    					if_block21 = create_if_block_6$3(ctx);
    					if_block21.c();
    					if_block21.m(t30.parentNode, t30);
    				}
    			} else if (if_block21) {
    				if_block21.d(1);
    				if_block21 = null;
    			}

    			if (/*fifthText*/ ctx[7]) {
    				if (if_block22) {
    					if_block22.p(ctx, dirty);
    				} else {
    					if_block22 = create_if_block_5$3(ctx);
    					if_block22.c();
    					if_block22.m(t31.parentNode, t31);
    				}
    			} else if (if_block22) {
    				if_block22.d(1);
    				if_block22 = null;
    			}

    			if (/*sixthText*/ ctx[14]) {
    				if (if_block23) {
    					if_block23.p(ctx, dirty);
    				} else {
    					if_block23 = create_if_block_4$3(ctx);
    					if_block23.c();
    					if_block23.m(t32.parentNode, t32);
    				}
    			} else if (if_block23) {
    				if_block23.d(1);
    				if_block23 = null;
    			}

    			if (/*secondText*/ ctx[4]) {
    				if (if_block24) ; else {
    					if_block24 = create_if_block_3$3(ctx);
    					if_block24.c();
    					if_block24.m(div4, t33);
    				}
    			} else if (if_block24) {
    				if_block24.d(1);
    				if_block24 = null;
    			}

    			if (/*fourthText*/ ctx[6]) {
    				if (if_block25) ; else {
    					if_block25 = create_if_block_2$3(ctx);
    					if_block25.c();
    					if_block25.m(div4, t34);
    				}
    			} else if (if_block25) {
    				if_block25.d(1);
    				if_block25 = null;
    			}

    			if (/*fifthText*/ ctx[7]) {
    				if (if_block26) ; else {
    					if_block26 = create_if_block_1$3(ctx);
    					if_block26.c();
    					if_block26.m(div4, t35);
    				}
    			} else if (if_block26) {
    				if_block26.d(1);
    				if_block26 = null;
    			}

    			if (/*sixthText*/ ctx[14]) {
    				if (if_block27) ; else {
    					if_block27 = create_if_block$3(ctx);
    					if_block27.c();
    					if_block27.m(div4, null);
    				}
    			} else if (if_block27) {
    				if_block27.d(1);
    				if_block27 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div6, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t10);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t11);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(div1);
    			if (if_block11) if_block11.d();
    			if (if_block12) if_block12.d();
    			if (if_block13) if_block13.d();
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div3);
    			if (if_block14) if_block14.d();
    			if (if_block15) if_block15.d();
    			if (detaching) detach_dev(t24);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t25);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t26);
    			if (if_block18) if_block18.d(detaching);
    			if (detaching) detach_dev(t27);
    			if (if_block19) if_block19.d(detaching);
    			if (detaching) detach_dev(t28);
    			if (if_block20) if_block20.d(detaching);
    			if (detaching) detach_dev(t29);
    			if (if_block21) if_block21.d(detaching);
    			if (detaching) detach_dev(t30);
    			if (if_block22) if_block22.d(detaching);
    			if (detaching) detach_dev(t31);
    			if (if_block23) if_block23.d(detaching);
    			if (detaching) detach_dev(t32);
    			if (detaching) detach_dev(div5);
    			if (if_block24) if_block24.d();
    			if (if_block25) if_block25.d();
    			if (if_block26) if_block26.d();
    			if (if_block27) if_block27.d();
    			if (detaching) detach_dev(t36);
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstText = true;
    	let secondText = false;
    	let thirdText = false;
    	let fourthText = false;
    	let fifthText = false;
    	let emissionGraph = false;
    	let fullMeter = false;
    	let halfMeter = false;
    	let year20 = false;
    	let line50 = false;
    	let line30 = false;
    	let sixthText = false;
    	let fourthSource = false;

    	const togglefirstSetup = () => {
    		$$invalidate(3, firstText = true);
    		$$invalidate(4, secondText = false);
    		$$invalidate(5, thirdText = false);
    		$$invalidate(6, fourthText = false);
    		$$invalidate(7, fifthText = false);
    		$$invalidate(8, emissionGraph = false);
    		$$invalidate(9, fullMeter = false);
    		$$invalidate(10, halfMeter = false);
    		$$invalidate(12, line50 = false);
    		$$invalidate(13, line30 = false);
    		$$invalidate(11, year20 = false);
    		$$invalidate(14, sixthText = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(3, firstText = false);
    		$$invalidate(4, secondText = true);
    		$$invalidate(5, thirdText = false);
    		$$invalidate(6, fourthText = false);
    		$$invalidate(7, fifthText = false);
    		$$invalidate(8, emissionGraph = true);
    		$$invalidate(9, fullMeter = true);
    		$$invalidate(10, halfMeter = false);
    		$$invalidate(12, line50 = false);
    		$$invalidate(13, line30 = false);
    		$$invalidate(11, year20 = false);
    		$$invalidate(14, sixthText = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(3, firstText = false);
    		$$invalidate(4, secondText = false);
    		$$invalidate(5, thirdText = true);
    		$$invalidate(6, fourthText = false);
    		$$invalidate(7, fifthText = false);
    		$$invalidate(8, emissionGraph = true);
    		$$invalidate(9, fullMeter = true);
    		$$invalidate(10, halfMeter = false);
    		$$invalidate(12, line50 = false);
    		$$invalidate(13, line30 = false);
    		$$invalidate(11, year20 = true);
    		$$invalidate(14, sixthText = false);
    		fourthSource = false;
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(3, firstText = false);
    		$$invalidate(4, secondText = false);
    		$$invalidate(5, thirdText = false);
    		$$invalidate(6, fourthText = true);
    		$$invalidate(7, fifthText = false);
    		$$invalidate(8, emissionGraph = true);
    		$$invalidate(9, fullMeter = false);
    		$$invalidate(10, halfMeter = false);
    		$$invalidate(12, line50 = true);
    		$$invalidate(13, line30 = false);
    		$$invalidate(11, year20 = true);
    		$$invalidate(14, sixthText = false);
    		fourthSource = true;
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(3, firstText = false);
    		$$invalidate(4, secondText = false);
    		$$invalidate(5, thirdText = false);
    		$$invalidate(6, fourthText = false);
    		$$invalidate(7, fifthText = true);
    		$$invalidate(8, emissionGraph = true);
    		$$invalidate(9, fullMeter = false);
    		$$invalidate(10, halfMeter = true);
    		$$invalidate(12, line50 = true);
    		$$invalidate(13, line30 = true);
    		$$invalidate(11, year20 = true);
    		$$invalidate(14, sixthText = false);
    		fourthSource = true;
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(3, firstText = false);
    		$$invalidate(4, secondText = false);
    		$$invalidate(5, thirdText = false);
    		$$invalidate(6, fourthText = false);
    		$$invalidate(7, fifthText = true);
    		$$invalidate(8, emissionGraph = true);
    		$$invalidate(9, fullMeter = false);
    		$$invalidate(10, halfMeter = true);
    		$$invalidate(12, line50 = false);
    		$$invalidate(13, line30 = true);
    		$$invalidate(11, year20 = true);
    		$$invalidate(14, sixthText = true);
    		fourthSource = true;
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CriticalDecadeII> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("CriticalDecadeII", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(23, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstText,
    		secondText,
    		thirdText,
    		fourthText,
    		fifthText,
    		emissionGraph,
    		fullMeter,
    		halfMeter,
    		year20,
    		line50,
    		line30,
    		sixthText,
    		fourthSource,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(23, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(15, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(16, marginSides = $$props.marginSides);
    		if ("firstText" in $$props) $$invalidate(3, firstText = $$props.firstText);
    		if ("secondText" in $$props) $$invalidate(4, secondText = $$props.secondText);
    		if ("thirdText" in $$props) $$invalidate(5, thirdText = $$props.thirdText);
    		if ("fourthText" in $$props) $$invalidate(6, fourthText = $$props.fourthText);
    		if ("fifthText" in $$props) $$invalidate(7, fifthText = $$props.fifthText);
    		if ("emissionGraph" in $$props) $$invalidate(8, emissionGraph = $$props.emissionGraph);
    		if ("fullMeter" in $$props) $$invalidate(9, fullMeter = $$props.fullMeter);
    		if ("halfMeter" in $$props) $$invalidate(10, halfMeter = $$props.halfMeter);
    		if ("year20" in $$props) $$invalidate(11, year20 = $$props.year20);
    		if ("line50" in $$props) $$invalidate(12, line50 = $$props.line50);
    		if ("line30" in $$props) $$invalidate(13, line30 = $$props.line30);
    		if ("sixthText" in $$props) $$invalidate(14, sixthText = $$props.sixthText);
    		if ("fourthSource" in $$props) fourthSource = $$props.fourthSource;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rotate,
    		next,
    		prev,
    		firstText,
    		secondText,
    		thirdText,
    		fourthText,
    		fifthText,
    		emissionGraph,
    		fullMeter,
    		halfMeter,
    		year20,
    		line50,
    		line30,
    		sixthText,
    		distanceBLines,
    		marginSides,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		pagetitleText
    	];
    }

    class CriticalDecadeII extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			pagetitleText: 23,
    			rotate: 0,
    			next: 1,
    			prev: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CriticalDecadeII",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[23] === undefined && !("pagetitleText" in props)) {
    			console.warn("<CriticalDecadeII> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[0] === undefined && !("rotate" in props)) {
    			console.warn("<CriticalDecadeII> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[1] === undefined && !("next" in props)) {
    			console.warn("<CriticalDecadeII> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
    			console.warn("<CriticalDecadeII> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<CriticalDecadeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<CriticalDecadeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<CriticalDecadeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<CriticalDecadeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<CriticalDecadeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<CriticalDecadeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<CriticalDecadeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<CriticalDecadeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/USA.svelte generated by Svelte v3.23.0 */

    const file$6 = "src/specifics/USA.svelte";

    // (111:0) {#if firstSetup}
    function create_if_block_24$1(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$6, 111, 1, 1899);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$6, 112, 1, 1960);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$1.name,
    		type: "if",
    		source: "(111:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (115:0) {#if secondSetup}
    function create_if_block_23$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 115, 1, 2026);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 116, 1, 2086);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$1.name,
    		type: "if",
    		source: "(115:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (119:0) {#if thirdSetup}
    function create_if_block_22$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 119, 1, 2169);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 120, 1, 2230);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$1.name,
    		type: "if",
    		source: "(119:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (123:0) {#if fourthSetup}
    function create_if_block_21$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 123, 1, 2315);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 124, 1, 2375);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$1.name,
    		type: "if",
    		source: "(123:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (127:0) {#if fifthSetup}
    function create_if_block_20$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 127, 1, 2458);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 128, 1, 2518);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$1.name,
    		type: "if",
    		source: "(127:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (131:0) {#if sixthSetup}
    function create_if_block_19$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 131, 1, 2602);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 132, 1, 2664);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[23], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[21], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$1.name,
    		type: "if",
    		source: "(131:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (135:0) {#if seventhSetup}
    function create_if_block_18$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 135, 1, 2749);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 136, 1, 2810);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeighthSetup*/ ctx[24], false, false, false),
    					listen_dev(div1, "click", /*togglesixthSetup*/ ctx[22], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$1.name,
    		type: "if",
    		source: "(135:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (139:0) {#if eightthSetup}
    function create_if_block_17$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 139, 1, 2895);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 140, 1, 2956);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleninethSetup*/ ctx[25], false, false, false),
    					listen_dev(div1, "click", /*toggleseventhSetup*/ ctx[23], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$2.name,
    		type: "if",
    		source: "(139:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (143:0) {#if ninethSetup}
    function create_if_block_16$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 143, 1, 3042);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 144, 1, 3102);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggletenthSetup*/ ctx[26], false, false, false),
    					listen_dev(div1, "click", /*toggleeighthSetup*/ ctx[24], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$2.name,
    		type: "if",
    		source: "(143:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (147:0) {#if tenthSetup}
    function create_if_block_15$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$6, 147, 1, 3186);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$6, 148, 1, 3249);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeleventhSetup*/ ctx[27], false, false, false),
    					listen_dev(div1, "click", /*toggleninethSetup*/ ctx[25], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$2.name,
    		type: "if",
    		source: "(147:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (151:0) {#if eleventhSetup}
    function create_if_block_14$2(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$6, 151, 1, 3336);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$6, 152, 1, 3378);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleninethSetup*/ ctx[25], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$2.name,
    		type: "if",
    		source: "(151:0) {#if eleventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (162:0) {#if firstSetup}
    function create_if_block_13$3(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("The tactics described by Freire are awfully similar to those used by powerforces today in the U.S. (and beyond), one example being Trump calling peaceful protesters thugs.");
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 162, 1, 3550);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$3.name,
    		type: "if",
    		source: "(162:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (168:0) {#if secondSetup}
    function create_if_block_12$3(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("The U.S. is built on oppression and dehumanisation. On stolen land with stolen labour. Colonialism and Slavery were made possible by a system that rationalised the expoitation of certain groups of people, who were deamed ‘inferior’, for the economic growth of a ‘superior’ (white) group of people on a scale that would not be possible or sustainable without it.");
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 168, 1, 3824);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$3.name,
    		type: "if",
    		source: "(168:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (174:0) {#if thirdSetup}
    function create_if_block_11$3(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("This system is still in place, as has been clearly and widely demonstrated in the last months. Dehumanization through cheap/free/involuntary labour and limited human rights is not bound to non-white people in faraway countries, but is also live and well within the U.S. ...");
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 174, 1, 4287);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$3.name,
    		type: "if",
    		source: "(174:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (180:0) {#if fourthSetup}
    function create_if_block_10$3(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("... ... ExxonMobile, BP, Shell, American Airlines, Boeing and KOCH industries, are only a few of the companies that use cheap prison labour. Many of the companies that fuel the climate crisis use dehumanization as an economic strategy, they depend on it.");
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 180, 1, 4663);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$3.name,
    		type: "if",
    		source: "(180:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (186:0) {#if eightthSetup}
    function create_if_block_9$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("The blues were created by the enslaved, it became a sort of coping mechanism. The blues created rock - motown - disco -  hip hop. This music inspired the rock and roll movement in Cambodia, highlife development in Ghana (ET Mensah), Tropicália in Brazil, Icelandic musicindustry, the Beatles.");
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 186, 1, 5021);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$4.name,
    		type: "if",
    		source: "(186:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (192:0) {#if ninethSetup}
    function create_if_block_8$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Black voices in America have been the voice of change (although overtly ignored). As Freire stated, change can only be organised by the oppressed, as the oppressors lack capacity to fully understand the problem (their attempts can often result in false generousity or objectification of the oppressed). From Octavia E. Butler to bell hooks, black women have preached environmentalism for decades.");
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 192, 1, 5416);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$4.name,
    		type: "if",
    		source: "(192:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (198:0) {#if tenthSetup}
    function create_if_block_7$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("bell hooks released the book ‘All About Love’ in 2000. In it she writes about the importance of understanding love, “Our confusion about what we mean when we use the word “love” is the source of our difficulty in loving. If our society had a commonly held understanding of the meaning of love, the act of loving would not be so mystifying.”");
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 198, 1, 5929);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$4.name,
    		type: "if",
    		source: "(198:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (204:0) {#if eleventhSetup}
    function create_if_block_6$4(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("She defines love as being the combination of six aspects:");
    			br = element("br");
    			t1 = text("care, commitment, knowledge, responsibility, respect and trust.");
    			add_location(br, file$6, 205, 69, 6498);
    			attr_dev(div, "class", "pagetext svelte-m8fj1m");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$6, 204, 1, 6369);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$4.name,
    		type: "if",
    		source: "(204:0) {#if eleventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (217:0) {#if graph}
    function create_if_block_5$4(ctx) {
    	let div1;
    	let div0;
    	let span;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			span.textContent = "365 days";
    			attr_dev(span, "class", "tempnumber left text svelte-m8fj1m");
    			set_style(span, "z-index", "99999999");
    			add_location(span, file$6, 219, 3, 6692);
    			attr_dev(div0, "class", "temperature infotext");
    			add_location(div0, file$6, 218, 2, 6654);
    			attr_dev(div1, "class", "tempMeterCountry svelte-m8fj1m");
    			add_location(div1, file$6, 217, 1, 6621);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(217:0) {#if graph}",
    		ctx
    	});

    	return block;
    }

    // (225:0) {#if fifthSetup}
    function create_if_block_4$4(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 16.335";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "12 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2020";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 353 900 353 1200 365 1200");
    			add_location(polygon, file$6, 226, 2, 6921);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$6, 225, 1, 6812);
    			attr_dev(span0, "class", "deathToll text svelte-m8fj1m");
    			add_location(span0, file$6, 230, 38, 7077);
    			attr_dev(div0, "class", "temperature firstMeter svelte-m8fj1m");
    			add_location(div0, file$6, 230, 2, 7041);
    			attr_dev(span1, "class", "tempnumber rightFirst text svelte-m8fj1m");
    			add_location(span1, file$6, 231, 36, 7179);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$6, 231, 2, 7145);
    			attr_dev(div2, "class", "tempMeterCountry svelte-m8fj1m");
    			add_location(div2, file$6, 229, 1, 7008);
    			attr_dev(div3, "class", "text years right line0 now svelte-m8fj1m");
    			add_location(div3, file$6, 234, 1, 7251);
    			attr_dev(div4, "class", "horizontalLine full right line0 svelte-m8fj1m");
    			add_location(div4, file$6, 235, 1, 7303);
    			attr_dev(div5, "class", "text years right line20 svelte-m8fj1m");
    			add_location(div5, file$6, 236, 1, 7356);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-m8fj1m");
    			add_location(div6, file$6, 237, 1, 7405);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(225:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (241:0) {#if sixthSetup}
    function create_if_block_3$4(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 37.300";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "25 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2060";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 340 600 340 900 353 900 353 1200 365 1200");
    			add_location(polygon, file$6, 242, 2, 7592);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$6, 241, 1, 7483);
    			attr_dev(span0, "class", "deathToll text svelte-m8fj1m");
    			add_location(span0, file$6, 246, 36, 7770);
    			attr_dev(div0, "class", "temperature midMeter svelte-m8fj1m");
    			add_location(div0, file$6, 246, 2, 7736);
    			attr_dev(span1, "class", "tempnumber rightMid text svelte-m8fj1m");
    			add_location(span1, file$6, 247, 36, 7872);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$6, 247, 2, 7838);
    			attr_dev(div2, "class", "tempMeterCountry svelte-m8fj1m");
    			add_location(div2, file$6, 245, 1, 7703);
    			attr_dev(div3, "class", "text years right line40 svelte-m8fj1m");
    			add_location(div3, file$6, 250, 1, 7942);
    			attr_dev(div4, "class", "horizontalLine full right line40 svelte-m8fj1m");
    			add_location(div4, file$6, 251, 1, 7991);
    			attr_dev(div5, "class", "text years right line20 svelte-m8fj1m");
    			add_location(div5, file$6, 252, 1, 8045);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-m8fj1m");
    			add_location(div6, file$6, 253, 1, 8094);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(241:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (257:0) {#if seventhSetup}
    function create_if_block_2$4(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t8;
    	let div6;
    	let t10;
    	let div7;
    	let t11;
    	let div8;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 101.882";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "60 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2080";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			t8 = space();
    			div6 = element("div");
    			div6.textContent = "2100";
    			t10 = space();
    			div7 = element("div");
    			t11 = space();
    			div8 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 365 300 365 0 305 0 305 300 340 600 340 900 353 900 353 1200 365 1200");
    			add_location(polygon, file$6, 258, 2, 8283);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$6, 257, 1, 8174);
    			attr_dev(span0, "class", "deathToll text svelte-m8fj1m");
    			add_location(span0, file$6, 262, 36, 8489);
    			attr_dev(div0, "class", "temperature endMeter svelte-m8fj1m");
    			add_location(div0, file$6, 262, 2, 8455);
    			attr_dev(span1, "class", "tempnumber rightEnd text svelte-m8fj1m");
    			add_location(span1, file$6, 263, 36, 8592);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$6, 263, 2, 8558);
    			attr_dev(div2, "class", "tempMeterCountry svelte-m8fj1m");
    			add_location(div2, file$6, 261, 1, 8422);
    			attr_dev(div3, "class", "text years right line60 svelte-m8fj1m");
    			add_location(div3, file$6, 266, 1, 8662);
    			attr_dev(div4, "class", "horizontalLine full right line60 svelte-m8fj1m");
    			add_location(div4, file$6, 267, 1, 8711);
    			attr_dev(div5, "class", "line right line60 svelte-m8fj1m");
    			add_location(div5, file$6, 268, 1, 8765);
    			attr_dev(div6, "class", "text years right line80 svelte-m8fj1m");
    			add_location(div6, file$6, 269, 1, 8804);
    			attr_dev(div7, "class", "horizontalLine full right line80 svelte-m8fj1m");
    			add_location(div7, file$6, 270, 1, 8853);
    			attr_dev(div8, "class", "line right line80 svelte-m8fj1m");
    			add_location(div8, file$6, 271, 1, 8907);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div8, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(257:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (284:3) {#if fifthSetup}
    function create_if_block_1$4(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "https://deadwhitemansclothes.org/intro");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-m8fj1m");
    			add_location(a, file$6, 283, 19, 9095);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(284:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (285:3) {#if sixthSetup}
    function create_if_block$4(ctx) {
    	let a1;
    	let t0;
    	let a0;

    	const block = {
    		c: function create() {
    			a1 = element("a");
    			t0 = text("[more ↗︎] ");
    			a0 = element("a");
    			a0.textContent = "[more ↗︎].";
    			attr_dev(a0, "href", "https://www.instagram.com/tv/B-Sltgypx7O/");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "class", "svelte-m8fj1m");
    			add_location(a0, file$6, 284, 109, 9301);
    			attr_dev(a1, "href", "https://www.instagram.com/p/B5VfzzlhmOv/");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "class", "svelte-m8fj1m");
    			add_location(a1, file$6, 284, 19, 9211);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a1, anchor);
    			append_dev(a1, t0);
    			append_dev(a1, a0);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(285:3) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let div0;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let t22;
    	let t23;
    	let t24;
    	let div2;
    	let div1;
    	let t25;
    	let t26;
    	let div3;
    	let t27;
    	let div5;
    	let div4;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_24$1(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_23$1(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[6] && create_if_block_22$1(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[7] && create_if_block_21$1(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[8] && create_if_block_20$1(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[9] && create_if_block_19$1(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[10] && create_if_block_18$1(ctx);
    	let if_block7 = /*eightthSetup*/ ctx[11] && create_if_block_17$2(ctx);
    	let if_block8 = /*ninethSetup*/ ctx[12] && create_if_block_16$2(ctx);
    	let if_block9 = /*tenthSetup*/ ctx[13] && create_if_block_15$2(ctx);
    	let if_block10 = /*eleventhSetup*/ ctx[14] && create_if_block_14$2(ctx);
    	let if_block11 = /*firstSetup*/ ctx[4] && create_if_block_13$3(ctx);
    	let if_block12 = /*secondSetup*/ ctx[5] && create_if_block_12$3(ctx);
    	let if_block13 = /*thirdSetup*/ ctx[6] && create_if_block_11$3(ctx);
    	let if_block14 = /*fourthSetup*/ ctx[7] && create_if_block_10$3(ctx);
    	let if_block15 = /*eightthSetup*/ ctx[11] && create_if_block_9$4(ctx);
    	let if_block16 = /*ninethSetup*/ ctx[12] && create_if_block_8$4(ctx);
    	let if_block17 = /*tenthSetup*/ ctx[13] && create_if_block_7$4(ctx);
    	let if_block18 = /*eleventhSetup*/ ctx[14] && create_if_block_6$4(ctx);
    	let if_block19 = /*graph*/ ctx[15] && create_if_block_5$4(ctx);
    	let if_block20 = /*fifthSetup*/ ctx[8] && create_if_block_4$4(ctx);
    	let if_block21 = /*sixthSetup*/ ctx[9] && create_if_block_3$4(ctx);
    	let if_block22 = /*seventhSetup*/ ctx[10] && create_if_block_2$4(ctx);
    	let if_block23 = /*fifthSetup*/ ctx[8] && create_if_block_1$4(ctx);
    	let if_block24 = /*sixthSetup*/ ctx[9] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			if (if_block7) if_block7.c();
    			t7 = space();
    			if (if_block8) if_block8.c();
    			t8 = space();
    			if (if_block9) if_block9.c();
    			t9 = space();
    			if (if_block10) if_block10.c();
    			t10 = space();
    			div0 = element("div");
    			t11 = text(/*pagetitleText*/ ctx[0]);
    			t12 = space();
    			if (if_block11) if_block11.c();
    			t13 = space();
    			if (if_block12) if_block12.c();
    			t14 = space();
    			if (if_block13) if_block13.c();
    			t15 = space();
    			if (if_block14) if_block14.c();
    			t16 = space();
    			if (if_block15) if_block15.c();
    			t17 = space();
    			if (if_block16) if_block16.c();
    			t18 = space();
    			if (if_block17) if_block17.c();
    			t19 = space();
    			if (if_block18) if_block18.c();
    			t20 = space();
    			if (if_block19) if_block19.c();
    			t21 = space();
    			if (if_block20) if_block20.c();
    			t22 = space();
    			if (if_block21) if_block21.c();
    			t23 = space();
    			if (if_block22) if_block22.c();
    			t24 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block23) if_block23.c();
    			t25 = space();
    			if (if_block24) if_block24.c();
    			t26 = space();
    			div3 = element("div");
    			t27 = space();
    			div5 = element("div");
    			div4 = element("div");
    			attr_dev(div0, "class", "pagetitle svelte-m8fj1m");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$6, 158, 0, 3448);
    			attr_dev(div1, "class", "bottomLineText text svelte-m8fj1m");
    			set_style(div1, "text-align", "right");
    			add_location(div1, file$6, 282, 2, 9015);
    			attr_dev(div2, "class", "text bottomLine svelte-m8fj1m");
    			add_location(div2, file$6, 281, 0, 8983);
    			attr_dev(div3, "class", "horizontalLine left svelte-m8fj1m");
    			set_style(div3, "width", "100%");
    			set_style(div3, "top", "calc(" + /*distanceBLines*/ ctx[16] + " * 8)");
    			set_style(div3, "border-top", "1px solid blue");
    			add_location(div3, file$6, 288, 0, 9423);
    			attr_dev(div4, "class", "progressline");
    			set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div4, file$6, 293, 1, 9589);
    			attr_dev(div5, "class", "activedotnew activedotFan");
    			add_location(div5, file$6, 292, 0, 9548);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t11);
    			insert_dev(target, t12, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if (if_block18) if_block18.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			if (if_block19) if_block19.m(target, anchor);
    			insert_dev(target, t21, anchor);
    			if (if_block20) if_block20.m(target, anchor);
    			insert_dev(target, t22, anchor);
    			if (if_block21) if_block21.m(target, anchor);
    			insert_dev(target, t23, anchor);
    			if (if_block22) if_block22.m(target, anchor);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			if (if_block23) if_block23.m(div1, null);
    			append_dev(div1, t25);
    			if (if_block24) if_block24.m(div1, null);
    			insert_dev(target, t26, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t27, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_24$1(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_23$1(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_22$1(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_21$1(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_20$1(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_19$1(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_18$1(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_17$2(ctx);
    					if_block7.c();
    					if_block7.m(t7.parentNode, t7);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*ninethSetup*/ ctx[12]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_16$2(ctx);
    					if_block8.c();
    					if_block8.m(t8.parentNode, t8);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*tenthSetup*/ ctx[13]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_15$2(ctx);
    					if_block9.c();
    					if_block9.m(t9.parentNode, t9);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*eleventhSetup*/ ctx[14]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_14$2(ctx);
    					if_block10.c();
    					if_block10.m(t10.parentNode, t10);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t11, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_13$3(ctx);
    					if_block11.c();
    					if_block11.m(t13.parentNode, t13);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block12) {
    					if_block12.p(ctx, dirty);
    				} else {
    					if_block12 = create_if_block_12$3(ctx);
    					if_block12.c();
    					if_block12.m(t14.parentNode, t14);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_11$3(ctx);
    					if_block13.c();
    					if_block13.m(t15.parentNode, t15);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_10$3(ctx);
    					if_block14.c();
    					if_block14.m(t16.parentNode, t16);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block15) {
    					if_block15.p(ctx, dirty);
    				} else {
    					if_block15 = create_if_block_9$4(ctx);
    					if_block15.c();
    					if_block15.m(t17.parentNode, t17);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (/*ninethSetup*/ ctx[12]) {
    				if (if_block16) {
    					if_block16.p(ctx, dirty);
    				} else {
    					if_block16 = create_if_block_8$4(ctx);
    					if_block16.c();
    					if_block16.m(t18.parentNode, t18);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*tenthSetup*/ ctx[13]) {
    				if (if_block17) {
    					if_block17.p(ctx, dirty);
    				} else {
    					if_block17 = create_if_block_7$4(ctx);
    					if_block17.c();
    					if_block17.m(t19.parentNode, t19);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (/*eleventhSetup*/ ctx[14]) {
    				if (if_block18) {
    					if_block18.p(ctx, dirty);
    				} else {
    					if_block18 = create_if_block_6$4(ctx);
    					if_block18.c();
    					if_block18.m(t20.parentNode, t20);
    				}
    			} else if (if_block18) {
    				if_block18.d(1);
    				if_block18 = null;
    			}

    			if (/*graph*/ ctx[15]) {
    				if (if_block19) ; else {
    					if_block19 = create_if_block_5$4(ctx);
    					if_block19.c();
    					if_block19.m(t21.parentNode, t21);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block20) ; else {
    					if_block20 = create_if_block_4$4(ctx);
    					if_block20.c();
    					if_block20.m(t22.parentNode, t22);
    				}
    			} else if (if_block20) {
    				if_block20.d(1);
    				if_block20 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block21) ; else {
    					if_block21 = create_if_block_3$4(ctx);
    					if_block21.c();
    					if_block21.m(t23.parentNode, t23);
    				}
    			} else if (if_block21) {
    				if_block21.d(1);
    				if_block21 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block22) ; else {
    					if_block22 = create_if_block_2$4(ctx);
    					if_block22.c();
    					if_block22.m(t24.parentNode, t24);
    				}
    			} else if (if_block22) {
    				if_block22.d(1);
    				if_block22 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block23) ; else {
    					if_block23 = create_if_block_1$4(ctx);
    					if_block23.c();
    					if_block23.m(div1, t25);
    				}
    			} else if (if_block23) {
    				if_block23.d(1);
    				if_block23 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block24) ; else {
    					if_block24 = create_if_block$4(ctx);
    					if_block24.c();
    					if_block24.m(div1, null);
    				}
    			} else if (if_block24) {
    				if_block24.d(1);
    				if_block24 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t12);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t16);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t19);
    			if (if_block18) if_block18.d(detaching);
    			if (detaching) detach_dev(t20);
    			if (if_block19) if_block19.d(detaching);
    			if (detaching) detach_dev(t21);
    			if (if_block20) if_block20.d(detaching);
    			if (detaching) detach_dev(t22);
    			if (if_block21) if_block21.d(detaching);
    			if (detaching) detach_dev(t23);
    			if (if_block22) if_block22.d(detaching);
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(div2);
    			if (if_block23) if_block23.d();
    			if (if_block24) if_block24.d();
    			if (detaching) detach_dev(t26);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t27);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let eightthSetup = false;
    	let ninethSetup = false;
    	let tenthSetup = false;
    	let eleventhSetup = false;
    	let graph = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, thirdSetup = true);
    		$$invalidate(7, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(6, thirdSetup = false);
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(15, graph = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = false);
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    		$$invalidate(15, graph = true);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, eightthSetup = false);
    		$$invalidate(15, graph = true);
    	};

    	const toggleeighthSetup = () => {
    		$$invalidate(7, fourthSetup = false);
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, eightthSetup = true);
    		$$invalidate(12, ninethSetup = false);
    		$$invalidate(15, graph = true);
    	};

    	const toggleninethSetup = () => {
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, eightthSetup = false);
    		$$invalidate(12, ninethSetup = true);
    		$$invalidate(13, tenthSetup = false);
    		$$invalidate(15, graph = true);
    	};

    	const toggletenthSetup = () => {
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(12, ninethSetup = false);
    		$$invalidate(13, tenthSetup = true);
    		$$invalidate(15, graph = true);
    	};

    	const toggleeleventhSetup = () => {
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(13, tenthSetup = false);
    		$$invalidate(14, eleventhSetup = true);
    		$$invalidate(15, graph = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<USA> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("USA", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		tenthSetup,
    		eleventhSetup,
    		graph,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup,
    		toggleeleventhSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(16, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(6, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(7, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(8, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(9, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(10, seventhSetup = $$props.seventhSetup);
    		if ("eightthSetup" in $$props) $$invalidate(11, eightthSetup = $$props.eightthSetup);
    		if ("ninethSetup" in $$props) $$invalidate(12, ninethSetup = $$props.ninethSetup);
    		if ("tenthSetup" in $$props) $$invalidate(13, tenthSetup = $$props.tenthSetup);
    		if ("eleventhSetup" in $$props) $$invalidate(14, eleventhSetup = $$props.eleventhSetup);
    		if ("graph" in $$props) $$invalidate(15, graph = $$props.graph);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		tenthSetup,
    		eleventhSetup,
    		graph,
    		distanceBLines,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup,
    		toggleeleventhSetup
    	];
    }

    class USA extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "USA",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<USA> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<USA> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<USA> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<USA> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<USA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<USA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<USA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<USA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<USA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<USA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<USA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<USA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/Brazil.svelte generated by Svelte v3.23.0 */

    const file$7 = "src/specifics/Brazil.svelte";

    // (71:0) {#if firstSetup}
    function create_if_block_24$2(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$7, 71, 1, 1309);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$7, 72, 1, 1370);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[14], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$2.name,
    		type: "if",
    		source: "(71:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (75:0) {#if secondSetup}
    function create_if_block_23$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$7, 75, 1, 1436);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$7, 76, 1, 1496);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[15], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$2.name,
    		type: "if",
    		source: "(75:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (79:0) {#if thirdSetup}
    function create_if_block_22$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$7, 79, 1, 1579);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$7, 80, 1, 1640);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[16], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$2.name,
    		type: "if",
    		source: "(79:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (83:0) {#if fourthSetup}
    function create_if_block_21$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$7, 83, 1, 1725);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$7, 84, 1, 1785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[17], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$2.name,
    		type: "if",
    		source: "(83:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (87:0) {#if fifthSetup}
    function create_if_block_20$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$7, 87, 1, 1868);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$7, 88, 1, 1928);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[18], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$2.name,
    		type: "if",
    		source: "(87:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (91:0) {#if sixthSetup}
    function create_if_block_19$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$7, 91, 1, 2012);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$7, 92, 1, 2074);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$2.name,
    		type: "if",
    		source: "(91:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (95:0) {#if seventhSetup}
    function create_if_block_18$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$7, 95, 1, 2159);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$7, 96, 1, 2220);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeighthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglesixthSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$2.name,
    		type: "if",
    		source: "(95:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (99:0) {#if eightthSetup}
    function create_if_block_17$3(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$7, 99, 1, 2305);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$7, 100, 1, 2347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleseventhSetup*/ ctx[19], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$3.name,
    		type: "if",
    		source: "(99:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (111:0) {#if firstSetup}
    function create_if_block_16$3(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;
    	let t4;
    	let iframe0;
    	let iframe0_src_value;
    	let t5;
    	let iframe1;
    	let iframe1_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("In 1968, Caetano Velose released an album called Tropicália. This album gave name to a new cultural movement or aesthetic in Brazilian music, art and ideology.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "1968";
    			t4 = space();
    			iframe0 = element("iframe");
    			t5 = space();
    			iframe1 = element("iframe");
    			attr_dev(div0, "class", "pagetext svelte-12zp6d9");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$7, 111, 1, 2521);
    			attr_dev(div1, "class", "horizontalLine left line52 svelte-12zp6d9");
    			add_location(div1, file$7, 115, 1, 2754);
    			attr_dev(div2, "class", "text years left line52 svelte-12zp6d9");
    			add_location(div2, file$7, 116, 1, 2802);
    			attr_dev(iframe0, "class", "video");
    			set_style(iframe0, "top", "calc(" + /*distanceBLines*/ ctx[12] + " * 0)");
    			set_style(iframe0, "right", "10vw");
    			if (iframe0.src !== (iframe0_src_value = "https://www.youtube.com/embed/1Z1qNsm-NUk?controls=0")) attr_dev(iframe0, "src", iframe0_src_value);
    			attr_dev(iframe0, "frameborder", "0");
    			attr_dev(iframe0, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
    			iframe0.allowFullscreen = true;
    			add_location(iframe0, file$7, 118, 1, 2851);
    			attr_dev(iframe1, "class", "video");
    			set_style(iframe1, "top", "calc(" + /*distanceBLines*/ ctx[12] + " * 1)");
    			set_style(iframe1, "left", "10vw");
    			if (iframe1.src !== (iframe1_src_value = "https://www.youtube.com/embed/mlm_SIw2YnI?controls=0")) attr_dev(iframe1, "src", iframe1_src_value);
    			attr_dev(iframe1, "frameborder", "0");
    			attr_dev(iframe1, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
    			iframe1.allowFullscreen = true;
    			add_location(iframe1, file$7, 120, 1, 3110);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, iframe0, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, iframe1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(iframe0);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(iframe1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$3.name,
    		type: "if",
    		source: "(111:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (127:0) {#if secondSetup}
    function create_if_block_15$3(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("At the time Brazil’s political climate was very binary. It was ruled by a far-right military dictatorship and had a large nationalstic left-wing opposition. \n\t\tTropicália, while also opposing the dictatorship, was opposed to the nationalistic ideology of the left. It fought for freedom of expression and sought influence from U.S. and British pop culture (which caused the nationalistic left to dislik them). “We thought there was no reason to fear the inevitable but not nesseccarily harmful influence of international mass culture.” – Caetano Veloso");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "1968";
    			attr_dev(div0, "class", "pagetext svelte-12zp6d9");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$7, 127, 1, 3431);
    			attr_dev(div1, "class", "horizontalLine left line52 svelte-12zp6d9");
    			add_location(div1, file$7, 132, 1, 4062);
    			attr_dev(div2, "class", "text years left line52 svelte-12zp6d9");
    			add_location(div2, file$7, 133, 1, 4110);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$3.name,
    		type: "if",
    		source: "(127:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (139:0) {#if thirdSetup}
    function create_if_block_14$3(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let t3;
    	let iframe;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			div2.textContent = "1940";
    			t3 = space();
    			iframe = element("iframe");
    			attr_dev(div0, "class", "pagetext svelte-12zp6d9");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$7, 139, 1, 4467);
    			attr_dev(div1, "class", "horizontalLine left line80 svelte-12zp6d9");
    			add_location(div1, file$7, 144, 1, 4690);
    			attr_dev(div2, "class", "text years left line80 svelte-12zp6d9");
    			add_location(div2, file$7, 145, 1, 4738);
    			attr_dev(iframe, "class", "video");
    			set_style(iframe, "top", "calc(" + /*distanceBLines*/ ctx[12] + " * 2)");
    			set_style(iframe, "left", "10vw");
    			set_style(iframe, "width", "80vw");
    			set_style(iframe, "height", "80vw");
    			if (iframe.src !== (iframe_src_value = "https://www.youtube.com/embed/e4WZVQAh_Hw")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
    			iframe.allowFullscreen = true;
    			add_location(iframe, file$7, 148, 1, 5052);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, iframe, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(iframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$3.name,
    		type: "if",
    		source: "(139:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (155:1) {:else}
    function create_else_block_1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line80 svelte-12zp6d9");
    			add_location(div, file$7, 155, 2, 5386);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(155:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (154:1) {#if secondSetup}
    function create_if_block_13$4(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$4.name,
    		type: "if",
    		source: "(154:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (152:0) {#if firstSetup}
    function create_if_block_12$4(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$4.name,
    		type: "if",
    		source: "(152:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (160:0) {#if fourthSetup}
    function create_if_block_11$4(ctx) {
    	let div0;
    	let t0;
    	let br;
    	let t1;
    	let t2;
    	let div1;
    	let t3;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("The same year as Tropicália was released, 1968, Paulo Freire released the book ‘Pedogogy of the Oppressed.");
    			br = element("br");
    			t1 = text("\n\t\tIn it he writes about the problem of dehumanisation,  which is perpetrated through injustice, exploitation, oppression and violence. He states that humankind’s central focus should be – contrary to dehumanisation – on humanization. He called the struggle of liberation an act of love, a radical love of recognising everybody’s humanity.");
    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "1968";
    			add_location(br, file$7, 161, 108, 5624);
    			attr_dev(div0, "class", "pagetext svelte-12zp6d9");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$7, 160, 1, 5456);
    			attr_dev(div1, "class", "horizontalLine left line52 svelte-12zp6d9");
    			add_location(div1, file$7, 165, 1, 5990);
    			attr_dev(div2, "class", "text years left line52 svelte-12zp6d9");
    			add_location(div2, file$7, 166, 1, 6038);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, br);
    			append_dev(div0, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$4.name,
    		type: "if",
    		source: "(160:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (170:0) {#if fifthSetup}
    function create_if_block_10$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("He establishes the difference between the opressor and the oppressed, and the way in which their status affects their thinking. That overall, oppressors will prioritize “their right to live in peace” (and will often view the oppressed’s response to oppression as violent), and that their idea of “peace” is a state in which they hold power by capitalising on the lives of others, a state that depends on the opression. He calls them “necrophilic” (life-killing).");
    			attr_dev(div, "class", "pagetext svelte-12zp6d9");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$7, 170, 1, 6110);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$4.name,
    		type: "if",
    		source: "(170:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (190:4) {:else}
    function create_else_block$1(ctx) {
    	let div1;
    	let div0;
    	let span;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			span.textContent = "365 days";
    			attr_dev(span, "class", "tempnumber left text svelte-12zp6d9");
    			set_style(span, "z-index", "99999999");
    			add_location(span, file$7, 192, 7, 6900);
    			attr_dev(div0, "class", "temperature infotext");
    			add_location(div0, file$7, 191, 6, 6858);
    			attr_dev(div1, "class", "tempMeterCountry svelte-12zp6d9");
    			add_location(div1, file$7, 190, 5, 6821);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(190:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (189:4) {#if fifthSetup}
    function create_if_block_9$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$5.name,
    		type: "if",
    		source: "(189:4) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (187:3) {#if fourthSetup}
    function create_if_block_8$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$5.name,
    		type: "if",
    		source: "(187:3) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (185:2) {#if thirdSetup}
    function create_if_block_7$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$5.name,
    		type: "if",
    		source: "(185:2) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (183:1) {#if secondSetup}
    function create_if_block_6$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$5.name,
    		type: "if",
    		source: "(183:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (181:0) {#if firstSetup}
    function create_if_block_5$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$5.name,
    		type: "if",
    		source: "(181:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (202:0) {#if sixthSetup}
    function create_if_block_4$5(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 10.474";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "12 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2020";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 353 900 353 1200 365 1200");
    			add_location(polygon, file$7, 203, 2, 7171);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$7, 202, 1, 7062);
    			attr_dev(span0, "class", "deathToll text narrow svelte-12zp6d9");
    			add_location(span0, file$7, 207, 38, 7327);
    			attr_dev(div0, "class", "temperature firstMeter svelte-12zp6d9");
    			add_location(div0, file$7, 207, 2, 7291);
    			attr_dev(span1, "class", "tempnumber rightFirst text svelte-12zp6d9");
    			add_location(span1, file$7, 208, 36, 7436);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$7, 208, 2, 7402);
    			attr_dev(div2, "class", "tempMeterCountry svelte-12zp6d9");
    			add_location(div2, file$7, 206, 1, 7258);
    			attr_dev(div3, "class", "text years right line0 now svelte-12zp6d9");
    			add_location(div3, file$7, 211, 1, 7508);
    			attr_dev(div4, "class", "horizontalLine full right line0 svelte-12zp6d9");
    			add_location(div4, file$7, 212, 1, 7560);
    			attr_dev(div5, "class", "text years right line20 svelte-12zp6d9");
    			add_location(div5, file$7, 213, 1, 7613);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-12zp6d9");
    			add_location(div6, file$7, 214, 1, 7662);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(202:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (218:0) {#if seventhSetup}
    function create_if_block_3$5(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 26.566";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "29 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2060";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 336 600 336 900 353 900 353 1200 365 1200");
    			add_location(polygon, file$7, 219, 2, 7851);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$7, 218, 1, 7742);
    			attr_dev(span0, "class", "deathToll text narrow svelte-12zp6d9");
    			add_location(span0, file$7, 223, 36, 8029);
    			attr_dev(div0, "class", "temperature midMeter svelte-12zp6d9");
    			add_location(div0, file$7, 223, 2, 7995);
    			attr_dev(span1, "class", "tempnumber rightMid text svelte-12zp6d9");
    			add_location(span1, file$7, 224, 36, 8138);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$7, 224, 2, 8104);
    			attr_dev(div2, "class", "tempMeterCountry svelte-12zp6d9");
    			add_location(div2, file$7, 222, 1, 7962);
    			attr_dev(div3, "class", "text years right line40 svelte-12zp6d9");
    			add_location(div3, file$7, 227, 1, 8208);
    			attr_dev(div4, "class", "horizontalLine full right line40 svelte-12zp6d9");
    			add_location(div4, file$7, 228, 1, 8257);
    			attr_dev(div5, "class", "text years right line20 svelte-12zp6d9");
    			add_location(div5, file$7, 229, 1, 8311);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-12zp6d9");
    			add_location(div6, file$7, 230, 1, 8360);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(218:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (234:0) {#if eightthSetup}
    function create_if_block_2$5(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t8;
    	let div6;
    	let t10;
    	let div7;
    	let t11;
    	let div8;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 66.227";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "86 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2080";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			t8 = space();
    			div6 = element("div");
    			div6.textContent = "2100";
    			t10 = space();
    			div7 = element("div");
    			t11 = space();
    			div8 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 365 300 365 0 279 0 279 300 336 600 336 900 353 900 353 1200 365 1200");
    			add_location(polygon, file$7, 235, 2, 8549);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$7, 234, 1, 8440);
    			attr_dev(span0, "class", "deathToll text narrow svelte-12zp6d9");
    			add_location(span0, file$7, 239, 36, 8755);
    			attr_dev(div0, "class", "temperature endMeter svelte-12zp6d9");
    			add_location(div0, file$7, 239, 2, 8721);
    			attr_dev(span1, "class", "tempnumber rightEnd text svelte-12zp6d9");
    			add_location(span1, file$7, 240, 36, 8864);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$7, 240, 2, 8830);
    			attr_dev(div2, "class", "tempMeterCountry svelte-12zp6d9");
    			add_location(div2, file$7, 238, 1, 8688);
    			attr_dev(div3, "class", "text years right line60 svelte-12zp6d9");
    			add_location(div3, file$7, 243, 1, 8934);
    			attr_dev(div4, "class", "horizontalLine full right line60 svelte-12zp6d9");
    			add_location(div4, file$7, 244, 1, 8983);
    			attr_dev(div5, "class", "line right line60 svelte-12zp6d9");
    			add_location(div5, file$7, 245, 1, 9037);
    			attr_dev(div6, "class", "text years right line80 svelte-12zp6d9");
    			add_location(div6, file$7, 246, 1, 9076);
    			attr_dev(div7, "class", "horizontalLine full right line80 svelte-12zp6d9");
    			add_location(div7, file$7, 247, 1, 9125);
    			attr_dev(div8, "class", "line right line80 svelte-12zp6d9");
    			add_location(div8, file$7, 248, 1, 9179);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div8, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(234:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (261:3) {#if secondSetup}
    function create_if_block_1$5(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "https://www.youtube.com/watch?v=DUPxYBNS750");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-12zp6d9");
    			add_location(a, file$7, 260, 20, 9368);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(261:3) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (262:3) {#if fifthSetup}
    function create_if_block$5(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "https://www.litcharts.com/lit/pedagogy-of-the-oppressed/chapter-1");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-12zp6d9");
    			add_location(a, file$7, 261, 19, 9489);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(262:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let div0;
    	let t8;
    	let t9;
    	let t10;
    	let div1;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let div3;
    	let div2;
    	let t21;
    	let t22;
    	let div4;
    	let t23;
    	let div6;
    	let div5;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_24$2(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_23$2(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[6] && create_if_block_22$2(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[7] && create_if_block_21$2(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[8] && create_if_block_20$2(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[9] && create_if_block_19$2(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[10] && create_if_block_18$2(ctx);
    	let if_block7 = /*eightthSetup*/ ctx[11] && create_if_block_17$3(ctx);
    	let if_block8 = /*firstSetup*/ ctx[4] && create_if_block_16$3(ctx);
    	let if_block9 = /*secondSetup*/ ctx[5] && create_if_block_15$3(ctx);
    	let if_block10 = /*thirdSetup*/ ctx[6] && create_if_block_14$3(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_12$4;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_13$4;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block11 = current_block_type(ctx);
    	let if_block12 = /*fourthSetup*/ ctx[7] && create_if_block_11$4(ctx);
    	let if_block13 = /*fifthSetup*/ ctx[8] && create_if_block_10$4(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_5$5;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_6$5;
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_7$5;
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_8$5;
    		if (/*fifthSetup*/ ctx[8]) return create_if_block_9$5;
    		return create_else_block$1;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block14 = current_block_type_1(ctx);
    	let if_block15 = /*sixthSetup*/ ctx[9] && create_if_block_4$5(ctx);
    	let if_block16 = /*seventhSetup*/ ctx[10] && create_if_block_3$5(ctx);
    	let if_block17 = /*eightthSetup*/ ctx[11] && create_if_block_2$5(ctx);
    	let if_block18 = /*secondSetup*/ ctx[5] && create_if_block_1$5(ctx);
    	let if_block19 = /*fifthSetup*/ ctx[8] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			if (if_block7) if_block7.c();
    			t7 = space();
    			div0 = element("div");
    			t8 = text(/*pagetitleText*/ ctx[0]);
    			t9 = space();
    			if (if_block8) if_block8.c();
    			t10 = space();
    			div1 = element("div");
    			t11 = space();
    			if (if_block9) if_block9.c();
    			t12 = space();
    			if (if_block10) if_block10.c();
    			t13 = space();
    			if_block11.c();
    			t14 = space();
    			if (if_block12) if_block12.c();
    			t15 = space();
    			if (if_block13) if_block13.c();
    			t16 = space();
    			if_block14.c();
    			t17 = space();
    			if (if_block15) if_block15.c();
    			t18 = space();
    			if (if_block16) if_block16.c();
    			t19 = space();
    			if (if_block17) if_block17.c();
    			t20 = space();
    			div3 = element("div");
    			div2 = element("div");
    			if (if_block18) if_block18.c();
    			t21 = space();
    			if (if_block19) if_block19.c();
    			t22 = space();
    			div4 = element("div");
    			t23 = space();
    			div6 = element("div");
    			div5 = element("div");
    			attr_dev(div0, "class", "pagetitle svelte-12zp6d9");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$7, 107, 0, 2419);
    			attr_dev(div1, "class", "line left line52 svelte-12zp6d9");
    			add_location(div1, file$7, 123, 0, 3373);
    			attr_dev(div2, "class", "bottomLineText text svelte-12zp6d9");
    			set_style(div2, "text-align", "right");
    			add_location(div2, file$7, 259, 2, 9287);
    			attr_dev(div3, "class", "text bottomLine svelte-12zp6d9");
    			add_location(div3, file$7, 258, 0, 9255);
    			attr_dev(div4, "class", "horizontalLine left svelte-12zp6d9");
    			set_style(div4, "width", "100%");
    			set_style(div4, "top", "calc((" + /*distanceBLines*/ ctx[12] + " * 8) - 1px)");
    			set_style(div4, "border-top", "1px solid blue");
    			add_location(div4, file$7, 266, 0, 9631);
    			attr_dev(div5, "class", "progressline");
    			set_style(div5, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div5, file$7, 270, 1, 9804);
    			attr_dev(div6, "class", "activedotnew activedotFan");
    			add_location(div6, file$7, 269, 0, 9763);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t8);
    			insert_dev(target, t9, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if_block11.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if_block14.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			if (if_block18) if_block18.m(div2, null);
    			append_dev(div2, t21);
    			if (if_block19) if_block19.m(div2, null);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div5);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_24$2(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_23$2(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_22$2(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_21$2(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_20$2(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_19$2(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_18$2(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_17$3(ctx);
    					if_block7.c();
    					if_block7.m(t7.parentNode, t7);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t8, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_16$3(ctx);
    					if_block8.c();
    					if_block8.m(t10.parentNode, t10);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_15$3(ctx);
    					if_block9.c();
    					if_block9.m(t12.parentNode, t12);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_14$3(ctx);
    					if_block10.c();
    					if_block10.m(t13.parentNode, t13);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block11.d(1);
    				if_block11 = current_block_type(ctx);

    				if (if_block11) {
    					if_block11.c();
    					if_block11.m(t14.parentNode, t14);
    				}
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block12) {
    					if_block12.p(ctx, dirty);
    				} else {
    					if_block12 = create_if_block_11$4(ctx);
    					if_block12.c();
    					if_block12.m(t15.parentNode, t15);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_10$4(ctx);
    					if_block13.c();
    					if_block13.m(t16.parentNode, t16);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
    				if_block14.d(1);
    				if_block14 = current_block_type_1(ctx);

    				if (if_block14) {
    					if_block14.c();
    					if_block14.m(t17.parentNode, t17);
    				}
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block15) ; else {
    					if_block15 = create_if_block_4$5(ctx);
    					if_block15.c();
    					if_block15.m(t18.parentNode, t18);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block16) ; else {
    					if_block16 = create_if_block_3$5(ctx);
    					if_block16.c();
    					if_block16.m(t19.parentNode, t19);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block17) ; else {
    					if_block17 = create_if_block_2$5(ctx);
    					if_block17.c();
    					if_block17.m(t20.parentNode, t20);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block18) ; else {
    					if_block18 = create_if_block_1$5(ctx);
    					if_block18.c();
    					if_block18.m(div2, t21);
    				}
    			} else if (if_block18) {
    				if_block18.d(1);
    				if_block18 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block19) ; else {
    					if_block19 = create_if_block$5(ctx);
    					if_block19.c();
    					if_block19.m(div2, null);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div5, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t9);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t11);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t13);
    			if_block11.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t16);
    			if_block14.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t19);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(div3);
    			if (if_block18) if_block18.d();
    			if (if_block19) if_block19.d();
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let eightthSetup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, thirdSetup = true);
    		$$invalidate(7, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(6, thirdSetup = false);
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(7, fourthSetup = false);
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(9, sixthSetup = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, eightthSetup = false);
    	};

    	const toggleeighthSetup = () => {
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    		$$invalidate(11, eightthSetup = true);
    		ninethSetup = false;
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Brazil> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Brazil", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(12, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(6, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(7, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(8, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(9, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(10, seventhSetup = $$props.seventhSetup);
    		if ("eightthSetup" in $$props) $$invalidate(11, eightthSetup = $$props.eightthSetup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		distanceBLines,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup
    	];
    }

    class Brazil extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Brazil",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<Brazil> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<Brazil> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<Brazil> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<Brazil> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<Brazil>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<Brazil>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Brazil>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Brazil>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<Brazil>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<Brazil>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<Brazil>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<Brazil>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/Iceland.svelte generated by Svelte v3.23.0 */

    const file$8 = "src/specifics/Iceland.svelte";

    // (94:0) {#if firstSetup}
    function create_if_block_36(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$8, 94, 1, 1805);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$8, 95, 1, 1866);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[17], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_36.name,
    		type: "if",
    		source: "(94:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (98:0) {#if secondSetup}
    function create_if_block_35(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 98, 1, 1932);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 99, 1, 1992);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[18], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_35.name,
    		type: "if",
    		source: "(98:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (102:0) {#if thirdSetup}
    function create_if_block_34(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 102, 1, 2075);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 103, 1, 2136);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_34.name,
    		type: "if",
    		source: "(102:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (106:0) {#if fourthSetup}
    function create_if_block_33(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 106, 1, 2221);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 107, 1, 2281);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_33.name,
    		type: "if",
    		source: "(106:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (110:0) {#if fifthSetup}
    function create_if_block_32(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 110, 1, 2364);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 111, 1, 2424);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_32.name,
    		type: "if",
    		source: "(110:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (114:0) {#if sixthSetup}
    function create_if_block_31(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 114, 1, 2508);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 115, 1, 2570);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_31.name,
    		type: "if",
    		source: "(114:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (118:0) {#if seventhSetup}
    function create_if_block_30(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 118, 1, 2655);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 119, 1, 2716);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeighthSetup*/ ctx[23], false, false, false),
    					listen_dev(div1, "click", /*togglesixthSetup*/ ctx[21], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_30.name,
    		type: "if",
    		source: "(118:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (122:0) {#if eightthSetup}
    function create_if_block_29(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 122, 1, 2801);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 123, 1, 2862);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleninethSetup*/ ctx[24], false, false, false),
    					listen_dev(div1, "click", /*toggleseventhSetup*/ ctx[22], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_29.name,
    		type: "if",
    		source: "(122:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (126:0) {#if ninethSetup}
    function create_if_block_28(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$8, 126, 1, 2948);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$8, 127, 1, 3008);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggletenthSetup*/ ctx[25], false, false, false),
    					listen_dev(div1, "click", /*toggleeighthSetup*/ ctx[23], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_28.name,
    		type: "if",
    		source: "(126:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (130:0) {#if tenthSetup}
    function create_if_block_27$1(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$8, 130, 1, 3092);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$8, 131, 1, 3134);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleninethSetup*/ ctx[24], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27$1.name,
    		type: "if",
    		source: "(130:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (145:0) {#if firstSetup}
    function create_if_block_26$1(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t4;
    	let div3;
    	let t6;
    	let div4;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Iceland is a high consumer of fast fashion, since 2010 the Icelandic Red Cross recieves tonnes of used clothing annually, most of which is exported either for recycling in Eurpe or to devoloping countries.");
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "2010";
    			t3 = space();
    			div2 = element("div");
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2020";
    			t6 = space();
    			div4 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-75d38");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$8, 145, 1, 3326);
    			attr_dev(div1, "class", "text years left line10 svelte-75d38");
    			add_location(div1, file$8, 148, 1, 3604);
    			attr_dev(div2, "class", "horizontalLine full left line10 svelte-75d38");
    			add_location(div2, file$8, 149, 1, 3652);
    			attr_dev(div3, "class", "text years left line0 now svelte-75d38");
    			add_location(div3, file$8, 150, 1, 3705);
    			attr_dev(div4, "class", "horizontalLine full left line0 svelte-75d38");
    			add_location(div4, file$8, 151, 1, 3756);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26$1.name,
    		type: "if",
    		source: "(145:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (158:0) {#if secondSetup}
    function create_if_block_25$1(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Icelanders were a former colony of Denmark, and gained full Independance in 1944.");
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "1944";
    			t3 = space();
    			div2 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-75d38");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$8, 158, 1, 3943);
    			attr_dev(div1, "class", "text years left line76 svelte-75d38");
    			add_location(div1, file$8, 162, 1, 4098);
    			attr_dev(div2, "class", "horizontalLine full left line76 svelte-75d38");
    			add_location(div2, file$8, 163, 1, 4146);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25$1.name,
    		type: "if",
    		source: "(158:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (167:16) {:else}
    function create_else_block_9(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line76 svelte-75d38");
    			add_location(div, file$8, 167, 1, 4230);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_9.name,
    		type: "else",
    		source: "(167:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (167:0) {#if firstSetup}
    function create_if_block_24$3(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$3.name,
    		type: "if",
    		source: "(167:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (171:0) {#if thirdSetup}
    function create_if_block_23$3(ctx) {
    	let div0;
    	let t0;
    	let br;
    	let t1;
    	let t2;
    	let div1;
    	let t4;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Four years earlier, a few months into World War II, Iceland was occupied by the British military. Most of the soldiers resided in the capital, causing young male soldiers to become around 1/3 of the population.");
    			br = element("br");
    			t1 = text("\n\t\tThis caused what was called Ástandið (The Situation), in which single women started hanging out with soldiers to much dismay of the wider public and the government. ...");
    			t2 = space();
    			div1 = element("div");
    			div1.textContent = "1940";
    			t4 = space();
    			div2 = element("div");
    			add_location(br, file$8, 172, 212, 4564);
    			attr_dev(div0, "class", "pagetext svelte-75d38");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$8, 171, 1, 4292);
    			attr_dev(div1, "class", "text years left line80 svelte-75d38");
    			add_location(div1, file$8, 176, 1, 4751);
    			attr_dev(div2, "class", "horizontalLine full left line80 svelte-75d38");
    			add_location(div2, file$8, 177, 1, 4799);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, br);
    			append_dev(div0, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$3.name,
    		type: "if",
    		source: "(171:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (181:16) {:else}
    function create_else_block_7(ctx) {
    	let if_block_anchor;

    	function select_block_type_2(ctx, dirty) {
    		if (/*secondSetup*/ ctx[5]) return create_if_block_22$3;
    		return create_else_block_8;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_7.name,
    		type: "else",
    		source: "(181:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (181:0) {#if firstSetup}
    function create_if_block_21$3(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$3.name,
    		type: "if",
    		source: "(181:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (182:18) {:else}
    function create_else_block_8(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line80 svelte-75d38");
    			add_location(div, file$8, 182, 2, 4910);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_8.name,
    		type: "else",
    		source: "(182:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (182:1) {#if secondSetup}
    function create_if_block_22$3(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$3.name,
    		type: "if",
    		source: "(182:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (187:0) {#if fourthSetup}
    function create_if_block_20$3(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t4;
    	let div3;
    	let t6;
    	let div4;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("... Their main concern was that Icelandic women would birth mixed children which would “pollute” the Icelandic race. Women who were in the “situation” were spyed on by a police-team which documented their conduct in what was the largest spying opperation ever conducted in Iceland. For a short period, laws were even changed to shift the age of “independance” from 16 to 20.");
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "1940";
    			t3 = space();
    			div2 = element("div");
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "1945";
    			t6 = space();
    			div4 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-75d38");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$8, 187, 1, 4980);
    			attr_dev(div1, "class", "text years left line80 svelte-75d38");
    			add_location(div1, file$8, 191, 1, 5428);
    			attr_dev(div2, "class", "horizontalLine full left line80 svelte-75d38");
    			add_location(div2, file$8, 192, 1, 5476);
    			attr_dev(div3, "class", "text years left line75 svelte-75d38");
    			add_location(div3, file$8, 194, 1, 5530);
    			attr_dev(div4, "class", "horizontalLine full left line75 svelte-75d38");
    			add_location(div4, file$8, 195, 1, 5578);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$3.name,
    		type: "if",
    		source: "(187:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (199:16) {:else}
    function create_else_block_4(ctx) {
    	let if_block_anchor;

    	function select_block_type_4(ctx, dirty) {
    		if (/*secondSetup*/ ctx[5]) return create_if_block_18$3;
    		return create_else_block_5;
    	}

    	let current_block_type = select_block_type_4(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_4(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(199:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (199:0) {#if firstSetup}
    function create_if_block_17$4(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$4.name,
    		type: "if",
    		source: "(199:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (200:18) {:else}
    function create_else_block_5(ctx) {
    	let if_block_anchor;

    	function select_block_type_5(ctx, dirty) {
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_19$3;
    		return create_else_block_6;
    	}

    	let current_block_type = select_block_type_5(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_5(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_5.name,
    		type: "else",
    		source: "(200:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (200:1) {#if secondSetup}
    function create_if_block_18$3(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$3.name,
    		type: "if",
    		source: "(200:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (201:18) {:else}
    function create_else_block_6(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line75 svelte-75d38");
    			add_location(div, file$8, 201, 3, 5716);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_6.name,
    		type: "else",
    		source: "(201:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (201:2) {#if thirdSetup}
    function create_if_block_19$3(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$3.name,
    		type: "if",
    		source: "(201:2) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (207:0) {#if fifthSetup}
    function create_if_block_16$4(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t4;
    	let div3;
    	let t6;
    	let div4;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("In 1941, when the U.S. army replaced the British, the Icelandic government requested specifically that black soldiers would not be sent to Iceland. An oral agreement of that matter was kept until 1963, when a chosen few, “three or four” black family-men where allowed over.");
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "1941";
    			t3 = space();
    			div2 = element("div");
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "1963";
    			t6 = space();
    			div4 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-75d38");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$8, 207, 1, 5793);
    			attr_dev(div1, "class", "text years left line79 svelte-75d38");
    			add_location(div1, file$8, 211, 1, 6140);
    			attr_dev(div2, "class", "horizontalLine full left line79 svelte-75d38");
    			add_location(div2, file$8, 212, 1, 6188);
    			attr_dev(div3, "class", "text years left line57 svelte-75d38");
    			add_location(div3, file$8, 214, 1, 6242);
    			attr_dev(div4, "class", "horizontalLine full left line57 svelte-75d38");
    			add_location(div4, file$8, 215, 1, 6290);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$4.name,
    		type: "if",
    		source: "(207:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (219:16) {:else}
    function create_else_block$2(ctx) {
    	let if_block_anchor;

    	function select_block_type_7(ctx, dirty) {
    		if (/*secondSetup*/ ctx[5]) return create_if_block_13$5;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type_7(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_7(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(219:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (219:0) {#if firstSetup}
    function create_if_block_12$5(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$5.name,
    		type: "if",
    		source: "(219:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (220:18) {:else}
    function create_else_block_1$1(ctx) {
    	let if_block_anchor;

    	function select_block_type_8(ctx, dirty) {
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_14$4;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type_8(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_8(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(220:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (220:1) {#if secondSetup}
    function create_if_block_13$5(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$5.name,
    		type: "if",
    		source: "(220:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (221:18) {:else}
    function create_else_block_2(ctx) {
    	let if_block_anchor;

    	function select_block_type_9(ctx, dirty) {
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_15$4;
    		return create_else_block_3;
    	}

    	let current_block_type = select_block_type_9(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_9(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(221:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (221:2) {#if thirdSetup}
    function create_if_block_14$4(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$4.name,
    		type: "if",
    		source: "(221:2) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (222:20) {:else}
    function create_else_block_3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line57 svelte-75d38");
    			add_location(div, file$8, 222, 4, 6457);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(222:20) {:else}",
    		ctx
    	});

    	return block;
    }

    // (222:3) {#if fourthSetup}
    function create_if_block_15$4(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$4.name,
    		type: "if",
    		source: "(222:3) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (229:0) {#if tonlistarTexti}
    function create_if_block_11$5(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("During this period “ballmenning” became more prominent with a subsequent boost to the music industry, which grew from this point with foreign influence. [I'm sorry for the emptyness, I am still missing some cultural content.]");
    			attr_dev(div, "class", "pagetext svelte-75d38");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$8, 229, 1, 6547);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$5.name,
    		type: "if",
    		source: "(229:0) {#if tonlistarTexti}",
    		ctx
    	});

    	return block;
    }

    // (235:0) {#if sixthSetup}
    function create_if_block_10$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$5.name,
    		type: "if",
    		source: "(235:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (241:0) {#if seventhSetup}
    function create_if_block_9$6(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$6.name,
    		type: "if",
    		source: "(241:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (245:0) {#if eightthSetup}
    function create_if_block_8$6(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$6.name,
    		type: "if",
    		source: "(245:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (249:0) {#if ninethSetup}
    function create_if_block_7$6(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Although it is branded as a green/clean country, Iceland is one of the largest polluters /CO2 emitters per capita. Despite a 99% renewable energy supply, it’s Consumption-Based Carbon Footprint is similar to or higher than most EU nations. A majority of Icelandic household CBCF is linked to imported goods, meaning the CO2 burden of Icelandic consumption falls to a large extent on developing nations.");
    			attr_dev(div, "class", "pagetext svelte-75d38");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$8, 249, 1, 7388);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$6.name,
    		type: "if",
    		source: "(249:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (255:0) {#if tenthSetup}
    function create_if_block_6$6(ctx) {
    	let div1;
    	let div0;
    	let span0;
    	let t1;
    	let div4;
    	let div2;
    	let span1;
    	let t3;
    	let div3;
    	let span2;
    	let t5;
    	let div5;
    	let t7;
    	let div6;
    	let t8;
    	let div7;
    	let t10;
    	let div8;
    	let t11;
    	let div9;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "365 days";
    			t1 = space();
    			div4 = element("div");
    			div2 = element("div");
    			span1 = element("span");
    			span1.textContent = "✝︎ 0";
    			t3 = space();
    			div3 = element("div");
    			span2 = element("span");
    			span2.textContent = "0 days";
    			t5 = space();
    			div5 = element("div");
    			div5.textContent = "2020";
    			t7 = space();
    			div6 = element("div");
    			t8 = space();
    			div7 = element("div");
    			div7.textContent = "2100";
    			t10 = space();
    			div8 = element("div");
    			t11 = space();
    			div9 = element("div");
    			attr_dev(span0, "class", "tempnumber left text svelte-75d38");
    			set_style(span0, "z-index", "99999999");
    			add_location(span0, file$8, 256, 36, 7953);
    			attr_dev(div0, "class", "temperature infotext");
    			add_location(div0, file$8, 256, 2, 7919);
    			attr_dev(div1, "class", "tempMeterCountry svelte-75d38");
    			add_location(div1, file$8, 255, 1, 7886);
    			attr_dev(span1, "class", "deathToll text narrow svelte-75d38");
    			add_location(span1, file$8, 259, 36, 8113);
    			attr_dev(div2, "class", "temperature midMeter svelte-75d38");
    			add_location(div2, file$8, 259, 2, 8079);
    			attr_dev(span2, "class", "tempnumber rightFirst text svelte-75d38");
    			add_location(span2, file$8, 260, 36, 8217);
    			attr_dev(div3, "class", "temperature infotext");
    			add_location(div3, file$8, 260, 2, 8183);
    			attr_dev(div4, "class", "tempMeterCountry svelte-75d38");
    			add_location(div4, file$8, 258, 1, 8046);
    			attr_dev(div5, "class", "text years right line0 now svelte-75d38");
    			add_location(div5, file$8, 263, 1, 8288);
    			attr_dev(div6, "class", "horizontalLine full right line0 svelte-75d38");
    			add_location(div6, file$8, 264, 1, 8340);
    			attr_dev(div7, "class", "text years right line80 svelte-75d38");
    			add_location(div7, file$8, 266, 1, 8394);
    			attr_dev(div8, "class", "horizontalLine full right line80 svelte-75d38");
    			add_location(div8, file$8, 267, 1, 8443);
    			attr_dev(div9, "class", "line right line80 svelte-75d38");
    			add_location(div9, file$8, 268, 1, 8497);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, span1);
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, span2);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div9, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div9);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$6.name,
    		type: "if",
    		source: "(255:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (282:3) {#if firstSetup}
    function create_if_block_5$6(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "https://skemman.is/bitstream/1946/28057/1/%C3%81hrif%20neysluhyggju%20%C3%A1%20t%C3%ADsku%20og%20fatai%C3%B0na%C3%B0%20.pdf");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-75d38");
    			add_location(a, file$8, 281, 19, 8686);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$6.name,
    		type: "if",
    		source: "(282:3) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (284:3) {#if thirdSetup}
    function create_if_block_4$6(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "https://skemman.is/bitstream/1946/15010/1/MA_snidmat-Alma.pdf");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-75d38");
    			add_location(a, file$8, 283, 19, 8888);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$6.name,
    		type: "if",
    		source: "(284:3) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (286:3) {#if fourthSetup}
    function create_if_block_3$6(ctx) {
    	let a0;
    	let t1;
    	let a1;

    	const block = {
    		c: function create() {
    			a0 = element("a");
    			a0.textContent = "[more ↗︎]";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "[more ↗︎]";
    			attr_dev(a0, "href", "https://www.ruv.is/thaettir/astandsborn");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "class", "svelte-75d38");
    			add_location(a0, file$8, 285, 20, 9029);
    			attr_dev(a1, "href", "https://www.ruv.is/frett/stridsarin-a-islandi-fyrsti-thattur");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "class", "svelte-75d38");
    			add_location(a1, file$8, 285, 113, 9122);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(286:3) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (288:3) {#if fifthSetup}
    function create_if_block_2$6(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "https://timarit.is/page/3428779#page/n17/mode/2up");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-75d38");
    			add_location(a, file$8, 287, 19, 9261);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(288:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (290:3) {#if ninethSetup}
    function create_if_block_1$6(ctx) {
    	let a0;
    	let t1;
    	let a1;

    	const block = {
    		c: function create() {
    			a0 = element("a");
    			a0.textContent = "[more ↗︎]";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "[more ↗︎]";
    			attr_dev(a0, "href", "https://www.sciencedirect.com/science/article/pii/S0959652617318267");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "class", "svelte-75d38");
    			add_location(a0, file$8, 289, 20, 9390);
    			attr_dev(a1, "href", "https://ourworldindata.org/co2-and-other-greenhouse-gas-emissions");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "class", "svelte-75d38");
    			add_location(a1, file$8, 289, 141, 9511);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(290:3) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (291:3) {#if tenthSetup}
    function create_if_block$6(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "http://www.impactlab.org/map/#usmeas=absolute&usyear=1981-2010&gmeas=absolute&gyear=2080-2099&tab=global&grcp=rcp85&gprob=0.5&gvar=tasmax-over-95F");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-75d38");
    			add_location(a, file$8, 290, 19, 9654);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(291:3) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let div0;
    	let t10;
    	let t11;
    	let t12;
    	let div1;
    	let t13;
    	let div2;
    	let t14;
    	let div3;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let t22;
    	let t23;
    	let t24;
    	let t25;
    	let t26;
    	let t27;
    	let t28;
    	let t29;
    	let div5;
    	let div4;
    	let t30;
    	let t31;
    	let t32;
    	let t33;
    	let t34;
    	let t35;
    	let div6;
    	let t36;
    	let div8;
    	let div7;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_36(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_35(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[6] && create_if_block_34(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[7] && create_if_block_33(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[8] && create_if_block_32(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[9] && create_if_block_31(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[10] && create_if_block_30(ctx);
    	let if_block7 = /*eightthSetup*/ ctx[11] && create_if_block_29(ctx);
    	let if_block8 = /*ninethSetup*/ ctx[12] && create_if_block_28(ctx);
    	let if_block9 = /*tenthSetup*/ ctx[13] && create_if_block_27$1(ctx);
    	let if_block10 = /*firstSetup*/ ctx[4] && create_if_block_26$1(ctx);
    	let if_block11 = /*secondSetup*/ ctx[5] && create_if_block_25$1(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_24$3;
    		return create_else_block_9;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block12 = current_block_type(ctx);
    	let if_block13 = /*thirdSetup*/ ctx[6] && create_if_block_23$3(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_21$3;
    		return create_else_block_7;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block14 = current_block_type_1(ctx);
    	let if_block15 = /*fourthSetup*/ ctx[7] && create_if_block_20$3(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_17$4;
    		return create_else_block_4;
    	}

    	let current_block_type_2 = select_block_type_3(ctx);
    	let if_block16 = current_block_type_2(ctx);
    	let if_block17 = /*fifthSetup*/ ctx[8] && create_if_block_16$4(ctx);

    	function select_block_type_6(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_12$5;
    		return create_else_block$2;
    	}

    	let current_block_type_3 = select_block_type_6(ctx);
    	let if_block18 = current_block_type_3(ctx);
    	let if_block19 = /*tonlistarTexti*/ ctx[14] && create_if_block_11$5(ctx);
    	let if_block20 = /*sixthSetup*/ ctx[9] && create_if_block_10$5(ctx);
    	let if_block21 = /*seventhSetup*/ ctx[10] && create_if_block_9$6(ctx);
    	let if_block22 = /*eightthSetup*/ ctx[11] && create_if_block_8$6(ctx);
    	let if_block23 = /*ninethSetup*/ ctx[12] && create_if_block_7$6(ctx);
    	let if_block24 = /*tenthSetup*/ ctx[13] && create_if_block_6$6(ctx);
    	let if_block25 = /*firstSetup*/ ctx[4] && create_if_block_5$6(ctx);
    	let if_block26 = /*thirdSetup*/ ctx[6] && create_if_block_4$6(ctx);
    	let if_block27 = /*fourthSetup*/ ctx[7] && create_if_block_3$6(ctx);
    	let if_block28 = /*fifthSetup*/ ctx[8] && create_if_block_2$6(ctx);
    	let if_block29 = /*ninethSetup*/ ctx[12] && create_if_block_1$6(ctx);
    	let if_block30 = /*tenthSetup*/ ctx[13] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			if (if_block7) if_block7.c();
    			t7 = space();
    			if (if_block8) if_block8.c();
    			t8 = space();
    			if (if_block9) if_block9.c();
    			t9 = space();
    			div0 = element("div");
    			t10 = text(/*pagetitleText*/ ctx[0]);
    			t11 = space();
    			if (if_block10) if_block10.c();
    			t12 = space();
    			div1 = element("div");
    			t13 = space();
    			div2 = element("div");
    			t14 = space();
    			div3 = element("div");
    			t15 = space();
    			if (if_block11) if_block11.c();
    			t16 = space();
    			if_block12.c();
    			t17 = space();
    			if (if_block13) if_block13.c();
    			t18 = space();
    			if_block14.c();
    			t19 = space();
    			if (if_block15) if_block15.c();
    			t20 = space();
    			if_block16.c();
    			t21 = space();
    			if (if_block17) if_block17.c();
    			t22 = space();
    			if_block18.c();
    			t23 = space();
    			if (if_block19) if_block19.c();
    			t24 = space();
    			if (if_block20) if_block20.c();
    			t25 = space();
    			if (if_block21) if_block21.c();
    			t26 = space();
    			if (if_block22) if_block22.c();
    			t27 = space();
    			if (if_block23) if_block23.c();
    			t28 = space();
    			if (if_block24) if_block24.c();
    			t29 = space();
    			div5 = element("div");
    			div4 = element("div");
    			if (if_block25) if_block25.c();
    			t30 = space();
    			if (if_block26) if_block26.c();
    			t31 = space();
    			if (if_block27) if_block27.c();
    			t32 = space();
    			if (if_block28) if_block28.c();
    			t33 = space();
    			if (if_block29) if_block29.c();
    			t34 = space();
    			if (if_block30) if_block30.c();
    			t35 = space();
    			div6 = element("div");
    			t36 = space();
    			div8 = element("div");
    			div7 = element("div");
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$8, 141, 0, 3224);
    			attr_dev(div1, "class", "line left line10 svelte-75d38");
    			add_location(div1, file$8, 153, 0, 3813);
    			attr_dev(div2, "class", "line left line0 svelte-75d38");
    			add_location(div2, file$8, 154, 0, 3850);
    			attr_dev(div3, "class", "line right line0 svelte-75d38");
    			add_location(div3, file$8, 155, 0, 3886);
    			attr_dev(div4, "class", "bottomLineText text svelte-75d38");
    			set_style(div4, "text-align", "right");
    			add_location(div4, file$8, 280, 2, 8606);
    			attr_dev(div5, "class", "text bottomLine svelte-75d38");
    			add_location(div5, file$8, 279, 0, 8574);
    			attr_dev(div6, "class", "horizontalLine left svelte-75d38");
    			set_style(div6, "width", "100%");
    			set_style(div6, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 8)");
    			set_style(div6, "border-top", "1px solid blue");
    			add_location(div6, file$8, 295, 0, 9877);
    			attr_dev(div7, "class", "progressline");
    			set_style(div7, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div7, file$8, 299, 1, 10042);
    			attr_dev(div8, "class", "activedotnew activedotFan");
    			add_location(div8, file$8, 298, 0, 10001);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t10);
    			insert_dev(target, t11, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if_block12.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if_block14.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			if_block16.m(target, anchor);
    			insert_dev(target, t21, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t22, anchor);
    			if_block18.m(target, anchor);
    			insert_dev(target, t23, anchor);
    			if (if_block19) if_block19.m(target, anchor);
    			insert_dev(target, t24, anchor);
    			if (if_block20) if_block20.m(target, anchor);
    			insert_dev(target, t25, anchor);
    			if (if_block21) if_block21.m(target, anchor);
    			insert_dev(target, t26, anchor);
    			if (if_block22) if_block22.m(target, anchor);
    			insert_dev(target, t27, anchor);
    			if (if_block23) if_block23.m(target, anchor);
    			insert_dev(target, t28, anchor);
    			if (if_block24) if_block24.m(target, anchor);
    			insert_dev(target, t29, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			if (if_block25) if_block25.m(div4, null);
    			append_dev(div4, t30);
    			if (if_block26) if_block26.m(div4, null);
    			append_dev(div4, t31);
    			if (if_block27) if_block27.m(div4, null);
    			append_dev(div4, t32);
    			if (if_block28) if_block28.m(div4, null);
    			append_dev(div4, t33);
    			if (if_block29) if_block29.m(div4, null);
    			append_dev(div4, t34);
    			if (if_block30) if_block30.m(div4, null);
    			insert_dev(target, t35, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t36, anchor);
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div7);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_36(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_35(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_34(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_33(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_32(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_31(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_30(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_29(ctx);
    					if_block7.c();
    					if_block7.m(t7.parentNode, t7);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*ninethSetup*/ ctx[12]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_28(ctx);
    					if_block8.c();
    					if_block8.m(t8.parentNode, t8);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*tenthSetup*/ ctx[13]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_27$1(ctx);
    					if_block9.c();
    					if_block9.m(t9.parentNode, t9);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t10, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_26$1(ctx);
    					if_block10.c();
    					if_block10.m(t12.parentNode, t12);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_25$1(ctx);
    					if_block11.c();
    					if_block11.m(t16.parentNode, t16);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block12.d(1);
    				if_block12 = current_block_type(ctx);

    				if (if_block12) {
    					if_block12.c();
    					if_block12.m(t17.parentNode, t17);
    				}
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_23$3(ctx);
    					if_block13.c();
    					if_block13.m(t18.parentNode, t18);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block14) {
    				if_block14.p(ctx, dirty);
    			} else {
    				if_block14.d(1);
    				if_block14 = current_block_type_1(ctx);

    				if (if_block14) {
    					if_block14.c();
    					if_block14.m(t19.parentNode, t19);
    				}
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block15) {
    					if_block15.p(ctx, dirty);
    				} else {
    					if_block15 = create_if_block_20$3(ctx);
    					if_block15.c();
    					if_block15.m(t20.parentNode, t20);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_3(ctx)) && if_block16) {
    				if_block16.p(ctx, dirty);
    			} else {
    				if_block16.d(1);
    				if_block16 = current_block_type_2(ctx);

    				if (if_block16) {
    					if_block16.c();
    					if_block16.m(t21.parentNode, t21);
    				}
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block17) {
    					if_block17.p(ctx, dirty);
    				} else {
    					if_block17 = create_if_block_16$4(ctx);
    					if_block17.c();
    					if_block17.m(t22.parentNode, t22);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (current_block_type_3 === (current_block_type_3 = select_block_type_6(ctx)) && if_block18) {
    				if_block18.p(ctx, dirty);
    			} else {
    				if_block18.d(1);
    				if_block18 = current_block_type_3(ctx);

    				if (if_block18) {
    					if_block18.c();
    					if_block18.m(t23.parentNode, t23);
    				}
    			}

    			if (/*tonlistarTexti*/ ctx[14]) {
    				if (if_block19) {
    					if_block19.p(ctx, dirty);
    				} else {
    					if_block19 = create_if_block_11$5(ctx);
    					if_block19.c();
    					if_block19.m(t24.parentNode, t24);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block20) ; else {
    					if_block20 = create_if_block_10$5(ctx);
    					if_block20.c();
    					if_block20.m(t25.parentNode, t25);
    				}
    			} else if (if_block20) {
    				if_block20.d(1);
    				if_block20 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block21) ; else {
    					if_block21 = create_if_block_9$6(ctx);
    					if_block21.c();
    					if_block21.m(t26.parentNode, t26);
    				}
    			} else if (if_block21) {
    				if_block21.d(1);
    				if_block21 = null;
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block22) ; else {
    					if_block22 = create_if_block_8$6(ctx);
    					if_block22.c();
    					if_block22.m(t27.parentNode, t27);
    				}
    			} else if (if_block22) {
    				if_block22.d(1);
    				if_block22 = null;
    			}

    			if (/*ninethSetup*/ ctx[12]) {
    				if (if_block23) {
    					if_block23.p(ctx, dirty);
    				} else {
    					if_block23 = create_if_block_7$6(ctx);
    					if_block23.c();
    					if_block23.m(t28.parentNode, t28);
    				}
    			} else if (if_block23) {
    				if_block23.d(1);
    				if_block23 = null;
    			}

    			if (/*tenthSetup*/ ctx[13]) {
    				if (if_block24) ; else {
    					if_block24 = create_if_block_6$6(ctx);
    					if_block24.c();
    					if_block24.m(t29.parentNode, t29);
    				}
    			} else if (if_block24) {
    				if_block24.d(1);
    				if_block24 = null;
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block25) ; else {
    					if_block25 = create_if_block_5$6(ctx);
    					if_block25.c();
    					if_block25.m(div4, t30);
    				}
    			} else if (if_block25) {
    				if_block25.d(1);
    				if_block25 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block26) ; else {
    					if_block26 = create_if_block_4$6(ctx);
    					if_block26.c();
    					if_block26.m(div4, t31);
    				}
    			} else if (if_block26) {
    				if_block26.d(1);
    				if_block26 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block27) ; else {
    					if_block27 = create_if_block_3$6(ctx);
    					if_block27.c();
    					if_block27.m(div4, t32);
    				}
    			} else if (if_block27) {
    				if_block27.d(1);
    				if_block27 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block28) ; else {
    					if_block28 = create_if_block_2$6(ctx);
    					if_block28.c();
    					if_block28.m(div4, t33);
    				}
    			} else if (if_block28) {
    				if_block28.d(1);
    				if_block28 = null;
    			}

    			if (/*ninethSetup*/ ctx[12]) {
    				if (if_block29) ; else {
    					if_block29 = create_if_block_1$6(ctx);
    					if_block29.c();
    					if_block29.m(div4, t34);
    				}
    			} else if (if_block29) {
    				if_block29.d(1);
    				if_block29 = null;
    			}

    			if (/*tenthSetup*/ ctx[13]) {
    				if (if_block30) ; else {
    					if_block30 = create_if_block$6(ctx);
    					if_block30.c();
    					if_block30.m(div4, null);
    				}
    			} else if (if_block30) {
    				if_block30.d(1);
    				if_block30 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div7, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t11);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t15);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t16);
    			if_block12.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t18);
    			if_block14.d(detaching);
    			if (detaching) detach_dev(t19);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t20);
    			if_block16.d(detaching);
    			if (detaching) detach_dev(t21);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t22);
    			if_block18.d(detaching);
    			if (detaching) detach_dev(t23);
    			if (if_block19) if_block19.d(detaching);
    			if (detaching) detach_dev(t24);
    			if (if_block20) if_block20.d(detaching);
    			if (detaching) detach_dev(t25);
    			if (if_block21) if_block21.d(detaching);
    			if (detaching) detach_dev(t26);
    			if (if_block22) if_block22.d(detaching);
    			if (detaching) detach_dev(t27);
    			if (if_block23) if_block23.d(detaching);
    			if (detaching) detach_dev(t28);
    			if (if_block24) if_block24.d(detaching);
    			if (detaching) detach_dev(t29);
    			if (detaching) detach_dev(div5);
    			if (if_block25) if_block25.d();
    			if (if_block26) if_block26.d();
    			if (if_block27) if_block27.d();
    			if (if_block28) if_block28.d();
    			if (if_block29) if_block29.d();
    			if (if_block30) if_block30.d();
    			if (detaching) detach_dev(t35);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t36);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let eightthSetup = false;
    	let ninethSetup = false;
    	let tenthSetup = false;
    	let eleventhSetup = false;
    	let twelvethSetup = false;
    	let thirteenthSetup = false;
    	let fourteenthSetup = false;
    	let tonlistarTexti = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, thirdSetup = true);
    		$$invalidate(7, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(6, thirdSetup = false);
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(7, fourthSetup = false);
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(14, tonlistarTexti = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(8, fifthSetup = false);
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    		$$invalidate(14, tonlistarTexti = true);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, eightthSetup = false);
    		$$invalidate(14, tonlistarTexti = true);
    	};

    	const toggleeighthSetup = () => {
    		$$invalidate(10, seventhSetup = false);
    		$$invalidate(11, eightthSetup = true);
    		$$invalidate(12, ninethSetup = false);
    		$$invalidate(14, tonlistarTexti = true);
    	};

    	const toggleninethSetup = () => {
    		$$invalidate(11, eightthSetup = false);
    		$$invalidate(12, ninethSetup = true);
    		$$invalidate(13, tenthSetup = false);
    		$$invalidate(14, tonlistarTexti = false);
    	};

    	const toggletenthSetup = () => {
    		$$invalidate(12, ninethSetup = true);
    		$$invalidate(13, tenthSetup = true);
    		eleventhSetup = false;
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Iceland> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Iceland", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		tenthSetup,
    		eleventhSetup,
    		twelvethSetup,
    		thirteenthSetup,
    		fourteenthSetup,
    		tonlistarTexti,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(15, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(6, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(7, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(8, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(9, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(10, seventhSetup = $$props.seventhSetup);
    		if ("eightthSetup" in $$props) $$invalidate(11, eightthSetup = $$props.eightthSetup);
    		if ("ninethSetup" in $$props) $$invalidate(12, ninethSetup = $$props.ninethSetup);
    		if ("tenthSetup" in $$props) $$invalidate(13, tenthSetup = $$props.tenthSetup);
    		if ("eleventhSetup" in $$props) eleventhSetup = $$props.eleventhSetup;
    		if ("twelvethSetup" in $$props) twelvethSetup = $$props.twelvethSetup;
    		if ("thirteenthSetup" in $$props) thirteenthSetup = $$props.thirteenthSetup;
    		if ("fourteenthSetup" in $$props) fourteenthSetup = $$props.fourteenthSetup;
    		if ("tonlistarTexti" in $$props) $$invalidate(14, tonlistarTexti = $$props.tonlistarTexti);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		tenthSetup,
    		tonlistarTexti,
    		distanceBLines,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup
    	];
    }

    class Iceland extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Iceland",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<Iceland> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<Iceland> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<Iceland> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<Iceland> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<Iceland>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<Iceland>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Iceland>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Iceland>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<Iceland>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<Iceland>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<Iceland>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<Iceland>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/Ghana.svelte generated by Svelte v3.23.0 */

    const file$9 = "src/specifics/Ghana.svelte";

    // (74:0) {#if firstSetup}
    function create_if_block_30$1(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$9, 74, 1, 1417);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$9, 75, 1, 1478);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[15], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_30$1.name,
    		type: "if",
    		source: "(74:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (78:0) {#if secondSetup}
    function create_if_block_29$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$9, 78, 1, 1544);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$9, 79, 1, 1604);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[16], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_29$1.name,
    		type: "if",
    		source: "(78:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (82:0) {#if thirdSetup}
    function create_if_block_28$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$9, 82, 1, 1687);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$9, 83, 1, 1748);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[17], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_28$1.name,
    		type: "if",
    		source: "(82:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (86:0) {#if fourthSetup}
    function create_if_block_27$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$9, 86, 1, 1833);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$9, 87, 1, 1893);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[18], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27$2.name,
    		type: "if",
    		source: "(86:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (90:0) {#if fifthSetup}
    function create_if_block_26$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$9, 90, 1, 1976);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$9, 91, 1, 2036);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26$2.name,
    		type: "if",
    		source: "(90:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (94:0) {#if sixthSetup}
    function create_if_block_25$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$9, 94, 1, 2120);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$9, 95, 1, 2182);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25$2.name,
    		type: "if",
    		source: "(94:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (98:0) {#if seventhSetup}
    function create_if_block_24$4(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$9, 98, 1, 2267);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$9, 99, 1, 2328);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeighthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglesixthSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$4.name,
    		type: "if",
    		source: "(98:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (102:0) {#if eightthSetup}
    function create_if_block_23$4(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$9, 102, 1, 2413);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$9, 103, 1, 2474);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleninethSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*toggleseventhSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$4.name,
    		type: "if",
    		source: "(102:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (106:0) {#if ninethSetup}
    function create_if_block_22$4(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$9, 106, 1, 2560);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$9, 107, 1, 2602);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleeighthSetup*/ ctx[21], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$4.name,
    		type: "if",
    		source: "(106:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (119:0) {#if firstSetup}
    function create_if_block_21$4(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let iframe;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Ghana is one of countries which rank low when it comes to the impact of individual climate action.");
    			t1 = space();
    			iframe = element("iframe");
    			attr_dev(div, "class", "pagetext svelte-1x9g4so");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$9, 119, 1, 2792);
    			attr_dev(iframe, "class", "videoSmall");
    			set_style(iframe, "top", "15%");
    			set_style(iframe, "right", "10vw");
    			if (iframe.src !== (iframe_src_value = "https://www.youtube.com/embed/xyxDt_LFYWI")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
    			iframe.allowFullscreen = true;
    			add_location(iframe, file$9, 123, 1, 2964);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, iframe, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(iframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$4.name,
    		type: "if",
    		source: "(119:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (127:0) {#if secondSetup}
    function create_if_block_20$4(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("In 1957 Ghana became the first Sub-Saharan country to gain independance from colonial rule. The British colonisers were defeated by and independence movement lead by Kwame Nkrumah.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "1957";
    			attr_dev(div0, "class", "pagetext svelte-1x9g4so");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$9, 127, 1, 3219);
    			attr_dev(div1, "class", "horizontalLine left line63 svelte-1x9g4so");
    			add_location(div1, file$9, 131, 1, 3520);
    			attr_dev(div2, "class", "text years left line63 svelte-1x9g4so");
    			add_location(div2, file$9, 132, 1, 3568);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$4.name,
    		type: "if",
    		source: "(127:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (137:0) {:else}
    function create_else_block_2$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line63 svelte-1x9g4so");
    			add_location(div, file$9, 137, 1, 3648);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(137:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (136:0) {#if firstSetup}
    function create_if_block_19$4(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$4.name,
    		type: "if",
    		source: "(136:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (142:0) {#if thirdSetup}
    function create_if_block_18$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Felicia Abban, Kwame Nkrumah’s official photographer, was the first professional woman photographer in Ghana. She ran a studio in Accra for decades and documented the evolution of Ghanian culture after it’s independence. She often photographed people, including herself. She photographed herself each night that she got dressed up to go out – for years.");
    			attr_dev(div, "class", "pagetext svelte-1x9g4so");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$9, 142, 1, 3711);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$4.name,
    		type: "if",
    		source: "(142:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (148:0) {#if fourthSetup}
    function create_if_block_17$5(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Ghana is the birthplace of Highlife, which is a certain type of guitar music. E.T. Mensah was the pioneer of highlife.");
    			attr_dev(div, "class", "pagetext svelte-1x9g4so");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$9, 148, 1, 4168);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$5.name,
    		type: "if",
    		source: "(148:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (154:0) {#if fifthSetup}
    function create_if_block_16$5(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("The capital, Accra, is a port city. And to that port western countries ship their old clothes. An average of 15 million clothing items (the population of Ghana is 30 million people) flow through Kantamanto, Accra’s largest second-hand market, every week. A lot of the clothes are unsellable/unmendable so much of it ends up in landfill and only around 20% of the market's retailers make a profit.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "2020";
    			attr_dev(div0, "class", "pagetext svelte-1x9g4so");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$9, 154, 1, 4460);
    			attr_dev(div1, "class", "horizontalLine left line0 svelte-1x9g4so");
    			add_location(div1, file$9, 158, 1, 4930);
    			attr_dev(div2, "class", "text years left line0 now svelte-1x9g4so");
    			add_location(div2, file$9, 159, 1, 4977);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$5.name,
    		type: "if",
    		source: "(154:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (170:3) {:else}
    function create_else_block_1$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line0 svelte-1x9g4so");
    			add_location(div, file$9, 170, 4, 5152);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(170:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (169:3) {#if firstSetup}
    function create_if_block_15$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$5.name,
    		type: "if",
    		source: "(169:3) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (167:2) {#if secondSetup}
    function create_if_block_14$5(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$5.name,
    		type: "if",
    		source: "(167:2) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (165:1) {#if thirdSetup}
    function create_if_block_13$6(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$6.name,
    		type: "if",
    		source: "(165:1) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (163:0) {#if fourthSetup}
    function create_if_block_12$6(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$6.name,
    		type: "if",
    		source: "(163:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (177:0) {#if sixthSetup}
    function create_if_block_11$6(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("The clothing, which is sent from the U.S., Canada and Europe, is called ‘Obroni w’awu’ (dead white mans clothing), because Ghanians first assumed the owners were deseased. Kayayei, the women who carry the clothing – in heavy bales on their heads – from the harbour to the market earn around 30 cents to $1 for each trip.");
    			attr_dev(div, "class", "pagetext svelte-1x9g4so");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$9, 177, 1, 5237);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$6.name,
    		type: "if",
    		source: "(177:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (183:0) {#if seventhSetup}
    function create_if_block_10$6(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 3.170";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "23 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2020";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 342 900 342 1200 365 1200");
    			add_location(polygon, file$9, 184, 2, 5834);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$9, 183, 1, 5725);
    			attr_dev(span0, "class", "deathToll text svelte-1x9g4so");
    			add_location(span0, file$9, 188, 38, 5990);
    			attr_dev(div0, "class", "temperature firstMeter svelte-1x9g4so");
    			add_location(div0, file$9, 188, 2, 5954);
    			attr_dev(span1, "class", "tempnumber rightFirst text svelte-1x9g4so");
    			add_location(span1, file$9, 189, 36, 6091);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$9, 189, 2, 6057);
    			attr_dev(div2, "class", "tempMeterCountry svelte-1x9g4so");
    			add_location(div2, file$9, 187, 1, 5921);
    			attr_dev(div3, "class", "text years right line0 now svelte-1x9g4so");
    			add_location(div3, file$9, 192, 1, 6163);
    			attr_dev(div4, "class", "horizontalLine full right line0 svelte-1x9g4so");
    			add_location(div4, file$9, 193, 1, 6215);
    			attr_dev(div5, "class", "text years right line20 svelte-1x9g4so");
    			add_location(div5, file$9, 194, 1, 6268);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-1x9g4so");
    			add_location(div6, file$9, 195, 1, 6317);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$6.name,
    		type: "if",
    		source: "(183:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (210:5) {:else}
    function create_else_block$3(ctx) {
    	let div1;
    	let div0;
    	let span;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			span.textContent = "365 days";
    			attr_dev(span, "class", "tempnumber left text svelte-1x9g4so");
    			set_style(span, "z-index", "99999999");
    			add_location(span, file$9, 212, 8, 6646);
    			attr_dev(div0, "class", "temperature infotext");
    			add_location(div0, file$9, 211, 7, 6603);
    			attr_dev(div1, "class", "tempMeterCountry svelte-1x9g4so");
    			add_location(div1, file$9, 210, 6, 6565);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(210:5) {:else}",
    		ctx
    	});

    	return block;
    }

    // (209:5) {#if firstSetup}
    function create_if_block_9$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$7.name,
    		type: "if",
    		source: "(209:5) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (207:4) {#if secondSetup}
    function create_if_block_8$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$7.name,
    		type: "if",
    		source: "(207:4) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (205:3) {#if thirdSetup}
    function create_if_block_7$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$7.name,
    		type: "if",
    		source: "(205:3) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (203:2) {#if fourthSetup}
    function create_if_block_6$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$7.name,
    		type: "if",
    		source: "(203:2) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (201:1) {#if fifthSetup}
    function create_if_block_5$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$7.name,
    		type: "if",
    		source: "(201:1) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (199:0) {#if sixthSetup}
    function create_if_block_4$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$7.name,
    		type: "if",
    		source: "(199:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (224:0) {#if eightthSetup}
    function create_if_block_3$7(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 8.721";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "45 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2060";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 320 600 320 900 342 900 342 1200 365 1200");
    			add_location(polygon, file$9, 225, 2, 6933);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$9, 224, 1, 6824);
    			attr_dev(span0, "class", "deathToll text svelte-1x9g4so");
    			add_location(span0, file$9, 229, 36, 7111);
    			attr_dev(div0, "class", "temperature midMeter svelte-1x9g4so");
    			add_location(div0, file$9, 229, 2, 7077);
    			attr_dev(span1, "class", "tempnumber rightMid text svelte-1x9g4so");
    			add_location(span1, file$9, 230, 36, 7212);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$9, 230, 2, 7178);
    			attr_dev(div2, "class", "tempMeterCountry svelte-1x9g4so");
    			add_location(div2, file$9, 228, 1, 7044);
    			attr_dev(div3, "class", "text years right line40 svelte-1x9g4so");
    			add_location(div3, file$9, 233, 1, 7282);
    			attr_dev(div4, "class", "horizontalLine full right line40 svelte-1x9g4so");
    			add_location(div4, file$9, 234, 1, 7331);
    			attr_dev(div5, "class", "text years right line20 svelte-1x9g4so");
    			add_location(div5, file$9, 235, 1, 7385);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-1x9g4so");
    			add_location(div6, file$9, 236, 1, 7434);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$7.name,
    		type: "if",
    		source: "(224:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (241:0) {#if ninethSetup}
    function create_if_block_2$7(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t8;
    	let div6;
    	let t10;
    	let div7;
    	let t11;
    	let div8;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 38.157";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "127 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2080";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			t8 = space();
    			div6 = element("div");
    			div6.textContent = "2100";
    			t10 = space();
    			div7 = element("div");
    			t11 = space();
    			div8 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 365 300 365 0 238 0 238 300 320 600 320 900 342 900 342 1200 365 1200");
    			add_location(polygon, file$9, 242, 2, 7623);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$9, 241, 1, 7514);
    			attr_dev(span0, "class", "deathToll text svelte-1x9g4so");
    			add_location(span0, file$9, 246, 36, 7829);
    			attr_dev(div0, "class", "temperature endMeter svelte-1x9g4so");
    			add_location(div0, file$9, 246, 2, 7795);
    			attr_dev(span1, "class", "tempnumber rightEnd text svelte-1x9g4so");
    			add_location(span1, file$9, 247, 36, 7931);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$9, 247, 2, 7897);
    			attr_dev(div2, "class", "tempMeterCountry svelte-1x9g4so");
    			add_location(div2, file$9, 245, 1, 7762);
    			attr_dev(div3, "class", "text years right line60 svelte-1x9g4so");
    			add_location(div3, file$9, 250, 1, 8002);
    			attr_dev(div4, "class", "horizontalLine full right line60 svelte-1x9g4so");
    			add_location(div4, file$9, 251, 1, 8051);
    			attr_dev(div5, "class", "line right line60 svelte-1x9g4so");
    			add_location(div5, file$9, 252, 1, 8105);
    			attr_dev(div6, "class", "text years right line80 svelte-1x9g4so");
    			add_location(div6, file$9, 253, 1, 8144);
    			attr_dev(div7, "class", "horizontalLine full right line80 svelte-1x9g4so");
    			add_location(div7, file$9, 254, 1, 8193);
    			attr_dev(div8, "class", "line right line80 svelte-1x9g4so");
    			add_location(div8, file$9, 255, 1, 8247);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div8, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(241:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (269:3) {#if fifthSetup}
    function create_if_block_1$7(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "href", "https://deadwhitemansclothes.org/intro");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "svelte-1x9g4so");
    			add_location(a, file$9, 268, 19, 8436);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(269:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (270:3) {#if sixthSetup}
    function create_if_block$7(ctx) {
    	let a0;
    	let t1;
    	let a1;

    	const block = {
    		c: function create() {
    			a0 = element("a");
    			a0.textContent = "[more ↗︎]";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "[more ↗︎]";
    			attr_dev(a0, "href", "https://www.instagram.com/p/B5VfzzlhmOv/");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "class", "svelte-1x9g4so");
    			add_location(a0, file$9, 269, 19, 8552);
    			attr_dev(a1, "href", "https://www.instagram.com/tv/B-Sltgypx7O/");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "class", "svelte-1x9g4so");
    			add_location(a1, file$9, 269, 113, 8646);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(270:3) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let div0;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let t22;
    	let div2;
    	let div1;
    	let t23;
    	let t24;
    	let div3;
    	let t25;
    	let div5;
    	let div4;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_30$1(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_29$1(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[6] && create_if_block_28$1(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[7] && create_if_block_27$2(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[8] && create_if_block_26$2(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[9] && create_if_block_25$2(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[10] && create_if_block_24$4(ctx);
    	let if_block7 = /*eightthSetup*/ ctx[11] && create_if_block_23$4(ctx);
    	let if_block8 = /*ninethSetup*/ ctx[12] && create_if_block_22$4(ctx);
    	let if_block9 = /*firstSetup*/ ctx[4] && create_if_block_21$4(ctx);
    	let if_block10 = /*secondSetup*/ ctx[5] && create_if_block_20$4(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_19$4;
    		return create_else_block_2$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block11 = current_block_type(ctx);
    	let if_block12 = /*thirdSetup*/ ctx[6] && create_if_block_18$4(ctx);
    	let if_block13 = /*fourthSetup*/ ctx[7] && create_if_block_17$5(ctx);
    	let if_block14 = /*fifthSetup*/ ctx[8] && create_if_block_16$5(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_12$6;
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_13$6;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_14$5;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_15$5;
    		return create_else_block_1$2;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block15 = current_block_type_1(ctx);
    	let if_block16 = /*sixthSetup*/ ctx[9] && create_if_block_11$6(ctx);
    	let if_block17 = /*seventhSetup*/ ctx[10] && create_if_block_10$6(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*sixthSetup*/ ctx[9]) return create_if_block_4$7;
    		if (/*fifthSetup*/ ctx[8]) return create_if_block_5$7;
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_6$7;
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_7$7;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_8$7;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_9$7;
    		return create_else_block$3;
    	}

    	let current_block_type_2 = select_block_type_2(ctx);
    	let if_block18 = current_block_type_2(ctx);
    	let if_block19 = /*eightthSetup*/ ctx[11] && create_if_block_3$7(ctx);
    	let if_block20 = /*ninethSetup*/ ctx[12] && create_if_block_2$7(ctx);
    	let if_block21 = /*fifthSetup*/ ctx[8] && create_if_block_1$7(ctx);
    	let if_block22 = /*sixthSetup*/ ctx[9] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			if (if_block7) if_block7.c();
    			t7 = space();
    			if (if_block8) if_block8.c();
    			t8 = space();
    			div0 = element("div");
    			t9 = text(/*pagetitleText*/ ctx[0]);
    			t10 = space();
    			if (if_block9) if_block9.c();
    			t11 = space();
    			if (if_block10) if_block10.c();
    			t12 = space();
    			if_block11.c();
    			t13 = space();
    			if (if_block12) if_block12.c();
    			t14 = space();
    			if (if_block13) if_block13.c();
    			t15 = space();
    			if (if_block14) if_block14.c();
    			t16 = space();
    			if_block15.c();
    			t17 = space();
    			if (if_block16) if_block16.c();
    			t18 = space();
    			if (if_block17) if_block17.c();
    			t19 = space();
    			if_block18.c();
    			t20 = space();
    			if (if_block19) if_block19.c();
    			t21 = space();
    			if (if_block20) if_block20.c();
    			t22 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block21) if_block21.c();
    			t23 = space();
    			if (if_block22) if_block22.c();
    			t24 = space();
    			div3 = element("div");
    			t25 = space();
    			div5 = element("div");
    			div4 = element("div");
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$9, 115, 0, 2690);
    			attr_dev(div1, "class", "bottomLineText text svelte-1x9g4so");
    			set_style(div1, "text-align", "right");
    			add_location(div1, file$9, 267, 2, 8356);
    			attr_dev(div2, "class", "text bottomLine svelte-1x9g4so");
    			add_location(div2, file$9, 266, 0, 8324);
    			attr_dev(div3, "class", "horizontalLine left svelte-1x9g4so");
    			set_style(div3, "width", "100%");
    			set_style(div3, "top", "calc(" + /*distanceBLines*/ ctx[13] + " * 8)");
    			set_style(div3, "border-top", "1px solid blue");
    			add_location(div3, file$9, 274, 0, 8764);
    			attr_dev(div4, "class", "progressline");
    			set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div4, file$9, 278, 1, 8929);
    			attr_dev(div5, "class", "activedotnew activedotFan");
    			add_location(div5, file$9, 277, 0, 8888);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t9);
    			insert_dev(target, t10, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if_block11.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if_block15.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if_block18.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			if (if_block19) if_block19.m(target, anchor);
    			insert_dev(target, t21, anchor);
    			if (if_block20) if_block20.m(target, anchor);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			if (if_block21) if_block21.m(div1, null);
    			append_dev(div1, t23);
    			if (if_block22) if_block22.m(div1, null);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_30$1(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_29$1(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_28$1(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_27$2(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_26$2(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_25$2(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_24$4(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_23$4(ctx);
    					if_block7.c();
    					if_block7.m(t7.parentNode, t7);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*ninethSetup*/ ctx[12]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_22$4(ctx);
    					if_block8.c();
    					if_block8.m(t8.parentNode, t8);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t9, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_21$4(ctx);
    					if_block9.c();
    					if_block9.m(t11.parentNode, t11);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_20$4(ctx);
    					if_block10.c();
    					if_block10.m(t12.parentNode, t12);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block11.d(1);
    				if_block11 = current_block_type(ctx);

    				if (if_block11) {
    					if_block11.c();
    					if_block11.m(t13.parentNode, t13);
    				}
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block12) {
    					if_block12.p(ctx, dirty);
    				} else {
    					if_block12 = create_if_block_18$4(ctx);
    					if_block12.c();
    					if_block12.m(t14.parentNode, t14);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_17$5(ctx);
    					if_block13.c();
    					if_block13.m(t15.parentNode, t15);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_16$5(ctx);
    					if_block14.c();
    					if_block14.m(t16.parentNode, t16);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
    				if_block15.d(1);
    				if_block15 = current_block_type_1(ctx);

    				if (if_block15) {
    					if_block15.c();
    					if_block15.m(t17.parentNode, t17);
    				}
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block16) {
    					if_block16.p(ctx, dirty);
    				} else {
    					if_block16 = create_if_block_11$6(ctx);
    					if_block16.c();
    					if_block16.m(t18.parentNode, t18);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block17) ; else {
    					if_block17 = create_if_block_10$6(ctx);
    					if_block17.c();
    					if_block17.m(t19.parentNode, t19);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (current_block_type_2 !== (current_block_type_2 = select_block_type_2(ctx))) {
    				if_block18.d(1);
    				if_block18 = current_block_type_2(ctx);

    				if (if_block18) {
    					if_block18.c();
    					if_block18.m(t20.parentNode, t20);
    				}
    			}

    			if (/*eightthSetup*/ ctx[11]) {
    				if (if_block19) ; else {
    					if_block19 = create_if_block_3$7(ctx);
    					if_block19.c();
    					if_block19.m(t21.parentNode, t21);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (/*ninethSetup*/ ctx[12]) {
    				if (if_block20) ; else {
    					if_block20 = create_if_block_2$7(ctx);
    					if_block20.c();
    					if_block20.m(t22.parentNode, t22);
    				}
    			} else if (if_block20) {
    				if_block20.d(1);
    				if_block20 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block21) ; else {
    					if_block21 = create_if_block_1$7(ctx);
    					if_block21.c();
    					if_block21.m(div1, t23);
    				}
    			} else if (if_block21) {
    				if_block21.d(1);
    				if_block21 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block22) ; else {
    					if_block22 = create_if_block$7(ctx);
    					if_block22.c();
    					if_block22.m(div1, null);
    				}
    			} else if (if_block22) {
    				if_block22.d(1);
    				if_block22 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t10);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t11);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t12);
    			if_block11.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t16);
    			if_block15.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t19);
    			if_block18.d(detaching);
    			if (detaching) detach_dev(t20);
    			if (if_block19) if_block19.d(detaching);
    			if (detaching) detach_dev(t21);
    			if (if_block20) if_block20.d(detaching);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(div2);
    			if (if_block21) if_block21.d();
    			if (if_block22) if_block22.d();
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let eightthSetup = false;
    	let ninethSetup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, thirdSetup = true);
    		$$invalidate(7, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(6, thirdSetup = false);
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(7, fourthSetup = false);
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(9, sixthSetup = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(8, fifthSetup = false);
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, eightthSetup = false);
    	};

    	const toggleeighthSetup = () => {
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    		$$invalidate(11, eightthSetup = true);
    		$$invalidate(12, ninethSetup = false);
    	};

    	const toggleninethSetup = () => {
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(11, eightthSetup = false);
    		$$invalidate(12, ninethSetup = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Ghana> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Ghana", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(13, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(6, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(7, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(8, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(9, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(10, seventhSetup = $$props.seventhSetup);
    		if ("eightthSetup" in $$props) $$invalidate(11, eightthSetup = $$props.eightthSetup);
    		if ("ninethSetup" in $$props) $$invalidate(12, ninethSetup = $$props.ninethSetup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		distanceBLines,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup
    	];
    }

    class Ghana extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ghana",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<Ghana> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<Ghana> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<Ghana> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<Ghana> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<Ghana>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<Ghana>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Ghana>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Ghana>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<Ghana>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<Ghana>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<Ghana>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<Ghana>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/SaudiArabia.svelte generated by Svelte v3.23.0 */

    const file$a = "src/specifics/SaudiArabia.svelte";

    // (70:0) {#if firstSetup}
    function create_if_block_18$5(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$a, 70, 1, 1207);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$a, 71, 1, 1268);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[15], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$5.name,
    		type: "if",
    		source: "(70:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (74:0) {#if secondSetup}
    function create_if_block_17$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$a, 74, 1, 1334);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$a, 75, 1, 1394);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[16], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$6.name,
    		type: "if",
    		source: "(74:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (78:0) {#if thirdSetup}
    function create_if_block_16$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$a, 78, 1, 1477);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$a, 79, 1, 1538);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[17], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$6.name,
    		type: "if",
    		source: "(78:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (82:0) {#if fourthSetup}
    function create_if_block_15$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$a, 82, 1, 1623);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$a, 83, 1, 1683);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[18], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$6.name,
    		type: "if",
    		source: "(82:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (86:0) {#if fifthSetup}
    function create_if_block_14$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$a, 86, 1, 1766);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$a, 87, 1, 1826);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$6.name,
    		type: "if",
    		source: "(86:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (90:0) {#if sixthSetup}
    function create_if_block_13$7(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$a, 90, 1, 1910);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$a, 91, 1, 1972);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$7.name,
    		type: "if",
    		source: "(90:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (94:0) {#if seventhSetup}
    function create_if_block_12$7(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$a, 94, 1, 2057);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$a, 95, 1, 2099);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesixthSetup*/ ctx[19], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$7.name,
    		type: "if",
    		source: "(94:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (112:0) {#if firstSetup}
    function create_if_block_11$7(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Saudi Arabia is one of the highest ranking countries when it comes to the impact of individual climate action.");
    			t1 = space();
    			img = element("img");
    			attr_dev(div, "class", "pagetext svelte-irt5f3");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$a, 112, 1, 2292);
    			set_style(img, "position", "absolute");
    			set_style(img, "width", "50%");
    			set_style(img, "right", "2%");
    			set_style(img, "top", "3%");
    			if (img.src !== (img_src_value = "https://www.arabnews.pk/sites/default/files/styles/n_670_395/public/2018/04/03/1146466-1925327293.png?itok=sj0MRsQM")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$a, 116, 1, 2476);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$7.name,
    		type: "if",
    		source: "(112:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (120:0) {:else}
    function create_else_block_2$2(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			attr_dev(img, "class", "smallPic");
    			if (img.src !== (img_src_value = "https://www.arabnews.pk/sites/default/files/styles/n_670_395/public/2018/04/03/1146466-1925327293.png?itok=sj0MRsQM")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$a, 121, 2, 2796);
    			attr_dev(div, "class", "prePics");
    			set_style(div, "top", "calc(" + /*distanceBLines*/ ctx[12] + " * 1.2)");
    			set_style(div, "left", "calc(" + /*marginSides*/ ctx[13] + " + 5px)");
    			add_location(div, file$a, 120, 1, 2696);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$2.name,
    		type: "else",
    		source: "(120:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (119:0) {#if firstSetup}
    function create_if_block_10$7(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$7.name,
    		type: "if",
    		source: "(119:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (145:1) {:else}
    function create_else_block_1$3(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			img = element("img");
    			attr_dev(div0, "class", "line left line47 svelte-irt5f3");
    			add_location(div0, file$a, 145, 2, 4015);
    			attr_dev(div1, "class", "line left line40 svelte-irt5f3");
    			add_location(div1, file$a, 146, 2, 4054);
    			attr_dev(img, "class", "smallPic");
    			if (img.src !== (img_src_value = "https://i.pinimg.com/564x/8f/13/67/8f1367cbac68aa3ed779d257d4234111.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$a, 149, 2, 4210);
    			attr_dev(div2, "class", "prePics");
    			set_style(div2, "bottom", "calc(" + /*distanceBLines*/ ctx[12] + " * 4.1)");
    			set_style(div2, "left", "calc(" + /*marginSides*/ ctx[13] + " + 5px)");
    			set_style(div2, "opacity", ".3");
    			add_location(div2, file$a, 148, 2, 4094);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(145:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (144:1) {#if firstSetup}
    function create_if_block_9$8(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$8.name,
    		type: "if",
    		source: "(144:1) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (126:0) {#if secondSetup}
    function create_if_block_8$8(ctx) {
    	let div0;
    	let t0;
    	let br;
    	let t1;
    	let t2;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;
    	let t10;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("In the 1930’s, an American oil company, a predecessor of Chevron, started looking for oil in Saudi Arabia and launched ARAMCO (American Arabian Oil Company).");
    			br = element("br");
    			t1 = text("\n\t\tIn the 70’s the Saudi government bought ARAMCO and today it is one of the largest oil companys in the world, one of the oil giants fueling the crisis, and a large source of wealth for the Saudi Arabian elite.");
    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "1973";
    			t5 = space();
    			div3 = element("div");
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "1980";
    			t9 = space();
    			div6 = element("div");
    			t10 = space();
    			img = element("img");
    			add_location(br, file$a, 127, 159, 3194);
    			attr_dev(div0, "class", "pagetext svelte-irt5f3");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$a, 126, 1, 2975);
    			attr_dev(div1, "class", "horizontalLine left line47 svelte-irt5f3");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$a, 132, 1, 3519);
    			attr_dev(div2, "class", "text years left line47 svelte-irt5f3");
    			add_location(div2, file$a, 133, 1, 3588);
    			attr_dev(div3, "class", "line left line47 svelte-irt5f3");
    			add_location(div3, file$a, 134, 1, 3636);
    			attr_dev(div4, "class", "horizontalLine left line40 svelte-irt5f3");
    			set_style(div4, "width", "100%");
    			add_location(div4, file$a, 136, 1, 3675);
    			attr_dev(div5, "class", "text years left line40 svelte-irt5f3");
    			add_location(div5, file$a, 137, 1, 3744);
    			attr_dev(div6, "class", "line left line40 svelte-irt5f3");
    			add_location(div6, file$a, 138, 1, 3792);
    			set_style(img, "position", "absolute");
    			set_style(img, "height", "50vw");
    			set_style(img, "left", "2%");
    			set_style(img, "top", "75%");
    			if (img.src !== (img_src_value = "https://i.pinimg.com/564x/8f/13/67/8f1367cbac68aa3ed779d257d4234111.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$a, 140, 1, 3831);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, br);
    			append_dev(div0, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$8.name,
    		type: "if",
    		source: "(126:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (173:2) {:else}
    function create_else_block$4(ctx) {
    	let div0;
    	let t;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "line left line40 svelte-irt5f3");
    			add_location(div0, file$a, 173, 3, 5364);
    			attr_dev(div1, "class", "line left line20 svelte-irt5f3");
    			add_location(div1, file$a, 174, 3, 5404);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(173:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (172:2) {#if secondSetup}
    function create_if_block_7$8(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$8.name,
    		type: "if",
    		source: "(172:2) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (170:1) {#if firstSetup}
    function create_if_block_6$8(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$8.name,
    		type: "if",
    		source: "(170:1) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (155:0) {#if thirdSetup}
    function create_if_block_5$8(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;
    	let t4;
    	let div3;
    	let t5;
    	let div4;
    	let t6;
    	let div5;
    	let t8;
    	let div6;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("In the last decades of the 20th century, following a wealth boost from the oil industry, women writers took to the short story as an artform. They found in it a compact format to express social critisicm with intense focus that could be delivered to the reader before interruption or fatigue kicked in. This wave included writers such as Fawziyya Al-bakr, Badriyya Al-Bisher, Maryam al-Ghamidi, Noura al-Ghamidim, Umaima al-Khamees, Khairiyya Ibrahim al-Saqqaf and Shareefa al-Shamlan.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "1980";
    			t4 = space();
    			div3 = element("div");
    			t5 = space();
    			div4 = element("div");
    			t6 = space();
    			div5 = element("div");
    			div5.textContent = "2000";
    			t8 = space();
    			div6 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-irt5f3");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$a, 155, 1, 4351);
    			attr_dev(div1, "class", "horizontalLine left line40 svelte-irt5f3");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$a, 161, 1, 4986);
    			attr_dev(div2, "class", "text years left line40 svelte-irt5f3");
    			add_location(div2, file$a, 162, 1, 5055);
    			attr_dev(div3, "class", "line left line40 svelte-irt5f3");
    			add_location(div3, file$a, 163, 1, 5103);
    			attr_dev(div4, "class", "horizontalLine left line20 svelte-irt5f3");
    			set_style(div4, "width", "100%");
    			add_location(div4, file$a, 165, 1, 5142);
    			attr_dev(div5, "class", "text years left line20 svelte-irt5f3");
    			add_location(div5, file$a, 166, 1, 5211);
    			attr_dev(div6, "class", "line left line20 svelte-irt5f3");
    			add_location(div6, file$a, 167, 1, 5259);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$8.name,
    		type: "if",
    		source: "(155:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (180:0) {#if fourthSetup}
    function create_if_block_4$8(ctx) {
    	let div;
    	let i;

    	const block = {
    		c: function create() {
    			div = element("div");
    			i = element("i");
    			i.textContent = "“I’m the woman from the lands of scorching heat, and of sharp freezing cold that twists the bones. Night falls early within the limits of my small village, and all living creatures take refuge inside their own skins. I’m the woman who has nothing, in her world, but the chance to stand secretly on tiptoe, gazing at the world outside through cracks in the small window. The narrow cages that shut life in haven’t stopped her eyes from looking up – with an aimless gaze sometimes, it’s true – towards some undefined future.” — Start of 'A Paper Life' by Fawziyya al-Bakr";
    			add_location(i, file$a, 181, 2, 5544);
    			attr_dev(div, "class", "pagetext svelte-irt5f3");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$a, 180, 1, 5482);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$8.name,
    		type: "if",
    		source: "(180:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (205:0) {#if graph}
    function create_if_block_3$8(ctx) {
    	let div1;
    	let div0;
    	let span;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			span.textContent = "365 days";
    			attr_dev(span, "class", "tempnumber left text svelte-irt5f3");
    			set_style(span, "z-index", "99999999");
    			add_location(span, file$a, 207, 3, 6748);
    			attr_dev(div0, "class", "temperature infotext");
    			add_location(div0, file$a, 206, 2, 6710);
    			attr_dev(div1, "class", "tempMeterCountry svelte-irt5f3");
    			add_location(div1, file$a, 205, 1, 6677);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$8.name,
    		type: "if",
    		source: "(205:0) {#if graph}",
    		ctx
    	});

    	return block;
    }

    // (214:0) {#if fifthSetup}
    function create_if_block_2$8(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 3.114";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "21 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2020";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 344 900 344 1200 365 1200");
    			add_location(polygon, file$a, 215, 2, 6979);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$a, 214, 1, 6870);
    			attr_dev(span0, "class", "deathToll text svelte-irt5f3");
    			add_location(span0, file$a, 219, 38, 7135);
    			attr_dev(div0, "class", "temperature firstMeter svelte-irt5f3");
    			add_location(div0, file$a, 219, 2, 7099);
    			attr_dev(span1, "class", "tempnumber rightFirst text svelte-irt5f3");
    			add_location(span1, file$a, 220, 36, 7236);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$a, 220, 2, 7202);
    			attr_dev(div2, "class", "tempMeterCountry svelte-irt5f3");
    			add_location(div2, file$a, 218, 1, 7066);
    			attr_dev(div3, "class", "text years right line0 now svelte-irt5f3");
    			add_location(div3, file$a, 223, 1, 7308);
    			attr_dev(div4, "class", "horizontalLine full right line0 svelte-irt5f3");
    			add_location(div4, file$a, 224, 1, 7360);
    			attr_dev(div5, "class", "text years right line20 svelte-irt5f3");
    			add_location(div5, file$a, 225, 1, 7413);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-irt5f3");
    			add_location(div6, file$a, 226, 1, 7462);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(214:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (230:0) {#if sixthSetup}
    function create_if_block_1$8(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 6.441";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "37 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2060";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 328 600 328 900 344 900 344 1200 365 1200");
    			add_location(polygon, file$a, 231, 2, 7649);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$a, 230, 1, 7540);
    			attr_dev(span0, "class", "deathToll text svelte-irt5f3");
    			add_location(span0, file$a, 235, 36, 7827);
    			attr_dev(div0, "class", "temperature midMeter svelte-irt5f3");
    			add_location(div0, file$a, 235, 2, 7793);
    			attr_dev(span1, "class", "tempnumber rightMid text svelte-irt5f3");
    			add_location(span1, file$a, 236, 36, 7928);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$a, 236, 2, 7894);
    			attr_dev(div2, "class", "tempMeterCountry svelte-irt5f3");
    			add_location(div2, file$a, 234, 1, 7760);
    			attr_dev(div3, "class", "text years right line40 svelte-irt5f3");
    			add_location(div3, file$a, 239, 1, 7998);
    			attr_dev(div4, "class", "horizontalLine full right line40 svelte-irt5f3");
    			add_location(div4, file$a, 240, 1, 8047);
    			attr_dev(div5, "class", "text years right line20 svelte-irt5f3");
    			add_location(div5, file$a, 241, 1, 8101);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-irt5f3");
    			add_location(div6, file$a, 242, 1, 8150);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(230:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (246:0) {#if seventhSetup}
    function create_if_block$8(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t8;
    	let div6;
    	let t10;
    	let div7;
    	let t11;
    	let div8;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 12.635";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "73 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2080";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			t8 = space();
    			div6 = element("div");
    			div6.textContent = "2100";
    			t10 = space();
    			div7 = element("div");
    			t11 = space();
    			div8 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 365 300 365 0 292 0 292 300 328 600 328 900 344 900 344 1200 365 1200");
    			add_location(polygon, file$a, 247, 2, 8339);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$a, 246, 1, 8230);
    			attr_dev(span0, "class", "deathToll text svelte-irt5f3");
    			add_location(span0, file$a, 251, 36, 8545);
    			attr_dev(div0, "class", "temperature endMeter svelte-irt5f3");
    			add_location(div0, file$a, 251, 2, 8511);
    			attr_dev(span1, "class", "tempnumber rightEnd text svelte-irt5f3");
    			add_location(span1, file$a, 252, 36, 8647);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$a, 252, 2, 8613);
    			attr_dev(div2, "class", "tempMeterCountry svelte-irt5f3");
    			add_location(div2, file$a, 250, 1, 8478);
    			attr_dev(div3, "class", "text years right line60 svelte-irt5f3");
    			add_location(div3, file$a, 255, 1, 8717);
    			attr_dev(div4, "class", "horizontalLine full right line60 svelte-irt5f3");
    			add_location(div4, file$a, 256, 1, 8766);
    			attr_dev(div5, "class", "line right line60 svelte-irt5f3");
    			add_location(div5, file$a, 257, 1, 8820);
    			attr_dev(div6, "class", "text years right line80 svelte-irt5f3");
    			add_location(div6, file$a, 258, 1, 8859);
    			attr_dev(div7, "class", "horizontalLine full right line80 svelte-irt5f3");
    			add_location(div7, file$a, 259, 1, 8908);
    			attr_dev(div8, "class", "line right line80 svelte-irt5f3");
    			add_location(div8, file$a, 260, 1, 8962);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div8, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(246:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let div0;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let div1;
    	let t18;
    	let div3;
    	let div2;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_18$5(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_17$6(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[6] && create_if_block_16$6(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[7] && create_if_block_15$6(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[8] && create_if_block_14$6(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[9] && create_if_block_13$7(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[10] && create_if_block_12$7(ctx);
    	let if_block7 = /*firstSetup*/ ctx[4] && create_if_block_11$7(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_10$7;
    		return create_else_block_2$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block8 = current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*secondSetup*/ ctx[5]) return create_if_block_8$8;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_9$8;
    		return create_else_block_1$3;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block9 = current_block_type_1(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_5$8;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_6$8;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_7$8;
    		return create_else_block$4;
    	}

    	let current_block_type_2 = select_block_type_2(ctx);
    	let if_block10 = current_block_type_2(ctx);
    	let if_block11 = /*fourthSetup*/ ctx[7] && create_if_block_4$8(ctx);
    	let if_block12 = /*graph*/ ctx[11] && create_if_block_3$8(ctx);
    	let if_block13 = /*fifthSetup*/ ctx[8] && create_if_block_2$8(ctx);
    	let if_block14 = /*sixthSetup*/ ctx[9] && create_if_block_1$8(ctx);
    	let if_block15 = /*seventhSetup*/ ctx[10] && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			div0 = element("div");
    			t7 = text(/*pagetitleText*/ ctx[0]);
    			t8 = space();
    			if (if_block7) if_block7.c();
    			t9 = space();
    			if_block8.c();
    			t10 = space();
    			if_block9.c();
    			t11 = space();
    			if_block10.c();
    			t12 = space();
    			if (if_block11) if_block11.c();
    			t13 = space();
    			if (if_block12) if_block12.c();
    			t14 = space();
    			if (if_block13) if_block13.c();
    			t15 = space();
    			if (if_block14) if_block14.c();
    			t16 = space();
    			if (if_block15) if_block15.c();
    			t17 = space();
    			div1 = element("div");
    			t18 = space();
    			div3 = element("div");
    			div2 = element("div");
    			attr_dev(div0, "class", "pagetitle svelte-irt5f3");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$a, 105, 0, 2187);
    			attr_dev(div1, "class", "horizontalLine left svelte-irt5f3");
    			set_style(div1, "width", "100%");
    			set_style(div1, "top", "calc(" + /*distanceBLines*/ ctx[12] + " * 8)");
    			set_style(div1, "border-top", "1px solid blue");
    			add_location(div1, file$a, 271, 0, 9039);
    			attr_dev(div2, "class", "progressline");
    			set_style(div2, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div2, file$a, 275, 1, 9204);
    			attr_dev(div3, "class", "activedotnew activedotFan");
    			add_location(div3, file$a, 274, 0, 9163);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t7);
    			insert_dev(target, t8, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if_block8.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			if_block9.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if_block10.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_18$5(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_17$6(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_16$6(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_15$6(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_14$6(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_13$7(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_12$7(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t7, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_11$7(ctx);
    					if_block7.c();
    					if_block7.m(t9.parentNode, t9);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block8) {
    				if_block8.p(ctx, dirty);
    			} else {
    				if_block8.d(1);
    				if_block8 = current_block_type(ctx);

    				if (if_block8) {
    					if_block8.c();
    					if_block8.m(t10.parentNode, t10);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block9) {
    				if_block9.p(ctx, dirty);
    			} else {
    				if_block9.d(1);
    				if_block9 = current_block_type_1(ctx);

    				if (if_block9) {
    					if_block9.c();
    					if_block9.m(t11.parentNode, t11);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block10) {
    				if_block10.p(ctx, dirty);
    			} else {
    				if_block10.d(1);
    				if_block10 = current_block_type_2(ctx);

    				if (if_block10) {
    					if_block10.c();
    					if_block10.m(t12.parentNode, t12);
    				}
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_4$8(ctx);
    					if_block11.c();
    					if_block11.m(t13.parentNode, t13);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*graph*/ ctx[11]) {
    				if (if_block12) ; else {
    					if_block12 = create_if_block_3$8(ctx);
    					if_block12.c();
    					if_block12.m(t14.parentNode, t14);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block13) ; else {
    					if_block13 = create_if_block_2$8(ctx);
    					if_block13.c();
    					if_block13.m(t15.parentNode, t15);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block14) ; else {
    					if_block14 = create_if_block_1$8(ctx);
    					if_block14.c();
    					if_block14.m(t16.parentNode, t16);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block15) ; else {
    					if_block15 = create_if_block$8(ctx);
    					if_block15.c();
    					if_block15.m(t17.parentNode, t17);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div2, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t8);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t9);
    			if_block8.d(detaching);
    			if (detaching) detach_dev(t10);
    			if_block9.d(detaching);
    			if (detaching) detach_dev(t11);
    			if_block10.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t16);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let graph = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, thirdSetup = true);
    		$$invalidate(7, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(6, thirdSetup = false);
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = false);
    		$$invalidate(11, graph = false);
    	};

    	const togglefifthSetup = () => {
    		//fourthSetup = false;
    		$$invalidate(8, fifthSetup = true);

    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(11, graph = true);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(8, fifthSetup = false);
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    		$$invalidate(11, graph = true);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, graph = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SaudiArabia> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SaudiArabia", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		graph,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(12, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(13, marginSides = $$props.marginSides);
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(6, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(7, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(8, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(9, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(10, seventhSetup = $$props.seventhSetup);
    		if ("graph" in $$props) $$invalidate(11, graph = $$props.graph);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		graph,
    		distanceBLines,
    		marginSides,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup
    	];
    }

    class SaudiArabia extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SaudiArabia",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<SaudiArabia> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<SaudiArabia> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<SaudiArabia> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<SaudiArabia> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<SaudiArabia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<SaudiArabia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<SaudiArabia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<SaudiArabia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<SaudiArabia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<SaudiArabia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<SaudiArabia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<SaudiArabia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/India.svelte generated by Svelte v3.23.0 */

    const file$b = "src/specifics/India.svelte";

    // (88:0) {#if firstSetup}
    function create_if_block_44(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$b, 88, 1, 1619);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$b, 89, 1, 1680);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_44.name,
    		type: "if",
    		source: "(88:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (92:0) {#if secondSetup}
    function create_if_block_43(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 92, 1, 1746);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 93, 1, 1806);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_43.name,
    		type: "if",
    		source: "(92:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (96:0) {#if thirdSetup}
    function create_if_block_42(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 96, 1, 1889);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 97, 1, 1950);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_42.name,
    		type: "if",
    		source: "(96:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (100:0) {#if fourthSetup}
    function create_if_block_41(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 100, 1, 2035);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 101, 1, 2095);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_41.name,
    		type: "if",
    		source: "(100:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (104:0) {#if fifthSetup}
    function create_if_block_40(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 104, 1, 2178);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 105, 1, 2238);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_40.name,
    		type: "if",
    		source: "(104:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (108:0) {#if sixthSetup}
    function create_if_block_39(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 108, 1, 2322);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 109, 1, 2384);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[23], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[21], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_39.name,
    		type: "if",
    		source: "(108:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (112:0) {#if seventhSetup}
    function create_if_block_38(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 112, 1, 2469);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 113, 1, 2530);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeighthSetup*/ ctx[24], false, false, false),
    					listen_dev(div1, "click", /*togglesixthSetup*/ ctx[22], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_38.name,
    		type: "if",
    		source: "(112:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (116:0) {#if eighthSetup}
    function create_if_block_37(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 116, 1, 2614);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 117, 1, 2675);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleninethSetup*/ ctx[25], false, false, false),
    					listen_dev(div1, "click", /*toggleseventhSetup*/ ctx[23], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_37.name,
    		type: "if",
    		source: "(116:0) {#if eighthSetup}",
    		ctx
    	});

    	return block;
    }

    // (120:0) {#if ninethSetup}
    function create_if_block_36$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$b, 120, 1, 2761);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$b, 121, 1, 2821);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggletenthSetup*/ ctx[26], false, false, false),
    					listen_dev(div1, "click", /*toggleeighthSetup*/ ctx[24], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_36$1.name,
    		type: "if",
    		source: "(120:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (124:0) {#if tenthSetup}
    function create_if_block_35$1(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$b, 124, 1, 2905);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$b, 125, 1, 2947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleninethSetup*/ ctx[25], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_35$1.name,
    		type: "if",
    		source: "(124:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (136:0) {#if firstSetup}
    function create_if_block_34$1(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Some argue that climate action in the west is useless if large countries such as China and India don't take action [as if the west is suddenly powerless without eastern leadership].");
    			attr_dev(div, "class", "pagetext svelte-uekkdd");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$b, 136, 1, 3139);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_34$1.name,
    		type: "if",
    		source: "(136:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (143:0) {#if secondSetup}
    function create_if_block_33$1(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("India is a large polluter with around 3% of global emissions in 2016, but a substantial part of these emissions are not due to Indian consumption. In 2016, 8,16% of India’s emissions went into making goods for consumption in other countries.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "2016";
    			attr_dev(div0, "class", "pagetext svelte-uekkdd");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$b, 143, 1, 3418);
    			attr_dev(div1, "class", "horizontalLine left line4 svelte-uekkdd");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$b, 147, 1, 3732);
    			attr_dev(div2, "class", "text years left line4 svelte-uekkdd");
    			add_location(div2, file$b, 148, 1, 3800);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_33$1.name,
    		type: "if",
    		source: "(143:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (153:0) {:else}
    function create_else_block_5$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line4 svelte-uekkdd");
    			add_location(div, file$b, 153, 1, 3879);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_5$1.name,
    		type: "else",
    		source: "(153:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (152:0) {#if firstSetup}
    function create_if_block_32$1(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_32$1.name,
    		type: "if",
    		source: "(152:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (157:0) {#if thirdSetup}
    function create_if_block_31$1(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("This means that The Netherlands, for example, could cut it’s emissions drastically — without changing their consumption — by stopping all polluting production in The Netherlands and instead importing more from India. That way putting the responsibilty for their consumption on India while “fulfilling” the Paris Agreement.");
    			attr_dev(div, "class", "pagetext svelte-uekkdd");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$b, 157, 1, 3940);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_31$1.name,
    		type: "if",
    		source: "(157:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (164:0) {#if fourthSetup}
    function create_if_block_30$2(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;
    	let t4;
    	let div3;
    	let t5;
    	let div4;
    	let t7;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("India is a former British colony, and has been independant since 1947. Following it's independance and up till the mid 60's, was an era of \"golden age\" Hindi cinema.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "1947";
    			t4 = space();
    			div3 = element("div");
    			t5 = space();
    			div4 = element("div");
    			div4.textContent = "1965";
    			t7 = space();
    			img = element("img");
    			attr_dev(div0, "class", "pagetext svelte-uekkdd");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$b, 164, 1, 4372);
    			attr_dev(div1, "class", "horizontalLine left line73 svelte-uekkdd");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$b, 168, 1, 4658);
    			attr_dev(div2, "class", "text years left line73 svelte-uekkdd");
    			add_location(div2, file$b, 169, 1, 4727);
    			attr_dev(div3, "class", "horizontalLine left line55 svelte-uekkdd");
    			set_style(div3, "width", "100%");
    			add_location(div3, file$b, 172, 1, 4778);
    			attr_dev(div4, "class", "text years left line55 svelte-uekkdd");
    			add_location(div4, file$b, 173, 1, 4847);
    			set_style(img, "position", "absolute");
    			set_style(img, "width", "50%");
    			set_style(img, "right", "5%");
    			set_style(img, "top", "23%");
    			if (img.src !== (img_src_value = "https://i0.wp.com/notsocommon.in/wp-content/uploads/2020/03/EDx-TkVUwAANds0.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$b, 175, 1, 4897);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_30$2.name,
    		type: "if",
    		source: "(164:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (184:2) {:else}
    function create_else_block_4$1(ctx) {
    	let div0;
    	let t;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "line left line73 svelte-uekkdd");
    			add_location(div0, file$b, 184, 3, 5142);
    			attr_dev(div1, "class", "line left line55 svelte-uekkdd");
    			add_location(div1, file$b, 185, 3, 5182);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4$1.name,
    		type: "else",
    		source: "(184:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (183:2) {#if firstSetup}
    function create_if_block_29$2(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_29$2.name,
    		type: "if",
    		source: "(183:2) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (181:1) {#if secondSetup}
    function create_if_block_28$2(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_28$2.name,
    		type: "if",
    		source: "(181:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (179:0) {#if thirdSetup}
    function create_if_block_27$3(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27$3.name,
    		type: "if",
    		source: "(179:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (199:3) {:else}
    function create_else_block_3$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			img = element("img");
    			attr_dev(div0, "class", "line left line39 svelte-uekkdd");
    			add_location(div0, file$b, 199, 4, 5360);
    			attr_dev(img, "class", "smallPic");
    			if (img.src !== (img_src_value = "https://i0.wp.com/notsocommon.in/wp-content/uploads/2020/03/EDx-TkVUwAANds0.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$b, 202, 5, 5506);
    			attr_dev(div1, "class", "prePics");
    			set_style(div1, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 2.45)");
    			set_style(div1, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div1, file$b, 201, 4, 5402);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$1.name,
    		type: "else",
    		source: "(199:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (198:3) {#if secondSetup}
    function create_if_block_26$3(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26$3.name,
    		type: "if",
    		source: "(198:3) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (196:2) {#if firstSetup}
    function create_if_block_25$3(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25$3.name,
    		type: "if",
    		source: "(196:2) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (194:1) {#if thirdSetup}
    function create_if_block_24$5(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$5.name,
    		type: "if",
    		source: "(194:1) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (192:0) {#if fourthSetup}
    function create_if_block_23$5(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$5.name,
    		type: "if",
    		source: "(192:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (211:0) {#if fifthSetup}
    function create_if_block_22$5(ctx) {
    	let div0;
    	let t0;
    	let span;
    	let t2;
    	let t3;
    	let div1;
    	let t4;
    	let div2;
    	let t6;
    	let img;
    	let img_src_value;
    	let t7;
    	let iframe;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Within the film-industry was born a strong film-music industry with composers such as R. D. Burman, who wrote the song 'Tere Mere Beech Mein' for the 1981 movie ");
    			span = element("span");
    			span.textContent = "एक दूजे के लिए";
    			t2 = text(" (Ek Duuje Ke Liye or We Are Made For Each Other).");
    			t3 = space();
    			div1 = element("div");
    			t4 = space();
    			div2 = element("div");
    			div2.textContent = "1981";
    			t6 = space();
    			img = element("img");
    			t7 = space();
    			iframe = element("iframe");
    			set_style(span, "font-family", "arita");
    			add_location(span, file$b, 212, 163, 5899);
    			attr_dev(div0, "class", "pagetext svelte-uekkdd");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$b, 211, 1, 5676);
    			attr_dev(div1, "class", "horizontalLine left line39 svelte-uekkdd");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$b, 215, 1, 6099);
    			attr_dev(div2, "class", "text years left line39 svelte-uekkdd");
    			add_location(div2, file$b, 216, 1, 6168);
    			set_style(img, "position", "absolute");
    			set_style(img, "width", "50%");
    			set_style(img, "right", "5%");
    			set_style(img, "top", "13%");
    			if (img.src !== (img_src_value = "https://img.discogs.com/IdGiJdzyzV1OmyHIee7xGaDLD8E=/fit-in/600x605/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/R-4305932-1523806860-6780.png.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$b, 218, 1, 6217);
    			attr_dev(iframe, "class", "videoSmall");
    			set_style(iframe, "top", "15%");
    			set_style(iframe, "left", "20vw");
    			if (iframe.src !== (iframe_src_value = "https://www.youtube.com/embed/oGKDBhdxn6c")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
    			iframe.allowFullscreen = true;
    			add_location(iframe, file$b, 219, 1, 6464);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, span);
    			append_dev(div0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, iframe, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(iframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$5.name,
    		type: "if",
    		source: "(211:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (232:4) {:else}
    function create_else_block_2$3(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			img = element("img");
    			attr_dev(div0, "class", "line left line39 svelte-uekkdd");
    			add_location(div0, file$b, 232, 5, 6851);
    			attr_dev(img, "class", "smallPic");
    			if (img.src !== (img_src_value = "https://img.discogs.com/IdGiJdzyzV1OmyHIee7xGaDLD8E=/fit-in/600x605/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/R-4305932-1523806860-6780.png.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$b, 235, 6, 7001);
    			attr_dev(div1, "class", "prePics");
    			set_style(div1, "bottom", "calc(" + /*distanceBLines*/ ctx[15] + " * 3.8)");
    			set_style(div1, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div1, file$b, 234, 5, 6894);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$3.name,
    		type: "else",
    		source: "(232:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (231:4) {#if secondSetup}
    function create_if_block_21$5(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$5.name,
    		type: "if",
    		source: "(231:4) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (229:3) {#if firstSetup}
    function create_if_block_20$5(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$5.name,
    		type: "if",
    		source: "(229:3) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (227:2) {#if thirdSetup}
    function create_if_block_19$5(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$5.name,
    		type: "if",
    		source: "(227:2) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (225:1) {#if fourthSetup}
    function create_if_block_18$6(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$6.name,
    		type: "if",
    		source: "(225:1) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (223:0) {#if fifthSetup}
    function create_if_block_17$7(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$7.name,
    		type: "if",
    		source: "(223:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (245:0) {#if sixthSetup}
    function create_if_block_16$7(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;
    	let t4;
    	let img;
    	let img_src_value;
    	let t5;
    	let iframe;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("A few years later, in 1990, Asha Puthli published the album Hari Om, named after one of the songs of the album, an Indian rendition of Madonna's Like a Prayer. Another song on the album is an Indian version of Smooth Criminal, called Chipko Chipko.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "1990";
    			t4 = space();
    			img = element("img");
    			t5 = space();
    			iframe = element("iframe");
    			attr_dev(div0, "class", "pagetext svelte-uekkdd");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$b, 245, 1, 7275);
    			attr_dev(div1, "class", "horizontalLine left line30 svelte-uekkdd");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$b, 249, 1, 7601);
    			attr_dev(div2, "class", "text years left line30 svelte-uekkdd");
    			add_location(div2, file$b, 250, 1, 7670);
    			set_style(img, "position", "absolute");
    			set_style(img, "width", "50%");
    			set_style(img, "left", "15%");
    			set_style(img, "top", "2%");
    			if (img.src !== (img_src_value = "./imgs/hariOm.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$b, 252, 1, 7719);
    			attr_dev(iframe, "class", "videoSmall");
    			set_style(iframe, "bottom", "5%");
    			set_style(iframe, "right", "7vw");
    			if (iframe.src !== (iframe_src_value = "https://www.youtube.com/embed/tCKA55M32GE")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
    			iframe.allowFullscreen = true;
    			add_location(iframe, file$b, 253, 1, 7810);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, iframe, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(iframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$7.name,
    		type: "if",
    		source: "(245:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (267:4) {:else}
    function create_else_block_1$4(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line30 svelte-uekkdd");
    			add_location(div, file$b, 267, 5, 8200);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$4.name,
    		type: "else",
    		source: "(267:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (266:4) {#if thirdSetup}
    function create_if_block_15$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$7.name,
    		type: "if",
    		source: "(266:4) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (264:3) {#if secondSetup}
    function create_if_block_14$7(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$7.name,
    		type: "if",
    		source: "(264:3) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (262:2) {#if firstSetup}
    function create_if_block_13$8(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$8.name,
    		type: "if",
    		source: "(262:2) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (260:1) {#if fourthSetup}
    function create_if_block_12$8(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$8.name,
    		type: "if",
    		source: "(260:1) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (258:0) {#if fifthSetup}
    function create_if_block_11$8(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$8.name,
    		type: "if",
    		source: "(258:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (277:0) {#if seventhSetup}
    function create_if_block_10$8(ctx) {
    	let div0;
    	let t0;
    	let span;
    	let t2;
    	let t3;
    	let div1;
    	let t4;
    	let div2;
    	let t6;
    	let div3;
    	let t7;
    	let div4;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("The meaning of Chipko is to hug, embrace or stick to. ");
    			span = element("span");
    			span.textContent = "चिपको आंदोलन";
    			t2 = text(", The Chipko Andalon, is a eco-feminist movement formed in 1974 by a group of women, lead by Gaura Devi. Following a tradition of the Bishnois in 1700's, they saved 2.500 trees in Uttarakhand from lodgers by embracing them and influenced a treecutting ban in 1980.");
    			t3 = space();
    			div1 = element("div");
    			t4 = space();
    			div2 = element("div");
    			div2.textContent = "1974";
    			t6 = space();
    			div3 = element("div");
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "1980";
    			set_style(span, "font-family", "arita");
    			add_location(span, file$b, 278, 56, 8420);
    			attr_dev(div0, "class", "pagetext svelte-uekkdd");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$b, 277, 1, 8304);
    			attr_dev(div1, "class", "horizontalLine left line46 svelte-uekkdd");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$b, 281, 1, 9172);
    			attr_dev(div2, "class", "text years left line46 svelte-uekkdd");
    			add_location(div2, file$b, 282, 1, 9241);
    			attr_dev(div3, "class", "horizontalLine left line40 svelte-uekkdd");
    			set_style(div3, "width", "100%");
    			add_location(div3, file$b, 283, 1, 9289);
    			attr_dev(div4, "class", "text years left line40 svelte-uekkdd");
    			add_location(div4, file$b, 284, 1, 9358);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, span);
    			append_dev(div0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div4, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$8.name,
    		type: "if",
    		source: "(277:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (299:5) {:else}
    function create_else_block$5(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			img = element("img");
    			attr_dev(div0, "class", "line left line46 svelte-uekkdd");
    			add_location(div0, file$b, 299, 5, 9599);
    			attr_dev(div1, "class", "line left line40 svelte-uekkdd");
    			add_location(div1, file$b, 300, 5, 9641);
    			attr_dev(img, "class", "smallPic");
    			if (img.src !== (img_src_value = "./imgs/hariOm.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$b, 303, 6, 9791);
    			attr_dev(div2, "class", "prePics");
    			set_style(div2, "bottom", "calc(" + /*distanceBLines*/ ctx[15] + " * 2.8)");
    			set_style(div2, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div2, file$b, 302, 5, 9684);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(299:5) {:else}",
    		ctx
    	});

    	return block;
    }

    // (298:5) {#if fourthSetup}
    function create_if_block_9$9(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$9.name,
    		type: "if",
    		source: "(298:5) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (296:4) {#if thirdSetup}
    function create_if_block_8$9(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$9.name,
    		type: "if",
    		source: "(296:4) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (294:3) {#if secondSetup}
    function create_if_block_7$9(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$9.name,
    		type: "if",
    		source: "(294:3) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (292:2) {#if firstSetup}
    function create_if_block_6$9(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$9.name,
    		type: "if",
    		source: "(292:2) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (290:1) {#if fifthSetup}
    function create_if_block_5$9(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$9.name,
    		type: "if",
    		source: "(290:1) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (288:0) {#if sixthSetup}
    function create_if_block_4$9(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$9.name,
    		type: "if",
    		source: "(288:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (315:0) {#if eightthText}
    function create_if_block_3$9(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div2;
    	let div1;
    	let span;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("India will see an increase of 18 hot days in the next two decades, 39 the two decades after that and 102 in the two decades leading up to 2100 if business is left \"as usual\".");
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "365 days";
    			attr_dev(div0, "class", "pagetext svelte-uekkdd");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$b, 315, 1, 9923);
    			attr_dev(span, "class", "tempnumber left text svelte-uekkdd");
    			set_style(span, "z-index", "99999999");
    			add_location(span, file$b, 321, 3, 10241);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$b, 320, 2, 10203);
    			attr_dev(div2, "class", "tempMeterCountry svelte-uekkdd");
    			add_location(div2, file$b, 319, 1, 10170);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$9.name,
    		type: "if",
    		source: "(315:0) {#if eightthText}",
    		ctx
    	});

    	return block;
    }

    // (337:0) {#if eighthSetup}
    function create_if_block_2$9(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 103.811";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "18 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2020";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200.5 365 900.5 347 900.5 347 1200.5 365 1200.5");
    			add_location(polygon, file$b, 338, 2, 10495);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$b, 337, 1, 10386);
    			attr_dev(span0, "class", "deathToll text narrow svelte-uekkdd");
    			add_location(span0, file$b, 342, 38, 10661);
    			attr_dev(div0, "class", "temperature firstMeter svelte-uekkdd");
    			add_location(div0, file$b, 342, 2, 10625);
    			attr_dev(span1, "class", "tempnumber rightFirst text svelte-uekkdd");
    			add_location(span1, file$b, 343, 36, 10771);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$b, 343, 2, 10737);
    			attr_dev(div2, "class", "tempMeterCountry svelte-uekkdd");
    			add_location(div2, file$b, 341, 1, 10592);
    			attr_dev(div3, "class", "text years right line0 now svelte-uekkdd");
    			add_location(div3, file$b, 346, 1, 10843);
    			attr_dev(div4, "class", "horizontalLine full right line0 svelte-uekkdd");
    			add_location(div4, file$b, 347, 1, 10895);
    			attr_dev(div5, "class", "text years right line20 svelte-uekkdd");
    			add_location(div5, file$b, 348, 1, 10948);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-uekkdd");
    			add_location(div6, file$b, 349, 1, 10997);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(337:0) {#if eighthSetup}",
    		ctx
    	});

    	return block;
    }

    // (352:0) {#if ninethSetup}
    function create_if_block_1$9(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 252.086";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "39 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2060";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			div5.textContent = "2040";
    			t9 = space();
    			div6 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200.5 365 900.5 365 600.5 326 600.5 326 900.5 347 900.5 347 1200.5 365 1200.5");
    			add_location(polygon, file$b, 353, 2, 11184);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$b, 352, 1, 11075);
    			attr_dev(span0, "class", "deathToll text svelte-uekkdd");
    			add_location(span0, file$b, 357, 36, 11378);
    			attr_dev(div0, "class", "temperature midMeter svelte-uekkdd");
    			add_location(div0, file$b, 357, 2, 11344);
    			attr_dev(span1, "class", "tempnumber rightMid text svelte-uekkdd");
    			add_location(span1, file$b, 358, 36, 11481);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$b, 358, 2, 11447);
    			attr_dev(div2, "class", "tempMeterCountry svelte-uekkdd");
    			add_location(div2, file$b, 356, 1, 11311);
    			attr_dev(div3, "class", "text years right line40 svelte-uekkdd");
    			add_location(div3, file$b, 361, 1, 11551);
    			attr_dev(div4, "class", "horizontalLine full right line40 svelte-uekkdd");
    			add_location(div4, file$b, 362, 1, 11600);
    			attr_dev(div5, "class", "text years right line20 svelte-uekkdd");
    			add_location(div5, file$b, 363, 1, 11654);
    			attr_dev(div6, "class", "horizontalLine full right line20 svelte-uekkdd");
    			add_location(div6, file$b, 364, 1, 11703);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(352:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (367:0) {#if tenthSetup}
    function create_if_block$9(ctx) {
    	let svg;
    	let polygon;
    	let t0;
    	let div2;
    	let div0;
    	let span0;
    	let t2;
    	let div1;
    	let span1;
    	let t4;
    	let div3;
    	let t6;
    	let div4;
    	let t7;
    	let div5;
    	let t8;
    	let div6;
    	let t10;
    	let div7;
    	let t11;
    	let div8;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 617.903";
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "102 days";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "2080";
    			t6 = space();
    			div4 = element("div");
    			t7 = space();
    			div5 = element("div");
    			t8 = space();
    			div6 = element("div");
    			div6.textContent = "2100";
    			t10 = space();
    			div7 = element("div");
    			t11 = space();
    			div8 = element("div");
    			attr_dev(polygon, "class", "cls-1");
    			attr_dev(polygon, "points", "365 1200.5 365 900.5 365 600.5 365 300.5 365 0.5 263 0.5 263 300.5 326 600.5 326 900.5 347 900.5 347 1200.5 365 1200.5");
    			add_location(polygon, file$b, 368, 2, 11889);
    			attr_dev(svg, "class", "hotDays");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$b, 367, 1, 11780);
    			attr_dev(span0, "class", "deathToll text svelte-uekkdd");
    			add_location(span0, file$b, 372, 36, 12119);
    			attr_dev(div0, "class", "temperature endMeter svelte-uekkdd");
    			add_location(div0, file$b, 372, 2, 12085);
    			attr_dev(span1, "class", "tempnumber rightEnd text svelte-uekkdd");
    			add_location(span1, file$b, 373, 36, 12222);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$b, 373, 2, 12188);
    			attr_dev(div2, "class", "tempMeterCountry svelte-uekkdd");
    			add_location(div2, file$b, 371, 1, 12052);
    			attr_dev(div3, "class", "text years right line60 svelte-uekkdd");
    			add_location(div3, file$b, 376, 1, 12293);
    			attr_dev(div4, "class", "horizontalLine full right line60 svelte-uekkdd");
    			add_location(div4, file$b, 377, 1, 12342);
    			attr_dev(div5, "class", "line right line60 svelte-uekkdd");
    			add_location(div5, file$b, 378, 1, 12396);
    			attr_dev(div6, "class", "text years right line80 svelte-uekkdd");
    			add_location(div6, file$b, 379, 1, 12435);
    			attr_dev(div7, "class", "horizontalLine full right line80 svelte-uekkdd");
    			add_location(div7, file$b, 380, 1, 12484);
    			attr_dev(div8, "class", "line right line80 svelte-uekkdd");
    			add_location(div8, file$b, 381, 1, 12538);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div8, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(367:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let div0;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let t22;
    	let t23;
    	let t24;
    	let t25;
    	let t26;
    	let t27;
    	let t28;
    	let div1;
    	let t29;
    	let div3;
    	let div2;
    	let t30;
    	let div5;
    	let div4;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_44(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_43(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[6] && create_if_block_42(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[7] && create_if_block_41(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[8] && create_if_block_40(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[9] && create_if_block_39(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[10] && create_if_block_38(ctx);
    	let if_block7 = /*eighthSetup*/ ctx[11] && create_if_block_37(ctx);
    	let if_block8 = /*ninethSetup*/ ctx[13] && create_if_block_36$1(ctx);
    	let if_block9 = /*tenthSetup*/ ctx[14] && create_if_block_35$1(ctx);
    	let if_block10 = /*firstSetup*/ ctx[4] && create_if_block_34$1(ctx);
    	let if_block11 = /*secondSetup*/ ctx[5] && create_if_block_33$1(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_32$1;
    		return create_else_block_5$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block12 = current_block_type(ctx);
    	let if_block13 = /*thirdSetup*/ ctx[6] && create_if_block_31$1(ctx);
    	let if_block14 = /*fourthSetup*/ ctx[7] && create_if_block_30$2(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_27$3;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_28$2;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_29$2;
    		return create_else_block_4$1;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block15 = current_block_type_1(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_23$5;
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_24$5;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_25$3;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_26$3;
    		return create_else_block_3$1;
    	}

    	let current_block_type_2 = select_block_type_2(ctx);
    	let if_block16 = current_block_type_2(ctx);
    	let if_block17 = /*fifthSetup*/ ctx[8] && create_if_block_22$5(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (/*fifthSetup*/ ctx[8]) return create_if_block_17$7;
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_18$6;
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_19$5;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_20$5;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_21$5;
    		return create_else_block_2$3;
    	}

    	let current_block_type_3 = select_block_type_3(ctx);
    	let if_block18 = current_block_type_3(ctx);
    	let if_block19 = /*sixthSetup*/ ctx[9] && create_if_block_16$7(ctx);

    	function select_block_type_4(ctx, dirty) {
    		if (/*fifthSetup*/ ctx[8]) return create_if_block_11$8;
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_12$8;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_13$8;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_14$7;
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_15$7;
    		return create_else_block_1$4;
    	}

    	let current_block_type_4 = select_block_type_4(ctx);
    	let if_block20 = current_block_type_4(ctx);
    	let if_block21 = /*seventhSetup*/ ctx[10] && create_if_block_10$8(ctx);

    	function select_block_type_5(ctx, dirty) {
    		if (/*sixthSetup*/ ctx[9]) return create_if_block_4$9;
    		if (/*fifthSetup*/ ctx[8]) return create_if_block_5$9;
    		if (/*firstSetup*/ ctx[4]) return create_if_block_6$9;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_7$9;
    		if (/*thirdSetup*/ ctx[6]) return create_if_block_8$9;
    		if (/*fourthSetup*/ ctx[7]) return create_if_block_9$9;
    		return create_else_block$5;
    	}

    	let current_block_type_5 = select_block_type_5(ctx);
    	let if_block22 = current_block_type_5(ctx);
    	let if_block23 = /*eightthText*/ ctx[12] && create_if_block_3$9(ctx);
    	let if_block24 = /*eighthSetup*/ ctx[11] && create_if_block_2$9(ctx);
    	let if_block25 = /*ninethSetup*/ ctx[13] && create_if_block_1$9(ctx);
    	let if_block26 = /*tenthSetup*/ ctx[14] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			if (if_block7) if_block7.c();
    			t7 = space();
    			if (if_block8) if_block8.c();
    			t8 = space();
    			if (if_block9) if_block9.c();
    			t9 = space();
    			div0 = element("div");
    			t10 = text(/*pagetitleText*/ ctx[0]);
    			t11 = space();
    			if (if_block10) if_block10.c();
    			t12 = space();
    			if (if_block11) if_block11.c();
    			t13 = space();
    			if_block12.c();
    			t14 = space();
    			if (if_block13) if_block13.c();
    			t15 = space();
    			if (if_block14) if_block14.c();
    			t16 = space();
    			if_block15.c();
    			t17 = space();
    			if_block16.c();
    			t18 = space();
    			if (if_block17) if_block17.c();
    			t19 = space();
    			if_block18.c();
    			t20 = space();
    			if (if_block19) if_block19.c();
    			t21 = space();
    			if_block20.c();
    			t22 = space();
    			if (if_block21) if_block21.c();
    			t23 = space();
    			if_block22.c();
    			t24 = space();
    			if (if_block23) if_block23.c();
    			t25 = space();
    			if (if_block24) if_block24.c();
    			t26 = space();
    			if (if_block25) if_block25.c();
    			t27 = space();
    			if (if_block26) if_block26.c();
    			t28 = space();
    			div1 = element("div");
    			t29 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t30 = space();
    			div5 = element("div");
    			div4 = element("div");
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$b, 134, 0, 3039);
    			attr_dev(div1, "class", "horizontalLine left svelte-uekkdd");
    			set_style(div1, "width", "100%");
    			set_style(div1, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 8)");
    			set_style(div1, "border-top", "1px solid blue");
    			add_location(div1, file$b, 390, 0, 12589);
    			attr_dev(div2, "class", "bottomLineText text svelte-uekkdd");
    			set_style(div2, "text-align", "right");
    			add_location(div2, file$b, 395, 2, 12761);
    			attr_dev(div3, "class", "text bottomLine svelte-uekkdd");
    			add_location(div3, file$b, 394, 0, 12729);
    			attr_dev(div4, "class", "progressline");
    			set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div4, file$b, 403, 1, 13302);
    			attr_dev(div5, "class", "activedotnew activedotFan");
    			add_location(div5, file$b, 402, 0, 13261);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t10);
    			insert_dev(target, t11, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if_block12.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if_block15.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if_block16.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if_block18.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			if (if_block19) if_block19.m(target, anchor);
    			insert_dev(target, t21, anchor);
    			if_block20.m(target, anchor);
    			insert_dev(target, t22, anchor);
    			if (if_block21) if_block21.m(target, anchor);
    			insert_dev(target, t23, anchor);
    			if_block22.m(target, anchor);
    			insert_dev(target, t24, anchor);
    			if (if_block23) if_block23.m(target, anchor);
    			insert_dev(target, t25, anchor);
    			if (if_block24) if_block24.m(target, anchor);
    			insert_dev(target, t26, anchor);
    			if (if_block25) if_block25.m(target, anchor);
    			insert_dev(target, t27, anchor);
    			if (if_block26) if_block26.m(target, anchor);
    			insert_dev(target, t28, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t29, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			insert_dev(target, t30, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_44(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_43(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_42(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_41(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_40(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_39(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_38(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*eighthSetup*/ ctx[11]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_37(ctx);
    					if_block7.c();
    					if_block7.m(t7.parentNode, t7);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*ninethSetup*/ ctx[13]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_36$1(ctx);
    					if_block8.c();
    					if_block8.m(t8.parentNode, t8);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*tenthSetup*/ ctx[14]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_35$1(ctx);
    					if_block9.c();
    					if_block9.m(t9.parentNode, t9);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t10, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_34$1(ctx);
    					if_block10.c();
    					if_block10.m(t12.parentNode, t12);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_33$1(ctx);
    					if_block11.c();
    					if_block11.m(t13.parentNode, t13);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block12.d(1);
    				if_block12 = current_block_type(ctx);

    				if (if_block12) {
    					if_block12.c();
    					if_block12.m(t14.parentNode, t14);
    				}
    			}

    			if (/*thirdSetup*/ ctx[6]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_31$1(ctx);
    					if_block13.c();
    					if_block13.m(t15.parentNode, t15);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*fourthSetup*/ ctx[7]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_30$2(ctx);
    					if_block14.c();
    					if_block14.m(t16.parentNode, t16);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
    				if_block15.d(1);
    				if_block15 = current_block_type_1(ctx);

    				if (if_block15) {
    					if_block15.c();
    					if_block15.m(t17.parentNode, t17);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block16) {
    				if_block16.p(ctx, dirty);
    			} else {
    				if_block16.d(1);
    				if_block16 = current_block_type_2(ctx);

    				if (if_block16) {
    					if_block16.c();
    					if_block16.m(t18.parentNode, t18);
    				}
    			}

    			if (/*fifthSetup*/ ctx[8]) {
    				if (if_block17) {
    					if_block17.p(ctx, dirty);
    				} else {
    					if_block17 = create_if_block_22$5(ctx);
    					if_block17.c();
    					if_block17.m(t19.parentNode, t19);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (current_block_type_3 === (current_block_type_3 = select_block_type_3(ctx)) && if_block18) {
    				if_block18.p(ctx, dirty);
    			} else {
    				if_block18.d(1);
    				if_block18 = current_block_type_3(ctx);

    				if (if_block18) {
    					if_block18.c();
    					if_block18.m(t20.parentNode, t20);
    				}
    			}

    			if (/*sixthSetup*/ ctx[9]) {
    				if (if_block19) {
    					if_block19.p(ctx, dirty);
    				} else {
    					if_block19 = create_if_block_16$7(ctx);
    					if_block19.c();
    					if_block19.m(t21.parentNode, t21);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (current_block_type_4 !== (current_block_type_4 = select_block_type_4(ctx))) {
    				if_block20.d(1);
    				if_block20 = current_block_type_4(ctx);

    				if (if_block20) {
    					if_block20.c();
    					if_block20.m(t22.parentNode, t22);
    				}
    			}

    			if (/*seventhSetup*/ ctx[10]) {
    				if (if_block21) {
    					if_block21.p(ctx, dirty);
    				} else {
    					if_block21 = create_if_block_10$8(ctx);
    					if_block21.c();
    					if_block21.m(t23.parentNode, t23);
    				}
    			} else if (if_block21) {
    				if_block21.d(1);
    				if_block21 = null;
    			}

    			if (current_block_type_5 === (current_block_type_5 = select_block_type_5(ctx)) && if_block22) {
    				if_block22.p(ctx, dirty);
    			} else {
    				if_block22.d(1);
    				if_block22 = current_block_type_5(ctx);

    				if (if_block22) {
    					if_block22.c();
    					if_block22.m(t24.parentNode, t24);
    				}
    			}

    			if (/*eightthText*/ ctx[12]) {
    				if (if_block23) {
    					if_block23.p(ctx, dirty);
    				} else {
    					if_block23 = create_if_block_3$9(ctx);
    					if_block23.c();
    					if_block23.m(t25.parentNode, t25);
    				}
    			} else if (if_block23) {
    				if_block23.d(1);
    				if_block23 = null;
    			}

    			if (/*eighthSetup*/ ctx[11]) {
    				if (if_block24) ; else {
    					if_block24 = create_if_block_2$9(ctx);
    					if_block24.c();
    					if_block24.m(t26.parentNode, t26);
    				}
    			} else if (if_block24) {
    				if_block24.d(1);
    				if_block24 = null;
    			}

    			if (/*ninethSetup*/ ctx[13]) {
    				if (if_block25) ; else {
    					if_block25 = create_if_block_1$9(ctx);
    					if_block25.c();
    					if_block25.m(t27.parentNode, t27);
    				}
    			} else if (if_block25) {
    				if_block25.d(1);
    				if_block25 = null;
    			}

    			if (/*tenthSetup*/ ctx[14]) {
    				if (if_block26) ; else {
    					if_block26 = create_if_block$9(ctx);
    					if_block26.c();
    					if_block26.m(t28.parentNode, t28);
    				}
    			} else if (if_block26) {
    				if_block26.d(1);
    				if_block26 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t11);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t13);
    			if_block12.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t16);
    			if_block15.d(detaching);
    			if (detaching) detach_dev(t17);
    			if_block16.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t19);
    			if_block18.d(detaching);
    			if (detaching) detach_dev(t20);
    			if (if_block19) if_block19.d(detaching);
    			if (detaching) detach_dev(t21);
    			if_block20.d(detaching);
    			if (detaching) detach_dev(t22);
    			if (if_block21) if_block21.d(detaching);
    			if (detaching) detach_dev(t23);
    			if_block22.d(detaching);
    			if (detaching) detach_dev(t24);
    			if (if_block23) if_block23.d(detaching);
    			if (detaching) detach_dev(t25);
    			if (if_block24) if_block24.d(detaching);
    			if (detaching) detach_dev(t26);
    			if (if_block25) if_block25.d(detaching);
    			if (detaching) detach_dev(t27);
    			if (if_block26) if_block26.d(detaching);
    			if (detaching) detach_dev(t28);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t29);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t30);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let eighthSetup = false;
    	let eightthText = false;
    	let ninethSetup = false;
    	let tenthSetup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, thirdSetup = true);
    		$$invalidate(7, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(6, thirdSetup = false);
    		$$invalidate(7, fourthSetup = true);
    		$$invalidate(8, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(7, fourthSetup = false);
    		$$invalidate(8, fifthSetup = true);
    		$$invalidate(9, sixthSetup = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(8, fifthSetup = false);
    		$$invalidate(9, sixthSetup = true);
    		$$invalidate(10, seventhSetup = false);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(9, sixthSetup = false);
    		$$invalidate(10, seventhSetup = true);
    		$$invalidate(11, eighthSetup = false);
    		$$invalidate(12, eightthText = false);
    	};

    	const toggleeighthSetup = () => {
    		$$invalidate(10, seventhSetup = false);
    		$$invalidate(11, eighthSetup = true);
    		$$invalidate(13, ninethSetup = false);
    		$$invalidate(12, eightthText = true);
    	};

    	const toggleninethSetup = () => {
    		$$invalidate(11, eighthSetup = false);
    		$$invalidate(13, ninethSetup = true);
    		$$invalidate(14, tenthSetup = false);
    		$$invalidate(12, eightthText = true);
    	};

    	const toggletenthSetup = () => {
    		$$invalidate(13, ninethSetup = false);
    		$$invalidate(14, tenthSetup = true);
    		$$invalidate(12, eightthText = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<India> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("India", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eighthSetup,
    		eightthText,
    		ninethSetup,
    		tenthSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(15, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(16, marginSides = $$props.marginSides);
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(6, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(7, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(8, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(9, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(10, seventhSetup = $$props.seventhSetup);
    		if ("eighthSetup" in $$props) $$invalidate(11, eighthSetup = $$props.eighthSetup);
    		if ("eightthText" in $$props) $$invalidate(12, eightthText = $$props.eightthText);
    		if ("ninethSetup" in $$props) $$invalidate(13, ninethSetup = $$props.ninethSetup);
    		if ("tenthSetup" in $$props) $$invalidate(14, tenthSetup = $$props.tenthSetup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eighthSetup,
    		eightthText,
    		ninethSetup,
    		tenthSetup,
    		distanceBLines,
    		marginSides,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup
    	];
    }

    class India extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "India",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<India> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<India> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<India> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<India> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<India>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<India>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<India>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<India>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<India>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<India>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<India>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<India>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/Cambodia.svelte generated by Svelte v3.23.0 */

    const file$c = "src/specifics/Cambodia.svelte";

    // (88:0) {#if firstSetup}
    function create_if_block_28$3(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$c, 88, 1, 1682);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$c, 89, 1, 1743);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_28$3.name,
    		type: "if",
    		source: "(88:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (92:0) {#if secondSetup}
    function create_if_block_27$4(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$c, 92, 1, 1809);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$c, 93, 1, 1869);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27$4.name,
    		type: "if",
    		source: "(92:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (96:0) {#if thirdSetup}
    function create_if_block_26$4(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$c, 96, 1, 1952);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$c, 97, 1, 2013);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26$4.name,
    		type: "if",
    		source: "(96:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (100:0) {#if fourthSetup}
    function create_if_block_25$4(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$c, 100, 1, 2098);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$c, 101, 1, 2158);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25$4.name,
    		type: "if",
    		source: "(100:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (104:0) {#if fifthSetup}
    function create_if_block_24$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$c, 104, 1, 2241);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$c, 105, 1, 2301);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$6.name,
    		type: "if",
    		source: "(104:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (108:0) {#if sixthSetup}
    function create_if_block_23$6(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$c, 108, 1, 2385);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$c, 109, 1, 2427);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglefifthSetup*/ ctx[21], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$6.name,
    		type: "if",
    		source: "(108:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (120:0) {#if firstSetup}
    function create_if_block_22$6(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let img1;
    	let img1_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("South-west of South Korea (not directly) is Cambodia, a former french colony which gained independance in 1953.");
    			t1 = space();
    			img0 = element("img");
    			t2 = space();
    			img1 = element("img");
    			attr_dev(div, "class", "pagetext svelte-1099edi");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$c, 120, 1, 2618);
    			set_style(img0, "position", "absolute");
    			set_style(img0, "height", "20vw");
    			set_style(img0, "right", "5%");
    			set_style(img0, "bottom", "10%");
    			if (img0.src !== (img0_src_value = "https://cdn1.i-scmp.com/sites/default/files/styles/1200x800/public/images/methode/2017/08/17/4b764522-818f-11e7-a767-bc310e55dd10_1280x720_145203.JPG?itok=-KNK72jk")) attr_dev(img0, "src", img0_src_value);
    			add_location(img0, file$c, 124, 1, 2808);
    			set_style(img1, "position", "absolute");
    			set_style(img1, "width", "25%");
    			set_style(img1, "left", "13%");
    			set_style(img1, "top", "0%");
    			if (img1.src !== (img1_src_value = "https://i.pinimg.com/564x/e2/95/98/e29598f213c862f21bf9e9b02d1a2587.jpg")) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$c, 125, 1, 3051);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img0, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, img1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(img1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$6.name,
    		type: "if",
    		source: "(120:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (130:0) {:else}
    function create_else_block_2$4(ctx) {
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t;
    	let div1;
    	let img1;
    	let img1_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			img0 = element("img");
    			t = space();
    			div1 = element("div");
    			img1 = element("img");
    			attr_dev(img0, "class", "smallPic");
    			if (img0.src !== (img0_src_value = "https://i.pinimg.com/564x/e2/95/98/e29598f213c862f21bf9e9b02d1a2587.jpg")) attr_dev(img0, "src", img0_src_value);
    			add_location(img0, file$c, 131, 2, 3326);
    			attr_dev(div0, "class", "prePics");
    			set_style(div0, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 0)");
    			set_style(div0, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div0, file$c, 130, 1, 3228);
    			attr_dev(img1, "class", "smallPic");
    			if (img1.src !== (img1_src_value = "https://cdn1.i-scmp.com/sites/default/files/styles/1200x800/public/images/methode/2017/08/17/4b764522-818f-11e7-a767-bc310e55dd10_1280x720_145203.JPG?itok=-KNK72jk")) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$c, 134, 2, 3538);
    			attr_dev(div1, "class", "prePics");
    			set_style(div1, "bottom", "calc(" + /*distanceBLines*/ ctx[15] + " * .5)");
    			set_style(div1, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div1, file$c, 133, 1, 3436);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, img0);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$4.name,
    		type: "else",
    		source: "(130:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (129:0) {#if firstSetup}
    function create_if_block_21$6(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$6.name,
    		type: "if",
    		source: "(129:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (140:0) {#if secondSetup}
    function create_if_block_20$6(ctx) {
    	let div0;
    	let t0;
    	let span0;
    	let t2;
    	let span1;
    	let t4;
    	let t5;
    	let div1;
    	let t6;
    	let div2;
    	let t8;
    	let img0;
    	let img0_src_value;
    	let t9;
    	let img1;
    	let img1_src_value;
    	let t10;
    	let img2;
    	let img2_src_value;
    	let t11;
    	let img3;
    	let img3_src_value;
    	let t12;
    	let img4;
    	let img4_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("In the years following Cambodia's independance, Cambodia's music and film industry took off. Influenced by the west, rock music became popular with stars such as ");
    			span0 = element("span");
    			span0.textContent = "រស់ សេរីសុទ្ធា";
    			t2 = text(", Ros Sereysothea, and ");
    			span1 = element("span");
    			span1.textContent = "ស៊ីន ស៊ីសាមុត";
    			t4 = text(", Sinn Sisamouth.");
    			t5 = space();
    			div1 = element("div");
    			t6 = space();
    			div2 = element("div");
    			div2.textContent = "1960";
    			t8 = space();
    			img0 = element("img");
    			t9 = space();
    			img1 = element("img");
    			t10 = space();
    			img2 = element("img");
    			t11 = space();
    			img3 = element("img");
    			t12 = space();
    			img4 = element("img");
    			set_style(span0, "font-family", "arita");
    			add_location(span0, file$c, 141, 164, 3990);
    			set_style(span1, "font-family", "arita");
    			add_location(span1, file$c, 141, 252, 4078);
    			attr_dev(div0, "class", "pagetext svelte-1099edi");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$c, 140, 1, 3766);
    			attr_dev(div1, "class", "horizontalLine left line60 svelte-1099edi");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$c, 144, 1, 4170);
    			attr_dev(div2, "class", "text years left line60 svelte-1099edi");
    			add_location(div2, file$c, 145, 1, 4239);
    			set_style(img0, "position", "absolute");
    			set_style(img0, "width", "25%");
    			set_style(img0, "left", "22%");
    			set_style(img0, "top", "30%");
    			if (img0.src !== (img0_src_value = "https://scontent-amt2-1.xx.fbcdn.net/v/t1.0-9/57407288_2227425770672919_6336639571349995520_o.jpg?_nc_cat=107&_nc_sid=8bfeb9&_nc_ohc=FD7UY8v07GYAX9lFo_d&_nc_ht=scontent-amt2-1.xx&oh=09b60e207ed1900b280264d73ed4ce73&oe=5F0CD97E")) attr_dev(img0, "src", img0_src_value);
    			add_location(img0, file$c, 147, 1, 4289);
    			set_style(img1, "position", "absolute");
    			set_style(img1, "width", "25%");
    			set_style(img1, "right", "2%");
    			set_style(img1, "bottom", "3%");
    			if (img1.src !== (img1_src_value = "https://i.pinimg.com/564x/e5/ea/52/e5ea5295c095e1f907de4df7c8c95c5d.jpg")) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$c, 148, 1, 4590);
    			set_style(img2, "position", "absolute");
    			set_style(img2, "width", "25%");
    			set_style(img2, "right", "23%");
    			set_style(img2, "bottom", "1%");
    			if (img2.src !== (img2_src_value = "https://i.pinimg.com/originals/21/4e/2f/214e2fb4fb9a47147dac718f17ef4eef.jpg")) attr_dev(img2, "src", img2_src_value);
    			add_location(img2, file$c, 149, 1, 4738);
    			set_style(img3, "position", "absolute");
    			set_style(img3, "width", "25%");
    			set_style(img3, "left", "2%");
    			set_style(img3, "bottom", "35%");
    			if (img3.src !== (img3_src_value = "https://scontent-ams4-1.xx.fbcdn.net/v/t1.0-9/87072599_2806093836139440_6201700379038580736_o.jpg?_nc_cat=103&_nc_sid=8bfeb9&_nc_ohc=BKrGBjxdU_kAX9qajCI&_nc_ht=scontent-ams4-1.xx&oh=685a5f80c9b372c0250c745daf98254f&oe=5F0B1374")) attr_dev(img3, "src", img3_src_value);
    			add_location(img3, file$c, 150, 1, 4892);
    			set_style(img4, "position", "absolute");
    			set_style(img4, "width", "25%");
    			set_style(img4, "left", "15%");
    			set_style(img4, "top", "5%");
    			if (img4.src !== (img4_src_value = "http://img-196.uamulet.com/uauctions/AU383/2020/1/23/U18089286371538349680210271.jpg")) attr_dev(img4, "src", img4_src_value);
    			add_location(img4, file$c, 151, 1, 5195);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, span0);
    			append_dev(div0, t2);
    			append_dev(div0, span1);
    			append_dev(div0, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, img0, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, img1, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, img2, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, img3, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, img4, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(img0);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(img1);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(img2);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(img3);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(img4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$6.name,
    		type: "if",
    		source: "(140:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (158:1) {:else}
    function create_else_block_1$5(ctx) {
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let img1;
    	let img1_src_value;
    	let t1;
    	let img2;
    	let img2_src_value;
    	let t2;
    	let div1;
    	let img3;
    	let img3_src_value;
    	let t3;
    	let img4;
    	let img4_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			img0 = element("img");
    			t0 = space();
    			img1 = element("img");
    			t1 = space();
    			img2 = element("img");
    			t2 = space();
    			div1 = element("div");
    			img3 = element("img");
    			t3 = space();
    			img4 = element("img");
    			attr_dev(img0, "class", "smallPic");
    			if (img0.src !== (img0_src_value = "http://img-196.uamulet.com/uauctions/AU383/2020/1/23/U18089286371538349680210271.jpg")) attr_dev(img0, "src", img0_src_value);
    			add_location(img0, file$c, 159, 3, 5516);
    			attr_dev(img1, "class", "smallPic");
    			if (img1.src !== (img1_src_value = "https://i.pinimg.com/564x/e5/ea/52/e5ea5295c095e1f907de4df7c8c95c5d.jpg")) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$c, 160, 3, 5633);
    			attr_dev(img2, "class", "smallPic");
    			if (img2.src !== (img2_src_value = "https://i.pinimg.com/originals/21/4e/2f/214e2fb4fb9a47147dac718f17ef4eef.jpg")) attr_dev(img2, "src", img2_src_value);
    			add_location(img2, file$c, 161, 3, 5737);
    			attr_dev(div0, "class", "prePics");
    			set_style(div0, "top", "calc(" + /*distanceBLines*/ ctx[15] + " * 2.75)");
    			set_style(div0, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div0, file$c, 158, 2, 5414);
    			attr_dev(img3, "class", "smallPic");
    			if (img3.src !== (img3_src_value = "https://scontent-amt2-1.xx.fbcdn.net/v/t1.0-9/57407288_2227425770672919_6336639571349995520_o.jpg?_nc_cat=107&_nc_sid=8bfeb9&_nc_ohc=FD7UY8v07GYAX9lFo_d&_nc_ht=scontent-amt2-1.xx&oh=09b60e207ed1900b280264d73ed4ce73&oe=5F0CD97E")) attr_dev(img3, "src", img3_src_value);
    			add_location(img3, file$c, 164, 3, 5959);
    			attr_dev(img4, "class", "smallPic");
    			if (img4.src !== (img4_src_value = "https://scontent-ams4-1.xx.fbcdn.net/v/t1.0-9/87072599_2806093836139440_6201700379038580736_o.jpg?_nc_cat=103&_nc_sid=8bfeb9&_nc_ohc=BKrGBjxdU_kAX9qajCI&_nc_ht=scontent-ams4-1.xx&oh=685a5f80c9b372c0250c745daf98254f&oe=5F0B1374")) attr_dev(img4, "src", img4_src_value);
    			add_location(img4, file$c, 165, 3, 6218);
    			attr_dev(div1, "class", "prePics");
    			set_style(div1, "bottom", "calc(" + /*distanceBLines*/ ctx[15] + " * 4.25)");
    			set_style(div1, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div1, file$c, 163, 2, 5854);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, img0);
    			append_dev(div0, t0);
    			append_dev(div0, img1);
    			append_dev(div0, t1);
    			append_dev(div0, img2);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img3);
    			append_dev(div1, t3);
    			append_dev(div1, img4);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$5.name,
    		type: "else",
    		source: "(158:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (157:1) {#if secondSetup}
    function create_if_block_19$6(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$6.name,
    		type: "if",
    		source: "(157:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (155:0) {#if firstSetup}
    function create_if_block_18$7(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$7.name,
    		type: "if",
    		source: "(155:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (172:0) {#if seventyFive}
    function create_if_block_17$8(ctx) {
    	let div0;
    	let t0;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "1975";
    			attr_dev(div0, "class", "horizontalLine left line45 svelte-1099edi");
    			set_style(div0, "width", "100%");
    			add_location(div0, file$c, 172, 1, 6517);
    			attr_dev(div1, "class", "text years left line45 svelte-1099edi");
    			add_location(div1, file$c, 173, 1, 6586);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$8.name,
    		type: "if",
    		source: "(172:0) {#if seventyFive}",
    		ctx
    	});

    	return block;
    }

    // (178:0) {#if thirdSetup}
    function create_if_block_16$8(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;
    	let t4;
    	let div3;
    	let t5;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("They both disappeared in the 70's. Following the Vietnam War (and subsequent bombings of Cambodia by the U.S. army), the Khmer Rouge, a nationalist communist party, took over and in the years 1975 to 1979 committed a mass genocide killing nearly two million Cambodian people.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "1979";
    			t4 = space();
    			div3 = element("div");
    			t5 = space();
    			img = element("img");
    			attr_dev(div0, "class", "pagetext svelte-1099edi");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$c, 178, 1, 6659);
    			attr_dev(div1, "class", "horizontalLine left line41 svelte-1099edi");
    			set_style(div1, "width", "100%");
    			add_location(div1, file$c, 182, 1, 7101);
    			attr_dev(div2, "class", "text years left line41 svelte-1099edi");
    			add_location(div2, file$c, 183, 1, 7170);
    			attr_dev(div3, "class", "line left line41 svelte-1099edi");
    			add_location(div3, file$c, 184, 1, 7218);
    			set_style(img, "position", "absolute");
    			set_style(img, "height", "40vw");
    			set_style(img, "right", "5%");
    			set_style(img, "top", "12%");
    			if (img.src !== (img_src_value = "https://i1.trekearth.com/photos/86613/victims_of_khmer_rouge.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$c, 186, 1, 7257);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$8.name,
    		type: "if",
    		source: "(178:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (196:2) {:else}
    function create_else_block$6(ctx) {
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div2;
    	let div1;
    	let span;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "365 days";
    			attr_dev(img, "class", "smallPic");
    			if (img.src !== (img_src_value = "https://i1.trekearth.com/photos/86613/victims_of_khmer_rouge.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$c, 197, 4, 7596);
    			attr_dev(div0, "class", "prePics");
    			set_style(div0, "bottom", "calc(" + /*distanceBLines*/ ctx[15] + " * 3.9)");
    			set_style(div0, "left", "calc(" + /*marginSides*/ ctx[16] + " + 5px)");
    			add_location(div0, file$c, 196, 3, 7491);
    			attr_dev(span, "class", "tempnumber left text svelte-1099edi");
    			set_style(span, "z-index", "99999999");
    			add_location(span, file$c, 202, 5, 7779);
    			attr_dev(div1, "class", "temperature infotext");
    			add_location(div1, file$c, 201, 4, 7739);
    			attr_dev(div2, "class", "tempMeterCountry svelte-1099edi");
    			add_location(div2, file$c, 200, 3, 7704);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, img);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(196:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (195:2) {#if thirdSetup}
    function create_if_block_15$8(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$8.name,
    		type: "if",
    		source: "(195:2) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (193:1) {#if secondSetup}
    function create_if_block_14$8(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$8.name,
    		type: "if",
    		source: "(193:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (191:0) {#if firstSetup}
    function create_if_block_13$9(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$9.name,
    		type: "if",
    		source: "(191:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (210:0) {#if fourthLines}
    function create_if_block_12$9(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line left line41 svelte-1099edi");
    			add_location(div, file$c, 210, 1, 7919);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$9.name,
    		type: "if",
    		source: "(210:0) {#if fourthLines}",
    		ctx
    	});

    	return block;
    }

    // (216:0) {#if fourthSetup}
    function create_if_block_11$9(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let svg;
    	let polyline;
    	let t2;
    	let div3;
    	let div1;
    	let span0;
    	let t4;
    	let div2;
    	let span1;
    	let t6;
    	let div4;
    	let t8;
    	let div5;
    	let t9;
    	let div6;
    	let t11;
    	let div7;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Cambodia is one of the countries of the world that will feel the most extreme heat increase in the next decades due to man-made climate change. In the next two decades Cambodia will endure 34 additional extremely hot days resulting in around 2.414 deaths per year.");
    			t1 = space();
    			svg = svg_element("svg");
    			polyline = svg_element("polyline");
    			t2 = space();
    			div3 = element("div");
    			div1 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 2.414";
    			t4 = space();
    			div2 = element("div");
    			span1 = element("span");
    			span1.textContent = "34 days";
    			t6 = space();
    			div4 = element("div");
    			div4.textContent = "2020";
    			t8 = space();
    			div5 = element("div");
    			t9 = space();
    			div6 = element("div");
    			div6.textContent = "2040";
    			t11 = space();
    			div7 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-1099edi");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$c, 216, 1, 7984);
    			attr_dev(polyline, "class", "cls-1 svelte-1099edi");
    			attr_dev(polyline, "points", "331 900 331 1200 365 1200 365 900");
    			add_location(polyline, file$c, 221, 2, 8483);
    			attr_dev(svg, "class", "hotDays svelte-1099edi");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$c, 220, 1, 8374);
    			attr_dev(span0, "class", "deathToll text narrow svelte-1099edi");
    			add_location(span0, file$c, 224, 38, 8630);
    			attr_dev(div1, "class", "temperature firstMeter svelte-1099edi");
    			add_location(div1, file$c, 224, 2, 8594);
    			attr_dev(span1, "class", "tempnumber rightFirst text svelte-1099edi");
    			add_location(span1, file$c, 225, 36, 8738);
    			attr_dev(div2, "class", "temperature infotext");
    			add_location(div2, file$c, 225, 2, 8704);
    			attr_dev(div3, "class", "tempMeterCountry svelte-1099edi");
    			add_location(div3, file$c, 223, 1, 8561);
    			attr_dev(div4, "class", "text years right line0 now svelte-1099edi");
    			add_location(div4, file$c, 228, 1, 8810);
    			attr_dev(div5, "class", "horizontalLine full right line0 svelte-1099edi");
    			add_location(div5, file$c, 229, 1, 8862);
    			attr_dev(div6, "class", "text years right line20 svelte-1099edi");
    			add_location(div6, file$c, 230, 1, 8915);
    			attr_dev(div7, "class", "horizontalLine full right line20 svelte-1099edi");
    			add_location(div7, file$c, 231, 1, 8964);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polyline);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, span0);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, span1);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div7, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$9.name,
    		type: "if",
    		source: "(216:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (235:0) {#if fourthSticky}
    function create_if_block_10$9(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$9.name,
    		type: "if",
    		source: "(235:0) {#if fourthSticky}",
    		ctx
    	});

    	return block;
    }

    // (240:0) {#if fifthSetup}
    function create_if_block_9$a(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let svg;
    	let polyline;
    	let t2;
    	let div3;
    	let div1;
    	let span0;
    	let t4;
    	let div2;
    	let span1;
    	let t6;
    	let div4;
    	let t8;
    	let div5;
    	let t9;
    	let div6;
    	let t11;
    	let div7;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("In the next two decades the additional extremely hot days will have risen to 65 per year with a consequent additional 5.510 deaths per year.");
    			t1 = space();
    			svg = svg_element("svg");
    			polyline = svg_element("polyline");
    			t2 = space();
    			div3 = element("div");
    			div1 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 5.510";
    			t4 = space();
    			div2 = element("div");
    			span1 = element("span");
    			span1.textContent = "65 days";
    			t6 = space();
    			div4 = element("div");
    			div4.textContent = "2060";
    			t8 = space();
    			div5 = element("div");
    			t9 = space();
    			div6 = element("div");
    			div6.textContent = "2040";
    			t11 = space();
    			div7 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-1099edi");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$c, 240, 1, 9152);
    			attr_dev(polyline, "class", "cls-1 svelte-1099edi");
    			attr_dev(polyline, "points", "300 600 300 900 331 900 331 1200 365 1200 365 900 365 600");
    			add_location(polyline, file$c, 245, 2, 9474);
    			attr_dev(svg, "class", "hotDays svelte-1099edi");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$c, 244, 1, 9365);
    			attr_dev(span0, "class", "deathToll text svelte-1099edi");
    			add_location(span0, file$c, 248, 36, 9643);
    			attr_dev(div1, "class", "temperature midMeter svelte-1099edi");
    			add_location(div1, file$c, 248, 2, 9609);
    			attr_dev(span1, "class", "tempnumber rightMid text svelte-1099edi");
    			add_location(span1, file$c, 249, 36, 9744);
    			attr_dev(div2, "class", "temperature infotext");
    			add_location(div2, file$c, 249, 2, 9710);
    			attr_dev(div3, "class", "tempMeterCountry svelte-1099edi");
    			add_location(div3, file$c, 247, 1, 9576);
    			attr_dev(div4, "class", "text years right line40 svelte-1099edi");
    			add_location(div4, file$c, 252, 1, 9814);
    			attr_dev(div5, "class", "horizontalLine full right line40 svelte-1099edi");
    			add_location(div5, file$c, 253, 1, 9863);
    			attr_dev(div6, "class", "text years right line20 svelte-1099edi");
    			add_location(div6, file$c, 254, 1, 9917);
    			attr_dev(div7, "class", "horizontalLine full right line20 svelte-1099edi");
    			add_location(div7, file$c, 255, 1, 9966);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polyline);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, span0);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, span1);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div7, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$a.name,
    		type: "if",
    		source: "(240:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (259:0) {#if fifthSticky}
    function create_if_block_8$a(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$a.name,
    		type: "if",
    		source: "(259:0) {#if fifthSticky}",
    		ctx
    	});

    	return block;
    }

    // (263:0) {#if sixthSetup}
    function create_if_block_7$a(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let svg;
    	let polygon;
    	let t2;
    	let div3;
    	let div1;
    	let span0;
    	let t4;
    	let div2;
    	let span1;
    	let t6;
    	let div4;
    	let t8;
    	let div5;
    	let t9;
    	let div6;
    	let t10;
    	let div7;
    	let t12;
    	let div8;
    	let t13;
    	let div9;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("And the last decades of the century will have additional 181 extremely hot days a year. Meaning ca. half of the year will be dangerously hot, killing around 15.957 people per year.");
    			t1 = space();
    			svg = svg_element("svg");
    			polygon = svg_element("polygon");
    			t2 = space();
    			div3 = element("div");
    			div1 = element("div");
    			span0 = element("span");
    			span0.textContent = "✝︎ 15.957";
    			t4 = space();
    			div2 = element("div");
    			span1 = element("span");
    			span1.textContent = "181 days";
    			t6 = space();
    			div4 = element("div");
    			div4.textContent = "2080";
    			t8 = space();
    			div5 = element("div");
    			t9 = space();
    			div6 = element("div");
    			t10 = space();
    			div7 = element("div");
    			div7.textContent = "2100";
    			t12 = space();
    			div8 = element("div");
    			t13 = space();
    			div9 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-1099edi");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$c, 263, 1, 10115);
    			attr_dev(polygon, "class", "cls-1 svelte-1099edi");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 365 300 365 0 184 0 184 300 300 600 300 900 331 900 331 1200 365 1200");
    			add_location(polygon, file$c, 268, 2, 10477);
    			attr_dev(svg, "class", "hotDays svelte-1099edi");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$c, 267, 1, 10368);
    			attr_dev(span0, "class", "deathToll text svelte-1099edi");
    			add_location(span0, file$c, 271, 36, 10682);
    			attr_dev(div1, "class", "temperature endMeter svelte-1099edi");
    			add_location(div1, file$c, 271, 2, 10648);
    			attr_dev(span1, "class", "tempnumber rightEnd text svelte-1099edi");
    			add_location(span1, file$c, 272, 36, 10784);
    			attr_dev(div2, "class", "temperature infotext");
    			add_location(div2, file$c, 272, 2, 10750);
    			attr_dev(div3, "class", "tempMeterCountry svelte-1099edi");
    			add_location(div3, file$c, 270, 1, 10615);
    			attr_dev(div4, "class", "text years right line60 svelte-1099edi");
    			add_location(div4, file$c, 275, 1, 10855);
    			attr_dev(div5, "class", "horizontalLine full right line60 svelte-1099edi");
    			add_location(div5, file$c, 276, 1, 10904);
    			attr_dev(div6, "class", "line right line60 svelte-1099edi");
    			add_location(div6, file$c, 277, 1, 10958);
    			attr_dev(div7, "class", "text years right line80 svelte-1099edi");
    			add_location(div7, file$c, 278, 1, 10997);
    			attr_dev(div8, "class", "horizontalLine full right line80 svelte-1099edi");
    			add_location(div8, file$c, 279, 1, 11046);
    			attr_dev(div9, "class", "line right line80 svelte-1099edi");
    			add_location(div9, file$c, 280, 1, 11100);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, svg, anchor);
    			append_dev(svg, polygon);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, span0);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, span1);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div9, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div9);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$a.name,
    		type: "if",
    		source: "(263:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (296:0) {#if firstSetup}
    function create_if_block_6$a(ctx) {
    	let div0;
    	let t0;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "1953";
    			attr_dev(div0, "class", "horizontalLine left line67 svelte-1099edi");
    			set_style(div0, "width", "100%");
    			add_location(div0, file$c, 296, 1, 11175);
    			attr_dev(div1, "class", "text years left line67 svelte-1099edi");
    			add_location(div1, file$c, 297, 1, 11244);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$a.name,
    		type: "if",
    		source: "(296:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (302:0) {#if secondLines}
    function create_if_block_5$a(ctx) {
    	let div0;
    	let t;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "line left line60 svelte-1099edi");
    			add_location(div0, file$c, 302, 1, 11355);
    			attr_dev(div1, "class", "line left line45 svelte-1099edi");
    			add_location(div1, file$c, 303, 1, 11393);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$a.name,
    		type: "if",
    		source: "(302:0) {#if secondLines}",
    		ctx
    	});

    	return block;
    }

    // (312:3) {#if secondSetup}
    function create_if_block_4$a(ctx) {
    	let a0;
    	let t1;
    	let a1;

    	const block = {
    		c: function create() {
    			a0 = element("a");
    			a0.textContent = "[more ↗︎]";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "[more ↗︎]";
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "href", "https://vimeo.com/ondemand/dtif");
    			attr_dev(a0, "class", "svelte-1099edi");
    			add_location(a0, file$c, 311, 21, 11575);
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "href", "https://www.imdb.com/title/tt0069287/");
    			attr_dev(a1, "class", "svelte-1099edi");
    			add_location(a1, file$c, 311, 106, 11660);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$a.name,
    		type: "if",
    		source: "(312:3) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (314:3) {#if thirdSetup}
    function create_if_block_3$a(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://www.cambodiatribunal.org/history/cambodian-history/khmer-rouge-history/");
    			attr_dev(a, "class", "svelte-1099edi");
    			add_location(a, file$c, 313, 20, 11780);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$a.name,
    		type: "if",
    		source: "(314:3) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (315:3) {#if fourthSetup}
    function create_if_block_2$a(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "http://www.impactlab.org/map/#usmeas=absolute&usyear=1981-2010&gmeas=absolute&gyear=2020-2039&tab=global&grcp=rcp85&gprob=0.5&gvar=tasmax-over-95F");
    			attr_dev(a, "class", "svelte-1099edi");
    			add_location(a, file$c, 315, 4, 11943);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(315:3) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (318:3) {#if fifthSetup}
    function create_if_block_1$a(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "http://www.impactlab.org/map/#usmeas=absolute&usyear=1981-2010&gmeas=absolute&gyear=2020-2039&tab=global&grcp=rcp85&gprob=0.5&gvar=tasmax-over-95F");
    			attr_dev(a, "class", "svelte-1099edi");
    			add_location(a, file$c, 318, 4, 12176);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(318:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (321:3) {#if sixthSetup}
    function create_if_block$a(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "http://www.impactlab.org/map/#usmeas=absolute&usyear=1981-2010&gmeas=absolute&gyear=2020-2039&tab=global&grcp=rcp85&gprob=0.5&gvar=tasmax-over-95F");
    			attr_dev(a, "class", "svelte-1099edi");
    			add_location(a, file$c, 321, 4, 12409);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(321:3) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let div0;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let div1;
    	let t22;
    	let t23;
    	let div3;
    	let div2;
    	let t24;
    	let t25;
    	let t26;
    	let t27;
    	let t28;
    	let div5;
    	let div4;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_28$3(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_27$4(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[7] && create_if_block_26$4(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[9] && create_if_block_25$4(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[11] && create_if_block_24$6(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[12] && create_if_block_23$6(ctx);
    	let if_block6 = /*firstSetup*/ ctx[4] && create_if_block_22$6(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_21$6;
    		return create_else_block_2$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block7 = current_block_type(ctx);
    	let if_block8 = /*secondSetup*/ ctx[5] && create_if_block_20$6(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_18$7;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_19$6;
    		return create_else_block_1$5;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block9 = current_block_type_1(ctx);
    	let if_block10 = /*seventyFive*/ ctx[8] && create_if_block_17$8(ctx);
    	let if_block11 = /*thirdSetup*/ ctx[7] && create_if_block_16$8(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block_13$9;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_14$8;
    		if (/*thirdSetup*/ ctx[7]) return create_if_block_15$8;
    		return create_else_block$6;
    	}

    	let current_block_type_2 = select_block_type_2(ctx);
    	let if_block12 = current_block_type_2(ctx);
    	let if_block13 = /*fourthLines*/ ctx[10] && create_if_block_12$9(ctx);
    	let if_block14 = /*fourthSetup*/ ctx[9] && create_if_block_11$9(ctx);
    	let if_block15 = /*fourthSticky*/ ctx[13] && create_if_block_10$9(ctx);
    	let if_block16 = /*fifthSetup*/ ctx[11] && create_if_block_9$a(ctx);
    	let if_block17 = /*fifthSticky*/ ctx[14] && create_if_block_8$a(ctx);
    	let if_block18 = /*sixthSetup*/ ctx[12] && create_if_block_7$a(ctx);
    	let if_block19 = /*firstSetup*/ ctx[4] && create_if_block_6$a(ctx);
    	let if_block20 = /*secondLines*/ ctx[6] && create_if_block_5$a(ctx);
    	let if_block21 = /*secondSetup*/ ctx[5] && create_if_block_4$a(ctx);
    	let if_block22 = /*thirdSetup*/ ctx[7] && create_if_block_3$a(ctx);
    	let if_block23 = /*fourthSetup*/ ctx[9] && create_if_block_2$a(ctx);
    	let if_block24 = /*fifthSetup*/ ctx[11] && create_if_block_1$a(ctx);
    	let if_block25 = /*sixthSetup*/ ctx[12] && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			div0 = element("div");
    			t6 = text(/*pagetitleText*/ ctx[0]);
    			t7 = space();
    			if (if_block6) if_block6.c();
    			t8 = space();
    			if_block7.c();
    			t9 = space();
    			if (if_block8) if_block8.c();
    			t10 = space();
    			if_block9.c();
    			t11 = space();
    			if (if_block10) if_block10.c();
    			t12 = space();
    			if (if_block11) if_block11.c();
    			t13 = space();
    			if_block12.c();
    			t14 = space();
    			if (if_block13) if_block13.c();
    			t15 = space();
    			if (if_block14) if_block14.c();
    			t16 = space();
    			if (if_block15) if_block15.c();
    			t17 = space();
    			if (if_block16) if_block16.c();
    			t18 = space();
    			if (if_block17) if_block17.c();
    			t19 = space();
    			if (if_block18) if_block18.c();
    			t20 = space();
    			if (if_block19) if_block19.c();
    			t21 = space();
    			div1 = element("div");
    			t22 = space();
    			if (if_block20) if_block20.c();
    			t23 = space();
    			div3 = element("div");
    			div2 = element("div");
    			if (if_block21) if_block21.c();
    			t24 = space();
    			if (if_block22) if_block22.c();
    			t25 = space();
    			if (if_block23) if_block23.c();
    			t26 = space();
    			if (if_block24) if_block24.c();
    			t27 = space();
    			if (if_block25) if_block25.c();
    			t28 = space();
    			div5 = element("div");
    			div4 = element("div");
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$c, 118, 0, 2518);
    			attr_dev(div1, "class", "line left line67 svelte-1099edi");
    			add_location(div1, file$c, 299, 0, 11298);
    			attr_dev(div2, "class", "bottomLineText text svelte-1099edi");
    			set_style(div2, "text-align", "right");
    			add_location(div2, file$c, 310, 2, 11493);
    			attr_dev(div3, "class", "text bottomLine svelte-1099edi");
    			add_location(div3, file$c, 309, 0, 11461);
    			attr_dev(div4, "class", "progressline");
    			set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div4, file$c, 328, 1, 12677);
    			attr_dev(div5, "class", "activedotnew activedotFan");
    			add_location(div5, file$c, 327, 0, 12636);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t6);
    			insert_dev(target, t7, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if_block7.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			if_block9.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if_block12.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if (if_block18) if_block18.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			if (if_block19) if_block19.m(target, anchor);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t22, anchor);
    			if (if_block20) if_block20.m(target, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			if (if_block21) if_block21.m(div2, null);
    			append_dev(div2, t24);
    			if (if_block22) if_block22.m(div2, null);
    			append_dev(div2, t25);
    			if (if_block23) if_block23.m(div2, null);
    			append_dev(div2, t26);
    			if (if_block24) if_block24.m(div2, null);
    			append_dev(div2, t27);
    			if (if_block25) if_block25.m(div2, null);
    			insert_dev(target, t28, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_28$3(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_27$4(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_26$4(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[9]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_25$4(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[11]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_24$6(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[12]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_23$6(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t6, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_22$6(ctx);
    					if_block6.c();
    					if_block6.m(t8.parentNode, t8);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block7) {
    				if_block7.p(ctx, dirty);
    			} else {
    				if_block7.d(1);
    				if_block7 = current_block_type(ctx);

    				if (if_block7) {
    					if_block7.c();
    					if_block7.m(t9.parentNode, t9);
    				}
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_20$6(ctx);
    					if_block8.c();
    					if_block8.m(t10.parentNode, t10);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block9) {
    				if_block9.p(ctx, dirty);
    			} else {
    				if_block9.d(1);
    				if_block9 = current_block_type_1(ctx);

    				if (if_block9) {
    					if_block9.c();
    					if_block9.m(t11.parentNode, t11);
    				}
    			}

    			if (/*seventyFive*/ ctx[8]) {
    				if (if_block10) ; else {
    					if_block10 = create_if_block_17$8(ctx);
    					if_block10.c();
    					if_block10.m(t12.parentNode, t12);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_16$8(ctx);
    					if_block11.c();
    					if_block11.m(t13.parentNode, t13);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block12) {
    				if_block12.p(ctx, dirty);
    			} else {
    				if_block12.d(1);
    				if_block12 = current_block_type_2(ctx);

    				if (if_block12) {
    					if_block12.c();
    					if_block12.m(t14.parentNode, t14);
    				}
    			}

    			if (/*fourthLines*/ ctx[10]) {
    				if (if_block13) ; else {
    					if_block13 = create_if_block_12$9(ctx);
    					if_block13.c();
    					if_block13.m(t15.parentNode, t15);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*fourthSetup*/ ctx[9]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_11$9(ctx);
    					if_block14.c();
    					if_block14.m(t16.parentNode, t16);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*fourthSticky*/ ctx[13]) {
    				if (if_block15) ; else {
    					if_block15 = create_if_block_10$9(ctx);
    					if_block15.c();
    					if_block15.m(t17.parentNode, t17);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (/*fifthSetup*/ ctx[11]) {
    				if (if_block16) {
    					if_block16.p(ctx, dirty);
    				} else {
    					if_block16 = create_if_block_9$a(ctx);
    					if_block16.c();
    					if_block16.m(t18.parentNode, t18);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*fifthSticky*/ ctx[14]) {
    				if (if_block17) ; else {
    					if_block17 = create_if_block_8$a(ctx);
    					if_block17.c();
    					if_block17.m(t19.parentNode, t19);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (/*sixthSetup*/ ctx[12]) {
    				if (if_block18) {
    					if_block18.p(ctx, dirty);
    				} else {
    					if_block18 = create_if_block_7$a(ctx);
    					if_block18.c();
    					if_block18.m(t20.parentNode, t20);
    				}
    			} else if (if_block18) {
    				if_block18.d(1);
    				if_block18 = null;
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block19) ; else {
    					if_block19 = create_if_block_6$a(ctx);
    					if_block19.c();
    					if_block19.m(t21.parentNode, t21);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (/*secondLines*/ ctx[6]) {
    				if (if_block20) ; else {
    					if_block20 = create_if_block_5$a(ctx);
    					if_block20.c();
    					if_block20.m(t23.parentNode, t23);
    				}
    			} else if (if_block20) {
    				if_block20.d(1);
    				if_block20 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block21) ; else {
    					if_block21 = create_if_block_4$a(ctx);
    					if_block21.c();
    					if_block21.m(div2, t24);
    				}
    			} else if (if_block21) {
    				if_block21.d(1);
    				if_block21 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block22) ; else {
    					if_block22 = create_if_block_3$a(ctx);
    					if_block22.c();
    					if_block22.m(div2, t25);
    				}
    			} else if (if_block22) {
    				if_block22.d(1);
    				if_block22 = null;
    			}

    			if (/*fourthSetup*/ ctx[9]) {
    				if (if_block23) ; else {
    					if_block23 = create_if_block_2$a(ctx);
    					if_block23.c();
    					if_block23.m(div2, t26);
    				}
    			} else if (if_block23) {
    				if_block23.d(1);
    				if_block23 = null;
    			}

    			if (/*fifthSetup*/ ctx[11]) {
    				if (if_block24) ; else {
    					if_block24 = create_if_block_1$a(ctx);
    					if_block24.c();
    					if_block24.m(div2, t27);
    				}
    			} else if (if_block24) {
    				if_block24.d(1);
    				if_block24 = null;
    			}

    			if (/*sixthSetup*/ ctx[12]) {
    				if (if_block25) ; else {
    					if_block25 = create_if_block$a(ctx);
    					if_block25.c();
    					if_block25.m(div2, null);
    				}
    			} else if (if_block25) {
    				if_block25.d(1);
    				if_block25 = null;
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t7);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t8);
    			if_block7.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t10);
    			if_block9.d(detaching);
    			if (detaching) detach_dev(t11);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t13);
    			if_block12.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t16);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t19);
    			if (if_block18) if_block18.d(detaching);
    			if (detaching) detach_dev(t20);
    			if (if_block19) if_block19.d(detaching);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t22);
    			if (if_block20) if_block20.d(detaching);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(div3);
    			if (if_block21) if_block21.d();
    			if (if_block22) if_block22.d();
    			if (if_block23) if_block23.d();
    			if (if_block24) if_block24.d();
    			if (if_block25) if_block25.d();
    			if (detaching) detach_dev(t28);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let secondLines = false;
    	let thirdSetup = false;
    	let seventyFive = false;
    	let fourthSetup = false;
    	let fourthText = false;
    	let fourthLines = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let fourthSticky = false;
    	let fifthSticky = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(8, seventyFive = false);
    		$$invalidate(6, secondLines = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, secondLines = true);
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, seventyFive = true);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, secondLines = true);
    		$$invalidate(7, thirdSetup = true);
    		$$invalidate(8, seventyFive = true);
    		$$invalidate(9, fourthSetup = false);
    		fourthText = false;
    		$$invalidate(10, fourthLines = false);
    		hotDays = false;
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, seventyFive = false);
    		$$invalidate(6, secondLines = true);
    		$$invalidate(9, fourthSetup = true);
    		fourthText = true;
    		$$invalidate(10, fourthLines = true);
    		$$invalidate(11, fifthSetup = false);
    		$$invalidate(13, fourthSticky = true);
    		$$invalidate(14, fifthSticky = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(6, secondLines = true);
    		$$invalidate(9, fourthSetup = false);
    		fourthText = true;
    		$$invalidate(10, fourthLines = true);
    		$$invalidate(11, fifthSetup = true);
    		$$invalidate(12, sixthSetup = false);
    		$$invalidate(13, fourthSticky = true);
    		$$invalidate(14, fifthSticky = true);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(6, secondLines = true);
    		fourthText = true;
    		$$invalidate(10, fourthLines = true);
    		$$invalidate(11, fifthSetup = false);
    		$$invalidate(12, sixthSetup = true);
    		$$invalidate(13, fourthSticky = true);
    		$$invalidate(14, fifthSticky = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cambodia> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Cambodia", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		secondLines,
    		thirdSetup,
    		seventyFive,
    		fourthSetup,
    		fourthText,
    		fourthLines,
    		fifthSetup,
    		sixthSetup,
    		fourthSticky,
    		fifthSticky,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(15, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(16, marginSides = $$props.marginSides);
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("secondLines" in $$props) $$invalidate(6, secondLines = $$props.secondLines);
    		if ("thirdSetup" in $$props) $$invalidate(7, thirdSetup = $$props.thirdSetup);
    		if ("seventyFive" in $$props) $$invalidate(8, seventyFive = $$props.seventyFive);
    		if ("fourthSetup" in $$props) $$invalidate(9, fourthSetup = $$props.fourthSetup);
    		if ("fourthText" in $$props) fourthText = $$props.fourthText;
    		if ("fourthLines" in $$props) $$invalidate(10, fourthLines = $$props.fourthLines);
    		if ("fifthSetup" in $$props) $$invalidate(11, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(12, sixthSetup = $$props.sixthSetup);
    		if ("fourthSticky" in $$props) $$invalidate(13, fourthSticky = $$props.fourthSticky);
    		if ("fifthSticky" in $$props) $$invalidate(14, fifthSticky = $$props.fifthSticky);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		secondLines,
    		thirdSetup,
    		seventyFive,
    		fourthSetup,
    		fourthLines,
    		fifthSetup,
    		sixthSetup,
    		fourthSticky,
    		fifthSticky,
    		distanceBLines,
    		marginSides,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup
    	];
    }

    class Cambodia extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cambodia",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<Cambodia> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<Cambodia> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<Cambodia> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<Cambodia> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<Cambodia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<Cambodia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Cambodia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Cambodia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<Cambodia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<Cambodia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<Cambodia>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<Cambodia>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/SouthKorea.svelte generated by Svelte v3.23.0 */

    const file$d = "src/specifics/SouthKorea.svelte";

    // (118:0) {#if firstSetup}
    function create_if_block_27$5(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$d, 118, 1, 2243);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[2]);
    			add_location(a, file$d, 119, 1, 2304);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[16], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 4) {
    				attr_dev(a, "href", /*next*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27$5.name,
    		type: "if",
    		source: "(118:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (122:0) {#if secondSetup}
    function create_if_block_26$5(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$d, 122, 1, 2370);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$d, 123, 1, 2430);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[17], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26$5.name,
    		type: "if",
    		source: "(122:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (126:0) {#if thirdSetup}
    function create_if_block_25$5(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$d, 126, 1, 2513);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$d, 127, 1, 2574);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[18], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25$5.name,
    		type: "if",
    		source: "(126:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (130:0) {#if fourthSetup}
    function create_if_block_24$7(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$d, 130, 1, 2659);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$d, 131, 1, 2719);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$7.name,
    		type: "if",
    		source: "(130:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (134:0) {#if fifthSetup}
    function create_if_block_23$7(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$d, 134, 1, 2802);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$d, 135, 1, 2862);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$7.name,
    		type: "if",
    		source: "(134:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (138:0) {#if sixthSetup}
    function create_if_block_22$7(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[3]);
    			add_location(a, file$d, 138, 1, 2946);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$d, 139, 1, 2988);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglefifthSetup*/ ctx[19], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 8) {
    				attr_dev(a, "href", /*prev*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$7.name,
    		type: "if",
    		source: "(138:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (153:0) {#if firstSetup}
    function create_if_block_21$7(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Heat is nothing new, and people have created multiple remedies to endure it.");
    			attr_dev(div, "class", "pagetext svelte-dn6cfl");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$d, 153, 1, 3372);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$7.name,
    		type: "if",
    		source: "(153:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (158:0) {#if secondSetup}
    function create_if_block_20$7(ctx) {
    	let div;
    	let t0;
    	let span;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("A Bamboo Wife is a cylinder woven out of bamboo that can be cuddled in warm weather in order to better allow air to access the surface of your body. This object is known throughout South-East Asia and in South-Korea is named ");
    			span = element("span");
    			span.textContent = "죽부인";
    			t2 = text(" (Jukbuin).");
    			set_style(span, "font-family", "arita_semibold");
    			add_location(span, file$d, 159, 228, 3838);
    			attr_dev(div, "class", "pagetext svelte-dn6cfl");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$d, 158, 1, 3550);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, span);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$7.name,
    		type: "if",
    		source: "(158:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (163:0) {#if secondPhoto}
    function create_if_block_19$7(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			set_style(img, "position", "absolute");
    			set_style(img, "width", "45%");
    			set_style(img, "left", "7%");
    			set_style(img, "top", "4%");
    			if (img.src !== (img_src_value = "https://limdongcheol.files.wordpress.com/2010/08/100159_0-87331700.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$d, 162, 17, 3934);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$7.name,
    		type: "if",
    		source: "(163:0) {#if secondPhoto}",
    		ctx
    	});

    	return block;
    }

    // (165:0) {#if thirdSetup}
    function create_if_block_18$8(ctx) {
    	let div;
    	let t0;
    	let span0;
    	let t2;
    	let span1;
    	let t4;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Another heat related tradition is connected to the phrase ");
    			span0 = element("span");
    			span0.textContent = "이열치열";
    			t2 = text(" (Iyeolchiyeol), which translates to \"fight fire with fire\" meaning to control body heat with heat. This is done by eating a warm chicken soup called ");
    			span1 = element("span");
    			span1.textContent = "호수 삼계탕";
    			t4 = text(" (Samgyetang) or visiting a hot sauna.");
    			set_style(span0, "font-family", "arita_semibold");
    			add_location(span0, file$d, 166, 61, 4221);
    			set_style(span1, "font-family", "arita_semibold");
    			add_location(span1, file$d, 166, 265, 4425);
    			attr_dev(div, "class", "pagetext svelte-dn6cfl");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div, file$d, 165, 1, 4100);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, span0);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(div, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$8.name,
    		type: "if",
    		source: "(165:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (170:0) {#if thirdPhoto}
    function create_if_block_17$9(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			set_style(img, "position", "absolute");
    			set_style(img, "width", "45%");
    			set_style(img, "right", "0%");
    			set_style(img, "bottom", "2%");
    			if (img.src !== (img_src_value = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Samgyetang.jpg/260px-Samgyetang.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$d, 170, 1, 4557);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$9.name,
    		type: "if",
    		source: "(170:0) {#if thirdPhoto}",
    		ctx
    	});

    	return block;
    }

    // (173:0) {#if fourthSetup}
    function create_if_block_16$9(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t4;
    	let div3;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("South Korea is conveniently located when it comes to future extreme heat increase. Following \"business as usual\", extremely hot days will not increase at all in South Korea for the next 20 years...");
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "2020";
    			t3 = space();
    			div2 = element("div");
    			t4 = space();
    			div3 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-dn6cfl");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$d, 173, 1, 4775);
    			attr_dev(div1, "class", "text years right line0 now svelte-dn6cfl");
    			add_location(div1, file$d, 176, 1, 5050);
    			attr_dev(div2, "class", "line right line0 svelte-dn6cfl");
    			add_location(div2, file$d, 177, 1, 5102);
    			attr_dev(div3, "class", "horizontalLine full right line0 svelte-dn6cfl");
    			add_location(div3, file$d, 178, 1, 5140);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$9.name,
    		type: "if",
    		source: "(173:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (181:0) {#if twentyfourty}
    function create_if_block_15$9(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "2040";
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			attr_dev(div0, "class", "text years right line20 svelte-dn6cfl");
    			add_location(div0, file$d, 181, 1, 5218);
    			attr_dev(div1, "class", "line right line20 svelte-dn6cfl");
    			add_location(div1, file$d, 182, 1, 5267);
    			attr_dev(div2, "class", "horizontalLine full right line20 svelte-dn6cfl");
    			add_location(div2, file$d, 183, 1, 5306);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$9.name,
    		type: "if",
    		source: "(181:0) {#if twentyfourty}",
    		ctx
    	});

    	return block;
    }

    // (186:0) {#if fifthSetup}
    function create_if_block_14$9(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t4;
    	let div3;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("... hot days will increase by only two per year in the 20 years after that, nevertheless killing around 386 people per year...");
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "2060";
    			t3 = space();
    			div2 = element("div");
    			t4 = space();
    			div3 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-dn6cfl");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$d, 186, 1, 5383);
    			attr_dev(div1, "class", "text years right line40 svelte-dn6cfl");
    			add_location(div1, file$d, 189, 1, 5587);
    			attr_dev(div2, "class", "line right line40 svelte-dn6cfl");
    			add_location(div2, file$d, 190, 1, 5636);
    			attr_dev(div3, "class", "horizontalLine full right line40 svelte-dn6cfl");
    			add_location(div3, file$d, 191, 1, 5675);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$9.name,
    		type: "if",
    		source: "(186:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (194:0) {#if sixthSetup}
    function create_if_block_13$a(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t4;
    	let div3;
    	let t5;
    	let div4;
    	let t7;
    	let div5;
    	let t8;
    	let div6;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("... and 19 days per year in the end of the century, killing around 2.442 people per year.");
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "2080";
    			t3 = space();
    			div2 = element("div");
    			t4 = space();
    			div3 = element("div");
    			t5 = space();
    			div4 = element("div");
    			div4.textContent = "2100";
    			t7 = space();
    			div5 = element("div");
    			t8 = space();
    			div6 = element("div");
    			attr_dev(div0, "class", "pagetext svelte-dn6cfl");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$d, 194, 1, 5752);
    			attr_dev(div1, "class", "text years right line60 svelte-dn6cfl");
    			add_location(div1, file$d, 197, 1, 5919);
    			attr_dev(div2, "class", "line right line60 svelte-dn6cfl");
    			add_location(div2, file$d, 198, 1, 5968);
    			attr_dev(div3, "class", "horizontalLine full right line60 svelte-dn6cfl");
    			add_location(div3, file$d, 199, 1, 6007);
    			attr_dev(div4, "class", "text years right line80 svelte-dn6cfl");
    			add_location(div4, file$d, 200, 1, 6061);
    			attr_dev(div5, "class", "line right line80 svelte-dn6cfl");
    			add_location(div5, file$d, 201, 1, 6110);
    			attr_dev(div6, "class", "horizontalLine full right line80 svelte-dn6cfl");
    			add_location(div6, file$d, 202, 1, 6149);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$a.name,
    		type: "if",
    		source: "(194:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (208:0) {#if tempMeter}
    function create_if_block_7$b(ctx) {
    	let div1;
    	let t0;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let t4;
    	let span;
    	let if_block0 = /*fifthSetup*/ ctx[11] && create_if_block_12$a(ctx);
    	let if_block1 = /*sixthSetup*/ ctx[13] && create_if_block_11$a(ctx);
    	let if_block2 = /*fourthSetup*/ ctx[9] && create_if_block_10$a(ctx);
    	let if_block3 = /*fifthSetup*/ ctx[11] && create_if_block_9$b(ctx);
    	let if_block4 = /*sixthSetup*/ ctx[13] && create_if_block_8$b(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div0 = element("div");
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			span = element("span");
    			span.textContent = "365 days";
    			attr_dev(span, "class", "tempnumber left text svelte-dn6cfl");
    			add_location(span, file$d, 215, 3, 6778);
    			attr_dev(div0, "class", "temperature infotext svelte-dn6cfl");
    			add_location(div0, file$d, 211, 2, 6510);
    			attr_dev(div1, "class", "tempMeter svelte-dn6cfl");
    			add_location(div1, file$d, 208, 1, 6228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t0);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div0, t2);
    			if (if_block3) if_block3.m(div0, null);
    			append_dev(div0, t3);
    			if (if_block4) if_block4.m(div0, null);
    			append_dev(div0, t4);
    			append_dev(div0, span);
    		},
    		p: function update(ctx, dirty) {
    			if (/*fifthSetup*/ ctx[11]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_12$a(ctx);
    					if_block0.c();
    					if_block0.m(div1, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*sixthSetup*/ ctx[13]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_11$a(ctx);
    					if_block1.c();
    					if_block1.m(div1, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*fourthSetup*/ ctx[9]) {
    				if (if_block2) ; else {
    					if_block2 = create_if_block_10$a(ctx);
    					if_block2.c();
    					if_block2.m(div0, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fifthSetup*/ ctx[11]) {
    				if (if_block3) ; else {
    					if_block3 = create_if_block_9$b(ctx);
    					if_block3.c();
    					if_block3.m(div0, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*sixthSetup*/ ctx[13]) {
    				if (if_block4) ; else {
    					if_block4 = create_if_block_8$b(ctx);
    					if_block4.c();
    					if_block4.m(div0, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$b.name,
    		type: "if",
    		source: "(208:0) {#if tempMeter}",
    		ctx
    	});

    	return block;
    }

    // (210:2) {#if fifthSetup}
    function create_if_block_12$a(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "✝︎ 386";
    			attr_dev(span, "class", "deathToll text narrow svelte-dn6cfl");
    			add_location(span, file$d, 209, 52, 6304);
    			attr_dev(div, "class", "temperature midMeter svelte-dn6cfl");
    			add_location(div, file$d, 209, 18, 6270);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$a.name,
    		type: "if",
    		source: "(210:2) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (211:2) {#if sixthSetup}
    function create_if_block_11$a(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "✝︎ 2.442";
    			attr_dev(span, "class", "deathToll text narrow svelte-dn6cfl");
    			add_location(span, file$d, 210, 52, 6431);
    			attr_dev(div, "class", "temperature endMeter svelte-dn6cfl");
    			add_location(div, file$d, 210, 18, 6397);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$a.name,
    		type: "if",
    		source: "(211:2) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (213:3) {#if fourthSetup}
    function create_if_block_10$a(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "0 days";
    			attr_dev(span, "class", "tempnumber right text svelte-dn6cfl");
    			add_location(span, file$d, 212, 20, 6565);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$a.name,
    		type: "if",
    		source: "(213:3) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (214:3) {#if fifthSetup}
    function create_if_block_9$b(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "2 days";
    			attr_dev(span, "class", "tempnumber rightMid text svelte-dn6cfl");
    			add_location(span, file$d, 213, 19, 6639);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$b.name,
    		type: "if",
    		source: "(214:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (215:3) {#if sixthSetup}
    function create_if_block_8$b(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "19 days";
    			attr_dev(span, "class", "tempnumber rightEnd text svelte-dn6cfl");
    			add_location(span, file$d, 214, 19, 6716);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$b.name,
    		type: "if",
    		source: "(215:3) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (224:0) {#if hotDays}
    function create_if_block_5$b(ctx) {
    	let svg;

    	function select_block_type(ctx, dirty) {
    		if (/*fifthSetup*/ ctx[11]) return create_if_block_6$b;
    		return create_else_block_1$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if_block.c();
    			attr_dev(svg, "class", "hotDays svelte-dn6cfl");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 365 1200");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			add_location(svg, file$d, 224, 1, 6871);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if_block.m(svg, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(svg, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$b.name,
    		type: "if",
    		source: "(224:0) {#if hotDays}",
    		ctx
    	});

    	return block;
    }

    // (228:2) {:else}
    function create_else_block_1$6(ctx) {
    	let polygon;

    	const block = {
    		c: function create() {
    			polygon = svg_element("polygon");
    			attr_dev(polygon, "class", "cls-1 svelte-dn6cfl");
    			attr_dev(polygon, "points", "365 1200 365 900 365 600 365 300 365 0 346 0 346 300 363 600 363 900 365 900 365 1200 365 1200");
    			add_location(polygon, file$d, 228, 3, 7106);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, polygon, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(polygon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$6.name,
    		type: "else",
    		source: "(228:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (226:2) {#if fifthSetup}
    function create_if_block_6$b(ctx) {
    	let polyline;

    	const block = {
    		c: function create() {
    			polyline = svg_element("polyline");
    			attr_dev(polyline, "class", "cls-1 svelte-dn6cfl");
    			attr_dev(polyline, "points", "363 600 363 900 365 900 365 1200 365 1200 365 900 365 600");
    			add_location(polyline, file$d, 226, 3, 7000);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, polyline, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(polyline);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$b.name,
    		type: "if",
    		source: "(226:2) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (247:3) {#if secondSetup}
    function create_if_block_4$b(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "[from chat with Seojeong Youn]";
    			add_location(div, file$d, 246, 21, 7499);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$b.name,
    		type: "if",
    		source: "(247:3) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (248:3) {#if thirdSetup}
    function create_if_block_3$b(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "[from chat with Seojeong Youn]";
    			add_location(div, file$d, 247, 20, 7566);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$b.name,
    		type: "if",
    		source: "(248:3) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (249:66) {:else}
    function create_else_block$7(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "http://www.impactlab.org/map/#usmeas=absolute&usyear=1981-2010&gmeas=absolute&gyear=2020-2039&tab=global&grcp=rcp85&gprob=0.5&gvar=tasmax-over-95F");
    			attr_dev(a, "class", "svelte-dn6cfl");
    			add_location(a, file$d, 249, 3, 7690);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(249:66) {:else}",
    		ctx
    	});

    	return block;
    }

    // (249:50) {#if thirdSetup}
    function create_if_block_2$b(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$b.name,
    		type: "if",
    		source: "(249:50) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (249:26) {#if secondSetup}
    function create_if_block_1$b(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(249:26) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (249:3) {#if firstSetup}
    function create_if_block$b(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(249:3) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let div0;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let div2;
    	let div1;
    	let t19;
    	let t20;
    	let t21;
    	let div4;
    	let div3;
    	let if_block0 = /*firstSetup*/ ctx[4] && create_if_block_27$5(ctx);
    	let if_block1 = /*secondSetup*/ ctx[5] && create_if_block_26$5(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[7] && create_if_block_25$5(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[9] && create_if_block_24$7(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[11] && create_if_block_23$7(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[13] && create_if_block_22$7(ctx);
    	let if_block6 = /*firstSetup*/ ctx[4] && create_if_block_21$7(ctx);
    	let if_block7 = /*secondSetup*/ ctx[5] && create_if_block_20$7(ctx);
    	let if_block8 = /*secondPhoto*/ ctx[6] && create_if_block_19$7(ctx);
    	let if_block9 = /*thirdSetup*/ ctx[7] && create_if_block_18$8(ctx);
    	let if_block10 = /*thirdPhoto*/ ctx[8] && create_if_block_17$9(ctx);
    	let if_block11 = /*fourthSetup*/ ctx[9] && create_if_block_16$9(ctx);
    	let if_block12 = /*twentyfourty*/ ctx[14] && create_if_block_15$9(ctx);
    	let if_block13 = /*fifthSetup*/ ctx[11] && create_if_block_14$9(ctx);
    	let if_block14 = /*sixthSetup*/ ctx[13] && create_if_block_13$a(ctx);
    	let if_block15 = /*tempMeter*/ ctx[10] && create_if_block_7$b(ctx);
    	let if_block16 = /*hotDays*/ ctx[12] && create_if_block_5$b(ctx);
    	let if_block17 = /*secondSetup*/ ctx[5] && create_if_block_4$b(ctx);
    	let if_block18 = /*thirdSetup*/ ctx[7] && create_if_block_3$b(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*firstSetup*/ ctx[4]) return create_if_block$b;
    		if (/*secondSetup*/ ctx[5]) return create_if_block_1$b;
    		if (/*thirdSetup*/ ctx[7]) return create_if_block_2$b;
    		return create_else_block$7;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block19 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			div0 = element("div");
    			t6 = text(/*pagetitleText*/ ctx[0]);
    			t7 = space();
    			if (if_block6) if_block6.c();
    			t8 = space();
    			if (if_block7) if_block7.c();
    			t9 = space();
    			if (if_block8) if_block8.c();
    			t10 = space();
    			if (if_block9) if_block9.c();
    			t11 = space();
    			if (if_block10) if_block10.c();
    			t12 = space();
    			if (if_block11) if_block11.c();
    			t13 = space();
    			if (if_block12) if_block12.c();
    			t14 = space();
    			if (if_block13) if_block13.c();
    			t15 = space();
    			if (if_block14) if_block14.c();
    			t16 = space();
    			if (if_block15) if_block15.c();
    			t17 = space();
    			if (if_block16) if_block16.c();
    			t18 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block17) if_block17.c();
    			t19 = space();
    			if (if_block18) if_block18.c();
    			t20 = space();
    			if_block19.c();
    			t21 = space();
    			div4 = element("div");
    			div3 = element("div");
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			add_location(div0, file$d, 150, 0, 3271);
    			attr_dev(div1, "class", "bottomLineText text svelte-dn6cfl");
    			set_style(div1, "text-align", "right");
    			add_location(div1, file$d, 245, 2, 7417);
    			attr_dev(div2, "class", "text bottomLine svelte-dn6cfl");
    			add_location(div2, file$d, 244, 0, 7385);
    			attr_dev(div3, "class", "progressline");
    			set_style(div3, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			add_location(div3, file$d, 255, 1, 7964);
    			attr_dev(div4, "class", "activedotnew activedotFan");
    			add_location(div4, file$d, 254, 0, 7923);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t6);
    			insert_dev(target, t7, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			if (if_block17) if_block17.m(div1, null);
    			append_dev(div1, t19);
    			if (if_block18) if_block18.m(div1, null);
    			append_dev(div1, t20);
    			if_block19.m(div1, null);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_27$5(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_26$5(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_25$5(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[9]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_24$7(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[11]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_23$7(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[13]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_22$7(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (dirty & /*pagetitleText*/ 1) set_data_dev(t6, /*pagetitleText*/ ctx[0]);

    			if (dirty & /*rotate*/ 2) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[1] + ")");
    			}

    			if (/*firstSetup*/ ctx[4]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_21$7(ctx);
    					if_block6.c();
    					if_block6.m(t8.parentNode, t8);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_20$7(ctx);
    					if_block7.c();
    					if_block7.m(t9.parentNode, t9);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*secondPhoto*/ ctx[6]) {
    				if (if_block8) ; else {
    					if_block8 = create_if_block_19$7(ctx);
    					if_block8.c();
    					if_block8.m(t10.parentNode, t10);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_18$8(ctx);
    					if_block9.c();
    					if_block9.m(t11.parentNode, t11);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*thirdPhoto*/ ctx[8]) {
    				if (if_block10) ; else {
    					if_block10 = create_if_block_17$9(ctx);
    					if_block10.c();
    					if_block10.m(t12.parentNode, t12);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*fourthSetup*/ ctx[9]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_16$9(ctx);
    					if_block11.c();
    					if_block11.m(t13.parentNode, t13);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*twentyfourty*/ ctx[14]) {
    				if (if_block12) ; else {
    					if_block12 = create_if_block_15$9(ctx);
    					if_block12.c();
    					if_block12.m(t14.parentNode, t14);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*fifthSetup*/ ctx[11]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_14$9(ctx);
    					if_block13.c();
    					if_block13.m(t15.parentNode, t15);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*sixthSetup*/ ctx[13]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_13$a(ctx);
    					if_block14.c();
    					if_block14.m(t16.parentNode, t16);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*tempMeter*/ ctx[10]) {
    				if (if_block15) {
    					if_block15.p(ctx, dirty);
    				} else {
    					if_block15 = create_if_block_7$b(ctx);
    					if_block15.c();
    					if_block15.m(t17.parentNode, t17);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (/*hotDays*/ ctx[12]) {
    				if (if_block16) {
    					if_block16.p(ctx, dirty);
    				} else {
    					if_block16 = create_if_block_5$b(ctx);
    					if_block16.c();
    					if_block16.m(t18.parentNode, t18);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*secondSetup*/ ctx[5]) {
    				if (if_block17) ; else {
    					if_block17 = create_if_block_4$b(ctx);
    					if_block17.c();
    					if_block17.m(div1, t19);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (/*thirdSetup*/ ctx[7]) {
    				if (if_block18) ; else {
    					if_block18 = create_if_block_3$b(ctx);
    					if_block18.c();
    					if_block18.m(div1, t20);
    				}
    			} else if (if_block18) {
    				if_block18.d(1);
    				if_block18 = null;
    			}

    			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
    				if_block19.d(1);
    				if_block19 = current_block_type(ctx);

    				if (if_block19) {
    					if_block19.c();
    					if_block19.m(div1, null);
    				}
    			}

    			if (dirty & /*rotate*/ 2) {
    				set_style(div3, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[1] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t7);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t10);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t11);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t14);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t16);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div2);
    			if (if_block17) if_block17.d();
    			if (if_block18) if_block18.d();
    			if_block19.d();
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";

    	//import TimelinesEmpty from './TimelineEmpty.svelte';
    	let firstSetup = true;

    	let secondSetup = false;
    	let secondPhoto = false;
    	let thirdSetup = false;
    	let thirdPhoto = false;
    	let fourthSetup = false;
    	let tempMeter = false;
    	let fifthSetup = false;
    	let hotDays = false;
    	let sixthSetup = false;
    	let twentyfourty = false;

    	const togglefirstSetup = () => {
    		$$invalidate(4, firstSetup = true);
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, secondPhoto = false);
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, thirdPhoto = false);
    		$$invalidate(9, fourthSetup = false);
    		$$invalidate(10, tempMeter = false);
    		$$invalidate(11, fifthSetup = false);
    		$$invalidate(12, hotDays = false);
    		$$invalidate(13, sixthSetup = false);
    		$$invalidate(14, twentyfourty = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = true);
    		$$invalidate(6, secondPhoto = true);
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, thirdPhoto = false);
    		$$invalidate(9, fourthSetup = false);
    		$$invalidate(10, tempMeter = false);
    		$$invalidate(11, fifthSetup = false);
    		$$invalidate(12, hotDays = false);
    		$$invalidate(13, sixthSetup = false);
    		$$invalidate(14, twentyfourty = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, secondPhoto = true);
    		$$invalidate(7, thirdSetup = true);
    		$$invalidate(8, thirdPhoto = true);
    		$$invalidate(9, fourthSetup = false);
    		$$invalidate(10, tempMeter = false);
    		$$invalidate(11, fifthSetup = false);
    		$$invalidate(12, hotDays = false);
    		$$invalidate(13, sixthSetup = false);
    		$$invalidate(14, twentyfourty = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, secondPhoto = true);
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, thirdPhoto = true);
    		$$invalidate(9, fourthSetup = true);
    		$$invalidate(10, tempMeter = true);
    		$$invalidate(11, fifthSetup = false);
    		$$invalidate(12, hotDays = false);
    		$$invalidate(13, sixthSetup = false);
    		$$invalidate(14, twentyfourty = true);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, secondPhoto = true);
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, thirdPhoto = true);
    		$$invalidate(9, fourthSetup = false);
    		$$invalidate(10, tempMeter = true);
    		$$invalidate(11, fifthSetup = true);
    		$$invalidate(12, hotDays = true);
    		$$invalidate(13, sixthSetup = false);
    		$$invalidate(14, twentyfourty = true);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(4, firstSetup = false);
    		$$invalidate(5, secondSetup = false);
    		$$invalidate(6, secondPhoto = true);
    		$$invalidate(7, thirdSetup = false);
    		$$invalidate(8, thirdPhoto = true);
    		$$invalidate(9, fourthSetup = false);
    		$$invalidate(10, tempMeter = true);
    		$$invalidate(11, fifthSetup = false);
    		$$invalidate(12, hotDays = true);
    		$$invalidate(13, sixthSetup = true);
    		$$invalidate(14, twentyfourty = false);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SouthKorea> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SouthKorea", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		secondPhoto,
    		thirdSetup,
    		thirdPhoto,
    		fourthSetup,
    		tempMeter,
    		fifthSetup,
    		hotDays,
    		sixthSetup,
    		twentyfourty,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(0, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(1, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(2, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(3, prev = $$props.prev);
    		if ("distanceBLines" in $$props) distanceBLines = $$props.distanceBLines;
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("firstSetup" in $$props) $$invalidate(4, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(5, secondSetup = $$props.secondSetup);
    		if ("secondPhoto" in $$props) $$invalidate(6, secondPhoto = $$props.secondPhoto);
    		if ("thirdSetup" in $$props) $$invalidate(7, thirdSetup = $$props.thirdSetup);
    		if ("thirdPhoto" in $$props) $$invalidate(8, thirdPhoto = $$props.thirdPhoto);
    		if ("fourthSetup" in $$props) $$invalidate(9, fourthSetup = $$props.fourthSetup);
    		if ("tempMeter" in $$props) $$invalidate(10, tempMeter = $$props.tempMeter);
    		if ("fifthSetup" in $$props) $$invalidate(11, fifthSetup = $$props.fifthSetup);
    		if ("hotDays" in $$props) $$invalidate(12, hotDays = $$props.hotDays);
    		if ("sixthSetup" in $$props) $$invalidate(13, sixthSetup = $$props.sixthSetup);
    		if ("twentyfourty" in $$props) $$invalidate(14, twentyfourty = $$props.twentyfourty);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		secondPhoto,
    		thirdSetup,
    		thirdPhoto,
    		fourthSetup,
    		tempMeter,
    		fifthSetup,
    		hotDays,
    		sixthSetup,
    		twentyfourty,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup
    	];
    }

    class SouthKorea extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			pagetitleText: 0,
    			rotate: 1,
    			next: 2,
    			prev: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SouthKorea",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[0] === undefined && !("pagetitleText" in props)) {
    			console.warn("<SouthKorea> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[1] === undefined && !("rotate" in props)) {
    			console.warn("<SouthKorea> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
    			console.warn("<SouthKorea> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[3] === undefined && !("prev" in props)) {
    			console.warn("<SouthKorea> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<SouthKorea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<SouthKorea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<SouthKorea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<SouthKorea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<SouthKorea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<SouthKorea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<SouthKorea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<SouthKorea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/EnvironmentalJustice.svelte generated by Svelte v3.23.0 */

    const file$e = "src/specifics/EnvironmentalJustice.svelte";

    // (52:0) {#if firstSetup}
    function create_if_block_21$8(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$e, 52, 1, 993);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[1]);
    			add_location(a, file$e, 53, 1, 1054);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 2) {
    				attr_dev(a, "href", /*next*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$8.name,
    		type: "if",
    		source: "(52:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (56:0) {#if secondSetup}
    function create_if_block_20$8(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$e, 56, 1, 1120);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$e, 57, 1, 1180);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[12], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$8.name,
    		type: "if",
    		source: "(56:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (60:0) {#if thirdSetup}
    function create_if_block_19$8(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$e, 60, 1, 1263);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$e, 61, 1, 1324);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[13], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$8.name,
    		type: "if",
    		source: "(60:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (64:0) {#if fourthSetup}
    function create_if_block_18$9(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$e, 64, 1, 1409);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$e, 65, 1, 1469);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[14], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$9.name,
    		type: "if",
    		source: "(64:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (68:0) {#if fifthSetup}
    function create_if_block_17$a(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$e, 68, 1, 1552);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$e, 69, 1, 1612);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[15], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$a.name,
    		type: "if",
    		source: "(68:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (72:0) {#if sixthSetup}
    function create_if_block_16$a(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[2]);
    			add_location(a, file$e, 72, 1, 1696);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$e, 73, 1, 1738);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglefifthSetup*/ ctx[14], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 4) {
    				attr_dev(a, "href", /*prev*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$a.name,
    		type: "if",
    		source: "(72:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (84:0) {#if firstSetup}
    function create_if_block_15$a(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Last May — the hottest on record — Icelands Minister of Justice (ironically) resubmitted a controversial proposal to change asylum legislation. If going through the legislation will limit asylum seekers’s chances, chances that are already very low, of being granted asylum in Iceland.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "2020";
    			attr_dev(div0, "class", "pagetext svelte-hdpz2q");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$e, 84, 1, 1923);
    			attr_dev(div1, "class", "horizontalLine left line0 svelte-hdpz2q");
    			add_location(div1, file$e, 88, 1, 2406);
    			attr_dev(div2, "class", "text years left line0 now svelte-hdpz2q");
    			add_location(div2, file$e, 89, 1, 2453);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$a.name,
    		type: "if",
    		source: "(84:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (97:0) {#if secondSetup}
    function create_if_block_14$a(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("This focus on securing borders and keeping people out has become a trend in European and U.S. politics at a time when more people than ever are forcibly displaced, many of which due to factors amplified by climate change, such as food insecurity, droughts, flooding, etc.. (all factors which can also lead to conflict that forces people to migrate)");
    			attr_dev(div, "class", "pagetext svelte-hdpz2q");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$e, 97, 1, 2658);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$a.name,
    		type: "if",
    		source: "(97:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (103:0) {#if thirdSetup}
    function create_if_block_13$b(ctx) {
    	let div0;
    	let t0;
    	let br;
    	let t1;
    	let t2;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t6;
    	let div4;
    	let t8;
    	let div5;
    	let t9;
    	let div6;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Between 2007 and 2010 Syria felt a massive drought that lead to crop failure, uprooting farmers and leading them to migrate to cities. The cities, lacking infrastructure to host so many people, became overcrowded and this (along with other factors) sparked the Syrian conflict. \n\t\t");
    			br = element("br");
    			t1 = text("\n\t\tIn the end of 2019, 6.6 million of the people displaced on Earth (the most people coming from a single country) came from Syria.");
    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "2007";
    			t5 = space();
    			div3 = element("div");
    			t6 = space();
    			div4 = element("div");
    			div4.textContent = "2010";
    			t8 = space();
    			div5 = element("div");
    			t9 = space();
    			div6 = element("div");
    			div6.textContent = "2020";
    			add_location(br, file$e, 105, 2, 3664);
    			attr_dev(div0, "class", "pagetext svelte-hdpz2q");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$e, 103, 1, 3210);
    			attr_dev(div1, "class", "horizontalLine left line13 svelte-hdpz2q");
    			add_location(div1, file$e, 109, 1, 3811);
    			attr_dev(div2, "class", "text years left line13 svelte-hdpz2q");
    			add_location(div2, file$e, 110, 1, 3859);
    			attr_dev(div3, "class", "horizontalLine left line10 svelte-hdpz2q");
    			add_location(div3, file$e, 111, 1, 3907);
    			attr_dev(div4, "class", "text years left line10 svelte-hdpz2q");
    			add_location(div4, file$e, 112, 1, 3955);
    			attr_dev(div5, "class", "horizontalLine left line0 svelte-hdpz2q");
    			add_location(div5, file$e, 114, 1, 4004);
    			attr_dev(div6, "class", "text years left line0 now svelte-hdpz2q");
    			add_location(div6, file$e, 115, 1, 4051);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, br);
    			append_dev(div0, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$b.name,
    		type: "if",
    		source: "(103:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (122:1) {:else}
    function create_else_block_2$5(ctx) {
    	let div0;
    	let t;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "line left line13 svelte-hdpz2q");
    			add_location(div0, file$e, 122, 2, 4163);
    			attr_dev(div1, "class", "line left line10 svelte-hdpz2q");
    			add_location(div1, file$e, 123, 2, 4202);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$5.name,
    		type: "else",
    		source: "(122:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (121:1) {#if firstSetup}
    function create_if_block_12$b(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$b.name,
    		type: "if",
    		source: "(121:1) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (119:0) {#if secondSetup}
    function create_if_block_11$b(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$b.name,
    		type: "if",
    		source: "(119:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (128:0) {#if fourthSetup}
    function create_if_block_10$b(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("The oposite of a drought is a flood, both are becoming more common with heating. Jakarta, Indonesia’s capital city and home to roughly 9 million people, is the fastest sinking city in the world and is estimated to be half underwater in 2030.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "2030";
    			attr_dev(div0, "class", "pagetext svelte-hdpz2q");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$e, 128, 1, 4272);
    			attr_dev(div1, "class", "horizontalLine left line10 svelte-hdpz2q");
    			add_location(div1, file$e, 132, 1, 4645);
    			attr_dev(div2, "class", "text years right line10 svelte-hdpz2q");
    			add_location(div2, file$e, 133, 1, 4693);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$b.name,
    		type: "if",
    		source: "(128:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (142:2) {:else}
    function create_else_block_1$7(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line right line10 svelte-hdpz2q");
    			add_location(div, file$e, 142, 3, 4833);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$7.name,
    		type: "else",
    		source: "(142:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (141:2) {#if firstSetup}
    function create_if_block_9$c(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$c.name,
    		type: "if",
    		source: "(141:2) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (139:1) {#if secondSetup}
    function create_if_block_8$c(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$c.name,
    		type: "if",
    		source: "(139:1) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (137:0) {#if thirdSetup}
    function create_if_block_7$c(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$c.name,
    		type: "if",
    		source: "(137:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (148:0) {#if fifthSetup}
    function create_if_block_6$c(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("The climate crisis is already being felt by an increasingly large population (mostly non-white). Each year since 2008, catastrophic weather disasters have displaced an average of 24 million people. Yet no substancial measures to keep it under control have been taken.");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "2050";
    			attr_dev(div0, "class", "pagetext svelte-hdpz2q");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$e, 148, 1, 4911);
    			attr_dev(div1, "class", "horizontalLine left line40 svelte-hdpz2q");
    			add_location(div1, file$e, 152, 1, 5252);
    			attr_dev(div2, "class", "text years right line40 svelte-hdpz2q");
    			add_location(div2, file$e, 153, 1, 5300);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$c.name,
    		type: "if",
    		source: "(148:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (164:3) {:else}
    function create_else_block$8(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "line right line40 svelte-hdpz2q");
    			add_location(div, file$e, 164, 4, 5473);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(164:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (163:3) {#if firstSetup}
    function create_if_block_5$c(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$c.name,
    		type: "if",
    		source: "(163:3) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (161:2) {#if secondSetup}
    function create_if_block_4$c(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$c.name,
    		type: "if",
    		source: "(161:2) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (159:1) {#if thirdSetup}
    function create_if_block_3$c(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$c.name,
    		type: "if",
    		source: "(159:1) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (157:0) {#if fourthSetup}
    function create_if_block_2$c(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$c.name,
    		type: "if",
    		source: "(157:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (171:0) {#if sixthSetup}
    function create_if_block_1$c(ctx) {
    	let div;
    	let t0;
    	let sub;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("The climate crisis is already being felt by an increasingly large population (mostly non-white), yet no substancial measures to keep it under control have been taken. As it seems, more powder is being put into securing north-western borders and keeping the problem out of sight and out of mind. Out of mostly white and white governed high CO");
    			sub = element("sub");
    			sub.textContent = "2";
    			t2 = text(" emitting countries that take a very active part in fueling the crisis... like Iceland.");
    			add_location(sub, file$e, 172, 343, 5963);
    			attr_dev(div, "class", "pagetext svelte-hdpz2q");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$e, 171, 1, 5560);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, sub);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(171:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (185:3) {#if fifthSetup}
    function create_if_block$c(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "class", "text svelte-hdpz2q");
    			attr_dev(a, "href", "https://www.weforum.org/agenda/2019/10/importance-of-disaster-risk-reduction/");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$e, 184, 19, 6221);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(185:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let div0;
    	let t6;
    	let t7;
    	let t8;
    	let div1;
    	let t9;
    	let div2;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let div4;
    	let div3;
    	let t19;
    	let div5;
    	let t20;
    	let div7;
    	let div6;
    	let if_block0 = /*firstSetup*/ ctx[3] && create_if_block_21$8(ctx);
    	let if_block1 = /*secondSetup*/ ctx[4] && create_if_block_20$8(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[5] && create_if_block_19$8(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[6] && create_if_block_18$9(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[7] && create_if_block_17$a(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[8] && create_if_block_16$a(ctx);
    	let if_block6 = /*firstSetup*/ ctx[3] && create_if_block_15$a(ctx);
    	let if_block7 = /*secondSetup*/ ctx[4] && create_if_block_14$a(ctx);
    	let if_block8 = /*thirdSetup*/ ctx[5] && create_if_block_13$b(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*secondSetup*/ ctx[4]) return create_if_block_11$b;
    		if (/*firstSetup*/ ctx[3]) return create_if_block_12$b;
    		return create_else_block_2$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block9 = current_block_type(ctx);
    	let if_block10 = /*fourthSetup*/ ctx[6] && create_if_block_10$b(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*thirdSetup*/ ctx[5]) return create_if_block_7$c;
    		if (/*secondSetup*/ ctx[4]) return create_if_block_8$c;
    		if (/*firstSetup*/ ctx[3]) return create_if_block_9$c;
    		return create_else_block_1$7;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block11 = current_block_type_1(ctx);
    	let if_block12 = /*fifthSetup*/ ctx[7] && create_if_block_6$c(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*fourthSetup*/ ctx[6]) return create_if_block_2$c;
    		if (/*thirdSetup*/ ctx[5]) return create_if_block_3$c;
    		if (/*secondSetup*/ ctx[4]) return create_if_block_4$c;
    		if (/*firstSetup*/ ctx[3]) return create_if_block_5$c;
    		return create_else_block$8;
    	}

    	let current_block_type_2 = select_block_type_2(ctx);
    	let if_block13 = current_block_type_2(ctx);
    	let if_block14 = /*sixthSetup*/ ctx[8] && create_if_block_1$c(ctx);
    	let if_block15 = /*fifthSetup*/ ctx[7] && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			div0 = element("div");
    			t6 = text("Displacement");
    			t7 = space();
    			if (if_block6) if_block6.c();
    			t8 = space();
    			div1 = element("div");
    			t9 = space();
    			div2 = element("div");
    			t10 = space();
    			if (if_block7) if_block7.c();
    			t11 = space();
    			if (if_block8) if_block8.c();
    			t12 = space();
    			if_block9.c();
    			t13 = space();
    			if (if_block10) if_block10.c();
    			t14 = space();
    			if_block11.c();
    			t15 = space();
    			if (if_block12) if_block12.c();
    			t16 = space();
    			if_block13.c();
    			t17 = space();
    			if (if_block14) if_block14.c();
    			t18 = space();
    			div4 = element("div");
    			div3 = element("div");
    			if (if_block15) if_block15.c();
    			t19 = space();
    			div5 = element("div");
    			t20 = space();
    			div7 = element("div");
    			div6 = element("div");
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$e, 81, 0, 1825);
    			attr_dev(div1, "class", "line left line0 svelte-hdpz2q");
    			add_location(div1, file$e, 93, 0, 2565);
    			attr_dev(div2, "class", "line right line0 svelte-hdpz2q");
    			add_location(div2, file$e, 94, 0, 2601);
    			attr_dev(div3, "class", "bottomLineText text svelte-hdpz2q");
    			set_style(div3, "text-align", "right");
    			add_location(div3, file$e, 183, 2, 6141);
    			attr_dev(div4, "class", "text bottomLine svelte-hdpz2q");
    			add_location(div4, file$e, 182, 0, 6109);
    			attr_dev(div5, "class", "horizontalLine left svelte-hdpz2q");
    			set_style(div5, "width", "100%");
    			set_style(div5, "top", "calc(" + /*distanceBLines*/ ctx[9] + " * 8)");
    			set_style(div5, "border-top", "1px solid blue");
    			add_location(div5, file$e, 189, 0, 6532);
    			attr_dev(div6, "class", "progressline");
    			set_style(div6, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			add_location(div6, file$e, 192, 1, 6696);
    			attr_dev(div7, "class", "activedotnew activedotFan");
    			add_location(div7, file$e, 191, 0, 6655);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t6);
    			insert_dev(target, t7, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t10, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if_block9.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t14, anchor);
    			if_block11.m(target, anchor);
    			insert_dev(target, t15, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if_block13.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			if (if_block15) if_block15.m(div3, null);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div6);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_21$8(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_20$8(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_19$8(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_18$9(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_17$a(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[8]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_16$a(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}

    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_15$a(ctx);
    					if_block6.c();
    					if_block6.m(t8.parentNode, t8);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_14$a(ctx);
    					if_block7.c();
    					if_block7.m(t11.parentNode, t11);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_13$b(ctx);
    					if_block8.c();
    					if_block8.m(t12.parentNode, t12);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block9.d(1);
    				if_block9 = current_block_type(ctx);

    				if (if_block9) {
    					if_block9.c();
    					if_block9.m(t13.parentNode, t13);
    				}
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_10$b(ctx);
    					if_block10.c();
    					if_block10.m(t14.parentNode, t14);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
    				if_block11.d(1);
    				if_block11 = current_block_type_1(ctx);

    				if (if_block11) {
    					if_block11.c();
    					if_block11.m(t15.parentNode, t15);
    				}
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block12) {
    					if_block12.p(ctx, dirty);
    				} else {
    					if_block12 = create_if_block_6$c(ctx);
    					if_block12.c();
    					if_block12.m(t16.parentNode, t16);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (current_block_type_2 !== (current_block_type_2 = select_block_type_2(ctx))) {
    				if_block13.d(1);
    				if_block13 = current_block_type_2(ctx);

    				if (if_block13) {
    					if_block13.c();
    					if_block13.m(t17.parentNode, t17);
    				}
    			}

    			if (/*sixthSetup*/ ctx[8]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_1$c(ctx);
    					if_block14.c();
    					if_block14.m(t18.parentNode, t18);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block15) ; else {
    					if_block15 = create_if_block$c(ctx);
    					if_block15.c();
    					if_block15.m(div3, null);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div6, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t7);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t10);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t11);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t12);
    			if_block9.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t14);
    			if_block11.d(detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t16);
    			if_block13.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div4);
    			if (if_block15) if_block15.d();
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(3, firstSetup = true);
    		$$invalidate(4, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(3, firstSetup = false);
    		$$invalidate(4, secondSetup = true);
    		$$invalidate(5, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(4, secondSetup = false);
    		$$invalidate(5, thirdSetup = true);
    		$$invalidate(6, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(5, thirdSetup = false);
    		$$invalidate(6, fourthSetup = true);
    		$$invalidate(7, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(6, fourthSetup = false);
    		$$invalidate(7, fifthSetup = true);
    		$$invalidate(8, sixthSetup = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(7, fifthSetup = false);
    		$$invalidate(8, sixthSetup = true);
    		seventhSetup = false;
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EnvironmentalJustice> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("EnvironmentalJustice", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(16, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(16, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(9, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("firstSetup" in $$props) $$invalidate(3, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(4, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(5, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(6, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(7, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(8, sixthSetup = $$props.sixthSetup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		distanceBLines,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		pagetitleText
    	];
    }

    class EnvironmentalJustice extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			pagetitleText: 16,
    			rotate: 0,
    			next: 1,
    			prev: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnvironmentalJustice",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[16] === undefined && !("pagetitleText" in props)) {
    			console.warn("<EnvironmentalJustice> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[0] === undefined && !("rotate" in props)) {
    			console.warn("<EnvironmentalJustice> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[1] === undefined && !("next" in props)) {
    			console.warn("<EnvironmentalJustice> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
    			console.warn("<EnvironmentalJustice> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<EnvironmentalJustice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<EnvironmentalJustice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<EnvironmentalJustice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<EnvironmentalJustice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<EnvironmentalJustice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<EnvironmentalJustice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<EnvironmentalJustice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<EnvironmentalJustice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/EnvironmentalJusticeII.svelte generated by Svelte v3.23.0 */

    const file$f = "src/specifics/EnvironmentalJusticeII.svelte";

    // (94:0) {#if firstSetup}
    function create_if_block_29$3(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$f, 94, 1, 1933);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[1]);
    			add_location(a, file$f, 95, 1, 1994);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*next*/ 2) {
    				attr_dev(a, "href", /*next*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_29$3.name,
    		type: "if",
    		source: "(94:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (98:0) {#if secondSetup}
    function create_if_block_28$4(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 98, 1, 2060);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 99, 1, 2120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_28$4.name,
    		type: "if",
    		source: "(98:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (102:0) {#if thirdSetup}
    function create_if_block_27$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 102, 1, 2203);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 103, 1, 2264);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27$6.name,
    		type: "if",
    		source: "(102:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (106:0) {#if fourthSetup}
    function create_if_block_26$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 106, 1, 2349);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 107, 1, 2409);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26$6.name,
    		type: "if",
    		source: "(106:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (110:0) {#if fifthSetup}
    function create_if_block_25$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 110, 1, 2492);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 111, 1, 2552);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25$6.name,
    		type: "if",
    		source: "(110:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (114:0) {#if sixthSetup}
    function create_if_block_24$8(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 114, 1, 2636);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 115, 1, 2698);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[23], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[21], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24$8.name,
    		type: "if",
    		source: "(114:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (118:0) {#if seventhSetup}
    function create_if_block_23$8(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 118, 1, 2783);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 119, 1, 2844);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeighthSetup*/ ctx[24], false, false, false),
    					listen_dev(div1, "click", /*togglesixthSetup*/ ctx[22], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23$8.name,
    		type: "if",
    		source: "(118:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (122:0) {#if eightthSetup}
    function create_if_block_22$8(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 122, 1, 2929);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 123, 1, 2990);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleninethSetup*/ ctx[25], false, false, false),
    					listen_dev(div1, "click", /*toggleseventhSetup*/ ctx[23], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22$8.name,
    		type: "if",
    		source: "(122:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (126:0) {#if ninethSetup}
    function create_if_block_21$9(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 126, 1, 3076);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 127, 1, 3136);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggletenthSetup*/ ctx[26], false, false, false),
    					listen_dev(div1, "click", /*toggleeighthSetup*/ ctx[24], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21$9.name,
    		type: "if",
    		source: "(126:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (130:0) {#if tenthSetup}
    function create_if_block_20$9(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 130, 1, 3220);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 131, 1, 3283);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeleventhSetup*/ ctx[27], false, false, false),
    					listen_dev(div1, "click", /*toggleninethSetup*/ ctx[25], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$9.name,
    		type: "if",
    		source: "(130:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (134:0) {#if eleventhSetup}
    function create_if_block_19$9(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 134, 1, 3370);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 135, 1, 3433);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggletwelvethSetup*/ ctx[28], false, false, false),
    					listen_dev(div1, "click", /*toggletenthSetup*/ ctx[26], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$9.name,
    		type: "if",
    		source: "(134:0) {#if eleventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (138:0) {#if twelvethSetup}
    function create_if_block_18$a(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$f, 138, 1, 3519);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$f, 139, 1, 3584);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirteenthSetup*/ ctx[29], false, false, false),
    					listen_dev(div1, "click", /*toggleeleventhSetup*/ ctx[27], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$a.name,
    		type: "if",
    		source: "(138:0) {#if twelvethSetup}",
    		ctx
    	});

    	return block;
    }

    // (142:0) {#if thirteenthSetup}
    function create_if_block_17$b(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[2]);
    			add_location(a, file$f, 142, 1, 3675);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$f, 143, 1, 3717);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggletwelvethSetup*/ ctx[28], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*prev*/ 4) {
    				attr_dev(a, "href", /*prev*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$b.name,
    		type: "if",
    		source: "(142:0) {#if thirteenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (154:0) {#if firstSetup}
    function create_if_block_16$b(ctx) {
    	let div;
    	let t0;
    	let br0;
    	let t1;
    	let br1;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("CARE");
    			br0 = element("br");
    			t1 = text("\n\t\tIn order to love, we must care.");
    			br1 = element("br");
    			t2 = text("\n\t\tBut care alone does not constitute love. bell claims that an abusive parent, although maybe caring, does not love it’s child. Abuse and love can not coexist and love can never excuse abuse.");
    			add_location(br0, file$f, 155, 6, 3978);
    			add_location(br1, file$f, 156, 33, 4016);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 154, 1, 3912);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br0);
    			append_dev(div, t1);
    			append_dev(div, br1);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$b.name,
    		type: "if",
    		source: "(154:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (162:0) {#if secondSetup}
    function create_if_block_15$b(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("To care about the wellbeing of others than yourself is not sufficient in itself, and combined with abuse or neglect it becomes dysfunctional. Creating work for garment workers, and then only paying 2% of them a living wage, is abusive care.");
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 162, 1, 4285);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$b.name,
    		type: "if",
    		source: "(162:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (168:0) {#if thirdSetup}
    function create_if_block_14$b(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("COMMITMENT");
    			br = element("br");
    			t1 = text("\n\t\tIn order to love we must be eager and committed to abandoning abusive habits. Love, in bell’s writing, is not a practice for greater life satisfaction of the loving individual, but a deeply political act of ending domination and oppression, whether over yourself or another. Love is communal, “it requires conscious practice, a willingness to unite the way we think with the way we act.”");
    			add_location(br, file$f, 169, 12, 4700);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 168, 1, 4628);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$b.name,
    		type: "if",
    		source: "(168:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (175:0) {#if fourthSetup}
    function create_if_block_13$c(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("KNOWLEDGE");
    			br = element("br");
    			t1 = text("\n\t\tMass media historically shows love as a mystery, something undefinable. This is linked to patriarchal values, according to bell, which depend upon inferiority/superiority, which can better be represented through violence than through love. Mass media can’t define love because the creators, mostly partriarchal institutions, don’t understand love, their ideas of love are scewed by dominance and violence.");
    			add_location(br, file$f, 176, 11, 5241);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 175, 1, 5170);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$c.name,
    		type: "if",
    		source: "(175:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (182:0) {#if fifthSetup}
    function create_if_block_12$c(ctx) {
    	let div;
    	let t0;
    	let i;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Representations of environmentalism in mass media is similarly underdeveloped, which is shameful because representation shapes our culture and informs our thoughts and actions. Consumers must use their power to demand nuanced representations. If love is unknowable and environmentalism is ");
    			i = element("i");
    			i.textContent = "kids holding hands around a globe";
    			t2 = text(", then where does that lead us? What valuable knowledge are we missing out on?");
    			add_location(i, file$f, 183, 291, 6039);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 182, 1, 5688);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, i);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$c.name,
    		type: "if",
    		source: "(182:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (188:0) {#if sixthSetup}
    function create_if_block_11$c(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("RESPONSIBILITY");
    			br = element("br");
    			t1 = text("\n\t\tbell talkes of love as an action, which is informed by will and intention, rather than a feeling, which is uncontrollable. This lends love accountability and responsibility. “If we were constantly remembering that love is as love does, we would not use the word in a manner that devalues and degrades its meaning.”");
    			add_location(br, file$f, 189, 16, 6302);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 188, 1, 6226);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$c.name,
    		type: "if",
    		source: "(188:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (195:0) {#if seventhSetup}
    function create_if_block_10$c(ctx) {
    	let div;
    	let t0;
    	let i;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("“We can choose to love” (although I’m not so sure we can choose to not love). In a wider context — as love exists in many forms and “sizes” — when speaking of groups of people, we do not simply “not love” them, we choose to not love them, and that choice has consequences which we are responsible for. Love is not ");
    			i = element("i");
    			i.textContent = "just";
    			t2 = text(" a feeling that we cannot control, it is an intentional action.");
    			add_location(i, file$f, 196, 328, 7053);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 195, 1, 6665);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, i);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$c.name,
    		type: "if",
    		source: "(195:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (201:0) {#if eightthSetup}
    function create_if_block_9$d(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("RESPECT");
    			br = element("br");
    			t1 = text("\n\t\tI read an article by David Wallace-Wells, where he describes an encounter he had with a middle aged business man after he had attended a panel discussion on the climate crisis which David was part of. The man asked him, in “an almost conspiratory” tone: “How bad is it going to be?”");
    			add_location(br, file$f, 202, 9, 7233);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 201, 1, 7164);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$d.name,
    		type: "if",
    		source: "(201:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (208:0) {#if ninethSetup}
    function create_if_block_8$d(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("David answered, surprised by the question after a 90 minute discussion, “at just 2 degrees of warming, which is basically the best-case scenario. it’s been estimated that 150 million people would die from air pollution...”, the man stopped him and commented, smiling, “But out of 8 billion”.");
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 208, 1, 7563);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$d.name,
    		type: "if",
    		source: "(208:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (214:0) {#if tenthSetup}
    function create_if_block_7$d(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("David continued, trying to convince the man that the - avoidable - death of 150 million people would surely be a tragedy, “...the scale of 25 Holocausts”, the man cut him off again, repeating his previous observation, as if he had proven his point. After learning of the imminent death of 150 million people, he concluded that since they where mainly concentrated in China, India and the Developing world, it wouldn’t be so bad.");
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 214, 1, 7956);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$d.name,
    		type: "if",
    		source: "(214:0) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (220:0) {#if eleventhSetup}
    function create_if_block_6$d(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Although most are not as vocal about this kind of disregard for human life, his attitude perfectly mirrors that of western policy. Respect for human life is conditional to class, race, gender, sexuality, religion, etc., and now also year of birth.");
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 220, 1, 8489);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$d.name,
    		type: "if",
    		source: "(220:0) {#if eleventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (226:0) {#if twelvethSetup}
    function create_if_block_5$d(ctx) {
    	let div;
    	let t0;
    	let br0;
    	let t1;
    	let br1;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("TRUST");
    			br0 = element("br");
    			t1 = text("\n\t\tFinally, love requires trust.");
    			br1 = element("br");
    			t2 = text("\n\t\t“As a culture we are obsessed with the notion of safety. Yet we do not question why we live in states of extreme anxiety and dread. Fear is the primary force upholding structures of domination. It promotes the desire for separation, the desire not to be known. When we are taught that safety lies always with sameness, then difference, of any kind, will appear as a threat. ...");
    			add_location(br0, file$f, 227, 7, 8909);
    			add_location(br1, file$f, 228, 31, 8945);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 226, 1, 8842);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br0);
    			append_dev(div, t1);
    			append_dev(div, br1);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$d.name,
    		type: "if",
    		source: "(226:0) {#if twelvethSetup}",
    		ctx
    	});

    	return block;
    }

    // (234:0) {#if thirteenthSetup}
    function create_if_block_4$d(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("... When we choose to love we choose to move against fear-against alienation and separation. The choice to love is a choice to connect — to find ourselves in the other.”");
    			br = element("br");
    			t1 = text("\n\t\tTo love is to trust that the other will not harm us, that difference is not destructive. “Awakening to love can happen only as we let go of our obsession with power and domination.”");
    			add_location(br, file$f, 235, 182, 9617);
    			attr_dev(div, "class", "pagetext svelte-1vchzpm");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$f, 234, 1, 9375);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$d.name,
    		type: "if",
    		source: "(234:0) {#if thirteenthSetup}",
    		ctx
    	});

    	return block;
    }

    // (248:3) {#if fifthSetup}
    function create_if_block_3$d(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[thesis ↗︎]";
    			attr_dev(a, "class", "text svelte-1vchzpm");
    			attr_dev(a, "href", "https://kabk.github.io/go-theses-20-berglind-johannsdottir/");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$f, 247, 19, 9963);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$d.name,
    		type: "if",
    		source: "(248:3) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (249:3) {#if eightthSetup}
    function create_if_block_2$d(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "class", "text svelte-1vchzpm");
    			attr_dev(a, "href", "https://nymag.com/intelligencer/2019/12/climate-change-worst-case-scenario-now-looks-unrealistic.html");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$f, 248, 21, 10118);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$d.name,
    		type: "if",
    		source: "(249:3) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (250:3) {#if ninethSetup}
    function create_if_block_1$d(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "class", "text svelte-1vchzpm");
    			attr_dev(a, "href", "https://nymag.com/intelligencer/2019/12/climate-change-worst-case-scenario-now-looks-unrealistic.html");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$f, 249, 20, 10312);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(250:3) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (251:3) {#if tenthSetup}
    function create_if_block$d(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			attr_dev(a, "class", "text svelte-1vchzpm");
    			attr_dev(a, "href", "https://nymag.com/intelligencer/2019/12/climate-change-worst-case-scenario-now-looks-unrealistic.html");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$f, 250, 19, 10505);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(251:3) {#if tenthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let div0;
    	let t13;
    	let br;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let t22;
    	let t23;
    	let t24;
    	let t25;
    	let t26;
    	let t27;
    	let t28;
    	let div2;
    	let div1;
    	let t29;
    	let t30;
    	let t31;
    	let t32;
    	let a0;
    	let t34;
    	let a1;
    	let t36;
    	let div3;
    	let t37;
    	let div5;
    	let div4;
    	let if_block0 = /*firstSetup*/ ctx[3] && create_if_block_29$3(ctx);
    	let if_block1 = /*secondSetup*/ ctx[4] && create_if_block_28$4(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[5] && create_if_block_27$6(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[6] && create_if_block_26$6(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[7] && create_if_block_25$6(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[8] && create_if_block_24$8(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[9] && create_if_block_23$8(ctx);
    	let if_block7 = /*eightthSetup*/ ctx[10] && create_if_block_22$8(ctx);
    	let if_block8 = /*ninethSetup*/ ctx[11] && create_if_block_21$9(ctx);
    	let if_block9 = /*tenthSetup*/ ctx[12] && create_if_block_20$9(ctx);
    	let if_block10 = /*eleventhSetup*/ ctx[13] && create_if_block_19$9(ctx);
    	let if_block11 = /*twelvethSetup*/ ctx[14] && create_if_block_18$a(ctx);
    	let if_block12 = /*thirteenthSetup*/ ctx[15] && create_if_block_17$b(ctx);
    	let if_block13 = /*firstSetup*/ ctx[3] && create_if_block_16$b(ctx);
    	let if_block14 = /*secondSetup*/ ctx[4] && create_if_block_15$b(ctx);
    	let if_block15 = /*thirdSetup*/ ctx[5] && create_if_block_14$b(ctx);
    	let if_block16 = /*fourthSetup*/ ctx[6] && create_if_block_13$c(ctx);
    	let if_block17 = /*fifthSetup*/ ctx[7] && create_if_block_12$c(ctx);
    	let if_block18 = /*sixthSetup*/ ctx[8] && create_if_block_11$c(ctx);
    	let if_block19 = /*seventhSetup*/ ctx[9] && create_if_block_10$c(ctx);
    	let if_block20 = /*eightthSetup*/ ctx[10] && create_if_block_9$d(ctx);
    	let if_block21 = /*ninethSetup*/ ctx[11] && create_if_block_8$d(ctx);
    	let if_block22 = /*tenthSetup*/ ctx[12] && create_if_block_7$d(ctx);
    	let if_block23 = /*eleventhSetup*/ ctx[13] && create_if_block_6$d(ctx);
    	let if_block24 = /*twelvethSetup*/ ctx[14] && create_if_block_5$d(ctx);
    	let if_block25 = /*thirteenthSetup*/ ctx[15] && create_if_block_4$d(ctx);
    	let if_block26 = /*fifthSetup*/ ctx[7] && create_if_block_3$d(ctx);
    	let if_block27 = /*eightthSetup*/ ctx[10] && create_if_block_2$d(ctx);
    	let if_block28 = /*ninethSetup*/ ctx[11] && create_if_block_1$d(ctx);
    	let if_block29 = /*tenthSetup*/ ctx[12] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			if (if_block7) if_block7.c();
    			t7 = space();
    			if (if_block8) if_block8.c();
    			t8 = space();
    			if (if_block9) if_block9.c();
    			t9 = space();
    			if (if_block10) if_block10.c();
    			t10 = space();
    			if (if_block11) if_block11.c();
    			t11 = space();
    			if (if_block12) if_block12.c();
    			t12 = space();
    			div0 = element("div");
    			t13 = text("Radical");
    			br = element("br");
    			t14 = text("love ...");
    			t15 = space();
    			if (if_block13) if_block13.c();
    			t16 = space();
    			if (if_block14) if_block14.c();
    			t17 = space();
    			if (if_block15) if_block15.c();
    			t18 = space();
    			if (if_block16) if_block16.c();
    			t19 = space();
    			if (if_block17) if_block17.c();
    			t20 = space();
    			if (if_block18) if_block18.c();
    			t21 = space();
    			if (if_block19) if_block19.c();
    			t22 = space();
    			if (if_block20) if_block20.c();
    			t23 = space();
    			if (if_block21) if_block21.c();
    			t24 = space();
    			if (if_block22) if_block22.c();
    			t25 = space();
    			if (if_block23) if_block23.c();
    			t26 = space();
    			if (if_block24) if_block24.c();
    			t27 = space();
    			if (if_block25) if_block25.c();
    			t28 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block26) if_block26.c();
    			t29 = space();
    			if (if_block27) if_block27.c();
    			t30 = space();
    			if (if_block28) if_block28.c();
    			t31 = space();
    			if (if_block29) if_block29.c();
    			t32 = space();
    			a0 = element("a");
    			a0.textContent = "[more ↗︎]";
    			t34 = space();
    			a1 = element("a");
    			a1.textContent = "[more ↗︎]";
    			t36 = space();
    			div3 = element("div");
    			t37 = space();
    			div5 = element("div");
    			div4 = element("div");
    			add_location(br, file$f, 151, 67, 3874);
    			attr_dev(div0, "class", "pagetitle svelte-1vchzpm");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$f, 151, 0, 3807);
    			attr_dev(a0, "class", "text svelte-1vchzpm");
    			attr_dev(a0, "href", "https://www.youtube.com/watch?v=LTRDHb-8EF0");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file$f, 251, 3, 10682);
    			attr_dev(a1, "class", "text svelte-1vchzpm");
    			attr_dev(a1, "href", "https://abc.nl/book-details/all-about-love-new-visions/@9780060959470");
    			attr_dev(a1, "target", "_blank");
    			add_location(a1, file$f, 252, 3, 10796);
    			attr_dev(div1, "class", "bottomLineText text svelte-1vchzpm");
    			set_style(div1, "text-align", "right");
    			add_location(div1, file$f, 246, 2, 9883);
    			attr_dev(div2, "class", "text bottomLine svelte-1vchzpm");
    			add_location(div2, file$f, 245, 0, 9851);
    			attr_dev(div3, "class", "horizontalLine left svelte-1vchzpm");
    			set_style(div3, "width", "100%");
    			set_style(div3, "top", "calc(" + /*distanceBLines*/ ctx[16] + " * 8)");
    			set_style(div3, "border-top", "1px solid blue");
    			add_location(div3, file$f, 256, 0, 10950);
    			attr_dev(div4, "class", "progressline");
    			set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			add_location(div4, file$f, 259, 1, 11114);
    			attr_dev(div5, "class", "activedotnew activedotFan");
    			add_location(div5, file$f, 258, 0, 11073);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t13);
    			append_dev(div0, br);
    			append_dev(div0, t14);
    			insert_dev(target, t15, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			if (if_block18) if_block18.m(target, anchor);
    			insert_dev(target, t21, anchor);
    			if (if_block19) if_block19.m(target, anchor);
    			insert_dev(target, t22, anchor);
    			if (if_block20) if_block20.m(target, anchor);
    			insert_dev(target, t23, anchor);
    			if (if_block21) if_block21.m(target, anchor);
    			insert_dev(target, t24, anchor);
    			if (if_block22) if_block22.m(target, anchor);
    			insert_dev(target, t25, anchor);
    			if (if_block23) if_block23.m(target, anchor);
    			insert_dev(target, t26, anchor);
    			if (if_block24) if_block24.m(target, anchor);
    			insert_dev(target, t27, anchor);
    			if (if_block25) if_block25.m(target, anchor);
    			insert_dev(target, t28, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			if (if_block26) if_block26.m(div1, null);
    			append_dev(div1, t29);
    			if (if_block27) if_block27.m(div1, null);
    			append_dev(div1, t30);
    			if (if_block28) if_block28.m(div1, null);
    			append_dev(div1, t31);
    			if (if_block29) if_block29.m(div1, null);
    			append_dev(div1, t32);
    			append_dev(div1, a0);
    			append_dev(div1, t34);
    			append_dev(div1, a1);
    			insert_dev(target, t36, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t37, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    		},
    		p: function update(ctx, dirty) {
    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_29$3(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_28$4(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_27$6(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_26$6(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_25$6(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[8]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_24$8(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[9]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_23$8(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*eightthSetup*/ ctx[10]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_22$8(ctx);
    					if_block7.c();
    					if_block7.m(t7.parentNode, t7);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*ninethSetup*/ ctx[11]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_21$9(ctx);
    					if_block8.c();
    					if_block8.m(t8.parentNode, t8);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*tenthSetup*/ ctx[12]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_20$9(ctx);
    					if_block9.c();
    					if_block9.m(t9.parentNode, t9);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*eleventhSetup*/ ctx[13]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_19$9(ctx);
    					if_block10.c();
    					if_block10.m(t10.parentNode, t10);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*twelvethSetup*/ ctx[14]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_18$a(ctx);
    					if_block11.c();
    					if_block11.m(t11.parentNode, t11);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*thirteenthSetup*/ ctx[15]) {
    				if (if_block12) {
    					if_block12.p(ctx, dirty);
    				} else {
    					if_block12 = create_if_block_17$b(ctx);
    					if_block12.c();
    					if_block12.m(t12.parentNode, t12);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}

    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_16$b(ctx);
    					if_block13.c();
    					if_block13.m(t16.parentNode, t16);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_15$b(ctx);
    					if_block14.c();
    					if_block14.m(t17.parentNode, t17);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block15) {
    					if_block15.p(ctx, dirty);
    				} else {
    					if_block15 = create_if_block_14$b(ctx);
    					if_block15.c();
    					if_block15.m(t18.parentNode, t18);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block16) {
    					if_block16.p(ctx, dirty);
    				} else {
    					if_block16 = create_if_block_13$c(ctx);
    					if_block16.c();
    					if_block16.m(t19.parentNode, t19);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block17) {
    					if_block17.p(ctx, dirty);
    				} else {
    					if_block17 = create_if_block_12$c(ctx);
    					if_block17.c();
    					if_block17.m(t20.parentNode, t20);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (/*sixthSetup*/ ctx[8]) {
    				if (if_block18) {
    					if_block18.p(ctx, dirty);
    				} else {
    					if_block18 = create_if_block_11$c(ctx);
    					if_block18.c();
    					if_block18.m(t21.parentNode, t21);
    				}
    			} else if (if_block18) {
    				if_block18.d(1);
    				if_block18 = null;
    			}

    			if (/*seventhSetup*/ ctx[9]) {
    				if (if_block19) {
    					if_block19.p(ctx, dirty);
    				} else {
    					if_block19 = create_if_block_10$c(ctx);
    					if_block19.c();
    					if_block19.m(t22.parentNode, t22);
    				}
    			} else if (if_block19) {
    				if_block19.d(1);
    				if_block19 = null;
    			}

    			if (/*eightthSetup*/ ctx[10]) {
    				if (if_block20) {
    					if_block20.p(ctx, dirty);
    				} else {
    					if_block20 = create_if_block_9$d(ctx);
    					if_block20.c();
    					if_block20.m(t23.parentNode, t23);
    				}
    			} else if (if_block20) {
    				if_block20.d(1);
    				if_block20 = null;
    			}

    			if (/*ninethSetup*/ ctx[11]) {
    				if (if_block21) {
    					if_block21.p(ctx, dirty);
    				} else {
    					if_block21 = create_if_block_8$d(ctx);
    					if_block21.c();
    					if_block21.m(t24.parentNode, t24);
    				}
    			} else if (if_block21) {
    				if_block21.d(1);
    				if_block21 = null;
    			}

    			if (/*tenthSetup*/ ctx[12]) {
    				if (if_block22) {
    					if_block22.p(ctx, dirty);
    				} else {
    					if_block22 = create_if_block_7$d(ctx);
    					if_block22.c();
    					if_block22.m(t25.parentNode, t25);
    				}
    			} else if (if_block22) {
    				if_block22.d(1);
    				if_block22 = null;
    			}

    			if (/*eleventhSetup*/ ctx[13]) {
    				if (if_block23) {
    					if_block23.p(ctx, dirty);
    				} else {
    					if_block23 = create_if_block_6$d(ctx);
    					if_block23.c();
    					if_block23.m(t26.parentNode, t26);
    				}
    			} else if (if_block23) {
    				if_block23.d(1);
    				if_block23 = null;
    			}

    			if (/*twelvethSetup*/ ctx[14]) {
    				if (if_block24) {
    					if_block24.p(ctx, dirty);
    				} else {
    					if_block24 = create_if_block_5$d(ctx);
    					if_block24.c();
    					if_block24.m(t27.parentNode, t27);
    				}
    			} else if (if_block24) {
    				if_block24.d(1);
    				if_block24 = null;
    			}

    			if (/*thirteenthSetup*/ ctx[15]) {
    				if (if_block25) {
    					if_block25.p(ctx, dirty);
    				} else {
    					if_block25 = create_if_block_4$d(ctx);
    					if_block25.c();
    					if_block25.m(t28.parentNode, t28);
    				}
    			} else if (if_block25) {
    				if_block25.d(1);
    				if_block25 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block26) ; else {
    					if_block26 = create_if_block_3$d(ctx);
    					if_block26.c();
    					if_block26.m(div1, t29);
    				}
    			} else if (if_block26) {
    				if_block26.d(1);
    				if_block26 = null;
    			}

    			if (/*eightthSetup*/ ctx[10]) {
    				if (if_block27) ; else {
    					if_block27 = create_if_block_2$d(ctx);
    					if_block27.c();
    					if_block27.m(div1, t30);
    				}
    			} else if (if_block27) {
    				if_block27.d(1);
    				if_block27 = null;
    			}

    			if (/*ninethSetup*/ ctx[11]) {
    				if (if_block28) ; else {
    					if_block28 = create_if_block_1$d(ctx);
    					if_block28.c();
    					if_block28.m(div1, t31);
    				}
    			} else if (if_block28) {
    				if_block28.d(1);
    				if_block28 = null;
    			}

    			if (/*tenthSetup*/ ctx[12]) {
    				if (if_block29) ; else {
    					if_block29 = create_if_block$d(ctx);
    					if_block29.c();
    					if_block29.m(div1, t32);
    				}
    			} else if (if_block29) {
    				if_block29.d(1);
    				if_block29 = null;
    			}

    			if (dirty[0] & /*rotate*/ 1) {
    				set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t10);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t11);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t15);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t16);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t19);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t20);
    			if (if_block18) if_block18.d(detaching);
    			if (detaching) detach_dev(t21);
    			if (if_block19) if_block19.d(detaching);
    			if (detaching) detach_dev(t22);
    			if (if_block20) if_block20.d(detaching);
    			if (detaching) detach_dev(t23);
    			if (if_block21) if_block21.d(detaching);
    			if (detaching) detach_dev(t24);
    			if (if_block22) if_block22.d(detaching);
    			if (detaching) detach_dev(t25);
    			if (if_block23) if_block23.d(detaching);
    			if (detaching) detach_dev(t26);
    			if (if_block24) if_block24.d(detaching);
    			if (detaching) detach_dev(t27);
    			if (if_block25) if_block25.d(detaching);
    			if (detaching) detach_dev(t28);
    			if (detaching) detach_dev(div2);
    			if (if_block26) if_block26.d();
    			if (if_block27) if_block27.d();
    			if (if_block28) if_block28.d();
    			if (if_block29) if_block29.d();
    			if (detaching) detach_dev(t36);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t37);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let eightthSetup = false;
    	let ninethSetup = false;
    	let tenthSetup = false;
    	let eleventhSetup = false;
    	let twelvethSetup = false;
    	let thirteenthSetup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(3, firstSetup = true);
    		$$invalidate(4, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(3, firstSetup = false);
    		$$invalidate(4, secondSetup = true);
    		$$invalidate(5, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(4, secondSetup = false);
    		$$invalidate(5, thirdSetup = true);
    		$$invalidate(6, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(5, thirdSetup = false);
    		$$invalidate(6, fourthSetup = true);
    		$$invalidate(7, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(6, fourthSetup = false);
    		$$invalidate(7, fifthSetup = true);
    		$$invalidate(8, sixthSetup = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(7, fifthSetup = false);
    		$$invalidate(8, sixthSetup = true);
    		$$invalidate(9, seventhSetup = false);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(8, sixthSetup = false);
    		$$invalidate(9, seventhSetup = true);
    		$$invalidate(10, eightthSetup = false);
    	};

    	const toggleeighthSetup = () => {
    		$$invalidate(9, seventhSetup = false);
    		$$invalidate(10, eightthSetup = true);
    		$$invalidate(11, ninethSetup = false);
    	};

    	const toggleninethSetup = () => {
    		$$invalidate(10, eightthSetup = false);
    		$$invalidate(11, ninethSetup = true);
    		$$invalidate(12, tenthSetup = false);
    	};

    	const toggletenthSetup = () => {
    		$$invalidate(11, ninethSetup = false);
    		$$invalidate(12, tenthSetup = true);
    		$$invalidate(13, eleventhSetup = false);
    	};

    	const toggleeleventhSetup = () => {
    		$$invalidate(12, tenthSetup = false);
    		$$invalidate(13, eleventhSetup = true);
    		$$invalidate(14, twelvethSetup = false);
    	};

    	const toggletwelvethSetup = () => {
    		$$invalidate(13, eleventhSetup = false);
    		$$invalidate(14, twelvethSetup = true);
    		$$invalidate(15, thirteenthSetup = false);
    	};

    	const togglethirteenthSetup = () => {
    		$$invalidate(14, twelvethSetup = false);
    		$$invalidate(15, thirteenthSetup = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EnvironmentalJusticeII> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("EnvironmentalJusticeII", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(30, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		tenthSetup,
    		eleventhSetup,
    		twelvethSetup,
    		thirteenthSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup,
    		toggleeleventhSetup,
    		toggletwelvethSetup,
    		togglethirteenthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(30, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(16, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) marginSides = $$props.marginSides;
    		if ("firstSetup" in $$props) $$invalidate(3, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(4, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(5, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(6, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(7, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(8, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(9, seventhSetup = $$props.seventhSetup);
    		if ("eightthSetup" in $$props) $$invalidate(10, eightthSetup = $$props.eightthSetup);
    		if ("ninethSetup" in $$props) $$invalidate(11, ninethSetup = $$props.ninethSetup);
    		if ("tenthSetup" in $$props) $$invalidate(12, tenthSetup = $$props.tenthSetup);
    		if ("eleventhSetup" in $$props) $$invalidate(13, eleventhSetup = $$props.eleventhSetup);
    		if ("twelvethSetup" in $$props) $$invalidate(14, twelvethSetup = $$props.twelvethSetup);
    		if ("thirteenthSetup" in $$props) $$invalidate(15, thirteenthSetup = $$props.thirteenthSetup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		tenthSetup,
    		eleventhSetup,
    		twelvethSetup,
    		thirteenthSetup,
    		distanceBLines,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		toggletenthSetup,
    		toggleeleventhSetup,
    		toggletwelvethSetup,
    		togglethirteenthSetup,
    		pagetitleText
    	];
    }

    class EnvironmentalJusticeII extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$f,
    			create_fragment$f,
    			safe_not_equal,
    			{
    				pagetitleText: 30,
    				rotate: 0,
    				next: 1,
    				prev: 2
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnvironmentalJusticeII",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[30] === undefined && !("pagetitleText" in props)) {
    			console.warn("<EnvironmentalJusticeII> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[0] === undefined && !("rotate" in props)) {
    			console.warn("<EnvironmentalJusticeII> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[1] === undefined && !("next" in props)) {
    			console.warn("<EnvironmentalJusticeII> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
    			console.warn("<EnvironmentalJusticeII> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<EnvironmentalJusticeII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/ImpactofIndividualAction.svelte generated by Svelte v3.23.0 */

    const file$g = "src/specifics/ImpactofIndividualAction.svelte";

    // (49:0) {#if firstSetup}
    function create_if_block_9$e(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$g, 49, 1, 846);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[1]);
    			add_location(a, file$g, 50, 1, 907);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 2) {
    				attr_dev(a, "href", /*next*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$e.name,
    		type: "if",
    		source: "(49:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (53:0) {#if secondSetup}
    function create_if_block_8$e(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$g, 53, 1, 973);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$g, 54, 1, 1033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[12], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$e.name,
    		type: "if",
    		source: "(53:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (57:0) {#if thirdSetup}
    function create_if_block_7$e(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$g, 57, 1, 1116);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$g, 58, 1, 1177);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[13], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$e.name,
    		type: "if",
    		source: "(57:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (61:0) {#if fourthSetup}
    function create_if_block_6$e(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$g, 61, 1, 1262);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$g, 62, 1, 1322);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[14], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$e.name,
    		type: "if",
    		source: "(61:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (65:0) {#if fifthSetup}
    function create_if_block_5$e(ctx) {
    	let a;
    	let t;
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = space();
    			div = element("div");
    			attr_dev(a, "class", "buttonNext");
    			attr_dev(a, "href", /*prev*/ ctx[2]);
    			add_location(a, file$g, 65, 1, 1405);
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$g, 66, 1, 1447);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglefourthSetup*/ ctx[13], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prev*/ 4) {
    				attr_dev(a, "href", /*prev*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$e.name,
    		type: "if",
    		source: "(65:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (81:0) {#if firstSetup}
    function create_if_block_4$e(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("The argument that climate action in the West is not impactfull on it's own is simply wrong. Speaking of individual action specifically, the impact of climate action in India is ranked as Medium, while the impact of individual action in most north-western countries are ranked as High or Highest.");
    			attr_dev(div, "class", "pagetext");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$g, 81, 1, 1749);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$e.name,
    		type: "if",
    		source: "(81:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (87:0) {#if secondSetup}
    function create_if_block_3$e(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;
    	let span;
    	let t2;
    	let i0;
    	let t4;
    	let i1;
    	let t6;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Countries (non-exhaustive list) that are ranked as having Medium impact on an individual level are:");
    			br = element("br");
    			t1 = space();
    			span = element("span");
    			t2 = text("Albania, Angola, Argentina, Armenia, Azerbaijan, Bhutan, Bolivia, Botswana, ");
    			i0 = element("i");
    			i0.textContent = "Brazil";
    			t4 = text(", Chile, Columbia, Costa Rica, Croatia, Cuba, Dominican Republic, Ecuador, Egypt, El Salvador, Fiji, Gabon, Georgia, Guatemala, Guyana, Honduras, ");
    			i1 = element("i");
    			i1.textContent = "India";
    			t6 = text(", Indonesia, Jamaica, Jordan, Kyrgyz Republic, Lebanon, Lesotho, Mexico, Montenegro, North Korea, Namibia, North Macedonia, Pakistan, Panama, Peru, Philippines, Suriname, Sweden, Switzerland, Syria, Tailand, Tunisia, Uruguay, Uzbekistan, Venezuela, Vietnam.");
    			add_location(br, file$g, 88, 101, 2308);
    			add_location(i0, file$g, 89, 97, 2410);
    			add_location(i1, file$g, 89, 266, 2579);
    			attr_dev(span, "class", "text svelte-wjk3lr");
    			add_location(span, file$g, 89, 2, 2315);
    			attr_dev(div, "class", "pagetext");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$g, 87, 1, 2147);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    			append_dev(div, span);
    			append_dev(span, t2);
    			append_dev(span, i0);
    			append_dev(span, t4);
    			append_dev(span, i1);
    			append_dev(span, t6);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$e.name,
    		type: "if",
    		source: "(87:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (94:0) {#if thirdSetup}
    function create_if_block_2$e(ctx) {
    	let div0;
    	let t0;
    	let br;
    	let t1;
    	let span;
    	let t2;
    	let i0;
    	let t4;
    	let i1;
    	let t6;
    	let t7;
    	let div1;
    	let t8;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Countries (non-exhaustive list) that are ranked as having Low impact on an individual level are:");
    			br = element("br");
    			t1 = space();
    			span = element("span");
    			t2 = text("Afghanistan, Bangladesh, Benin, Burkina Faso, Burundi, ");
    			i0 = element("i");
    			i0.textContent = "Cambodia";
    			t4 = text(", Cameroon, Central African Republic, Chad, Congo, Cote d-Ivoire, Democratic Republic of Congo, Eritrea, Ethiopia, ");
    			i1 = element("i");
    			i1.textContent = "Ghana";
    			t6 = text(", Guinea, Haiti, Kenya, Lao, Liberia, Madagascar, Malawi, Mali, Mauritania, Mozambique, Myanmar, Nepal, Nicaragua, Niger, Nigeria, Papua New Guinea, Paraguay, Rwanda, Senegal, Sierra Leone, Solomon Islands, Somalia, South Sudan, Tajiksistan, Tanzania, Timor-Leste, Togo, Uganda, Vanuata, Yemen, Zambia, Zimbabwe.");
    			t7 = space();
    			div1 = element("div");
    			t8 = text("All climate action counts, but not equally.");
    			add_location(br, file$g, 95, 98, 3063);
    			add_location(i0, file$g, 96, 76, 3144);
    			add_location(i1, file$g, 96, 211, 3279);
    			attr_dev(span, "class", "text svelte-wjk3lr");
    			add_location(span, file$g, 96, 2, 3070);
    			attr_dev(div0, "class", "pagetext");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$g, 94, 1, 2905);
    			attr_dev(div1, "class", "text criticalText svelte-wjk3lr");
    			set_style(div1, "left", /*marginSides*/ ctx[9]);
    			set_style(div1, "right", /*marginSides*/ ctx[9]);
    			set_style(div1, "top", "calc((" + /*distanceBLines*/ ctx[8] + " * 0)");
    			add_location(div1, file$g, 99, 1, 3637);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, br);
    			append_dev(div0, t1);
    			append_dev(div0, span);
    			append_dev(span, t2);
    			append_dev(span, i0);
    			append_dev(span, t4);
    			append_dev(span, i1);
    			append_dev(span, t6);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t8);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$e.name,
    		type: "if",
    		source: "(94:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (103:0) {#if fourthSetup}
    function create_if_block_1$e(ctx) {
    	let div0;
    	let t0;
    	let br0;
    	let t1;
    	let span;
    	let t3;
    	let div1;
    	let t4;
    	let br1;
    	let t5;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Countries (non-exhaustive list) that are ranked as having High impact on an individual level are:");
    			br0 = element("br");
    			t1 = space();
    			span = element("span");
    			span.textContent = "Algeria, Austria, Belarus, Belgium, Bosnia and Herzegovina, Bulgaria, China, Denmark, Equatorial Guinea, Finland, France, Greece, Hungary, Iran, Iraq, Ireland, Israel, Italy, Lybia, Malaysia, Morocco, New Zealand, Norway, Poland, Portugal, Serbia, Slovakia, Slovenia, South Africa, Spain, Turkey, the U.K.";
    			t3 = space();
    			div1 = element("div");
    			t4 = text("Here, personal climate action (or lack there of) counts,");
    			br1 = element("br");
    			t5 = text("greatly.");
    			add_location(br0, file$g, 104, 99, 3988);
    			attr_dev(span, "class", "text svelte-wjk3lr");
    			add_location(span, file$g, 105, 2, 3995);
    			attr_dev(div0, "class", "pagetext");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$g, 103, 1, 3829);
    			add_location(br1, file$g, 108, 228, 4580);
    			attr_dev(div1, "class", "text criticalText svelte-wjk3lr");
    			set_style(div1, "left", /*marginSides*/ ctx[9]);
    			set_style(div1, "right", /*marginSides*/ ctx[9]);
    			set_style(div1, "top", "calc((" + /*distanceBLines*/ ctx[8] + " * 0)");
    			add_location(div1, file$g, 108, 1, 4353);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, br0);
    			append_dev(div0, t1);
    			append_dev(div0, span);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t4);
    			append_dev(div1, br1);
    			append_dev(div1, t5);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(103:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (112:0) {#if fifthSetup}
    function create_if_block$e(ctx) {
    	let div0;
    	let t0;
    	let br0;
    	let t1;
    	let span;
    	let t2;
    	let i0;
    	let t4;
    	let i1;
    	let t6;
    	let i2;
    	let t8;
    	let i3;
    	let t10;
    	let i4;
    	let t12;
    	let t13;
    	let div1;
    	let t14;
    	let br1;
    	let t15;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Countries (non-exhaustive list) that are ranked as having Highest impact on an individual level are:");
    			br0 = element("br");
    			t1 = space();
    			span = element("span");
    			t2 = text("Australia, Canada, Czech, Estonia, Germany, ");
    			i0 = element("i");
    			i0.textContent = "Iceland";
    			t4 = text(", Japan, Kazakhstan, Mongolia, Oman, Qatar, Russia, ");
    			i1 = element("i");
    			i1.textContent = "Saudi Arabia";
    			t6 = text(", ");
    			i2 = element("i");
    			i2.textContent = "South Korea";
    			t8 = text(", ");
    			i3 = element("i");
    			i3.textContent = "The Netherlands";
    			t10 = text(", Trinidad and Tobago, Turkmenistan, ");
    			i4 = element("i");
    			i4.textContent = "The U.S.";
    			t12 = text(", United Arab Emirates.");
    			t13 = space();
    			div1 = element("div");
    			t14 = text("Here, personal climate action (or lack there of) counts,");
    			br1 = element("br");
    			t15 = text("very greatly!");
    			add_location(br0, file$g, 113, 102, 4786);
    			add_location(i0, file$g, 114, 65, 4856);
    			add_location(i1, file$g, 114, 131, 4922);
    			add_location(i2, file$g, 114, 152, 4943);
    			add_location(i3, file$g, 114, 177, 4968);
    			add_location(i4, file$g, 114, 241, 5032);
    			attr_dev(span, "class", "text svelte-wjk3lr");
    			add_location(span, file$g, 114, 2, 4793);
    			attr_dev(div0, "class", "pagetext");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$g, 112, 1, 4624);
    			add_location(br1, file$g, 117, 228, 5326);
    			attr_dev(div1, "class", "text criticalText svelte-wjk3lr");
    			set_style(div1, "left", /*marginSides*/ ctx[9]);
    			set_style(div1, "right", /*marginSides*/ ctx[9]);
    			set_style(div1, "top", "calc((" + /*distanceBLines*/ ctx[8] + " * 0)");
    			add_location(div1, file$g, 117, 1, 5099);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, br0);
    			append_dev(div0, t1);
    			append_dev(div0, span);
    			append_dev(span, t2);
    			append_dev(span, i0);
    			append_dev(span, t4);
    			append_dev(span, i1);
    			append_dev(span, t6);
    			append_dev(span, i2);
    			append_dev(span, t8);
    			append_dev(span, i3);
    			append_dev(span, t10);
    			append_dev(span, i4);
    			append_dev(span, t12);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t14);
    			append_dev(div1, br1);
    			append_dev(div1, t15);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(112:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let div0;
    	let t5;
    	let br0;
    	let t6;
    	let br1;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let div1;
    	let t14;
    	let div3;
    	let div2;
    	let a;
    	let t16;
    	let t17;
    	let div5;
    	let div4;
    	let if_block0 = /*firstSetup*/ ctx[3] && create_if_block_9$e(ctx);
    	let if_block1 = /*secondSetup*/ ctx[4] && create_if_block_8$e(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[5] && create_if_block_7$e(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[6] && create_if_block_6$e(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[7] && create_if_block_5$e(ctx);
    	let if_block5 = /*firstSetup*/ ctx[3] && create_if_block_4$e(ctx);
    	let if_block6 = /*secondSetup*/ ctx[4] && create_if_block_3$e(ctx);
    	let if_block7 = /*thirdSetup*/ ctx[5] && create_if_block_2$e(ctx);
    	let if_block8 = /*fourthSetup*/ ctx[6] && create_if_block_1$e(ctx);
    	let if_block9 = /*fifthSetup*/ ctx[7] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			div0 = element("div");
    			t5 = text("Impact of");
    			br0 = element("br");
    			t6 = text("Individual");
    			br1 = element("br");
    			t7 = text("Action");
    			t8 = space();
    			if (if_block5) if_block5.c();
    			t9 = space();
    			if (if_block6) if_block6.c();
    			t10 = space();
    			if (if_block7) if_block7.c();
    			t11 = space();
    			if (if_block8) if_block8.c();
    			t12 = space();
    			if (if_block9) if_block9.c();
    			t13 = space();
    			div1 = element("div");
    			t14 = space();
    			div3 = element("div");
    			div2 = element("div");
    			a = element("a");
    			a.textContent = "[more ↗︎]";
    			t16 = text(".");
    			t17 = space();
    			div5 = element("div");
    			div4 = element("div");
    			add_location(br0, file$g, 76, 69, 1697);
    			add_location(br1, file$g, 76, 83, 1711);
    			attr_dev(div0, "class", "pagetitle");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$g, 76, 0, 1628);
    			attr_dev(div1, "class", "horizontalLine left");
    			set_style(div1, "width", "100%");
    			set_style(div1, "top", "calc(" + /*distanceBLines*/ ctx[8] + " * 8)");
    			set_style(div1, "border-top", "1px solid blue");
    			add_location(div1, file$g, 127, 0, 5369);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://feu-us.org/impact-of-individual-action/");
    			attr_dev(a, "class", "svelte-wjk3lr");
    			add_location(a, file$g, 133, 3, 5605);
    			attr_dev(div2, "class", "bottomLineText text svelte-wjk3lr");
    			set_style(div2, "text-align", "right");
    			add_location(div2, file$g, 132, 2, 5541);
    			attr_dev(div3, "class", "text bottomLine svelte-wjk3lr");
    			add_location(div3, file$g, 131, 0, 5509);
    			attr_dev(div4, "class", "progressline");
    			set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			add_location(div4, file$g, 139, 1, 5766);
    			attr_dev(div5, "class", "activedotnew activedotFan");
    			add_location(div5, file$g, 138, 0, 5725);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t5);
    			append_dev(div0, br0);
    			append_dev(div0, t6);
    			append_dev(div0, br1);
    			append_dev(div0, t7);
    			insert_dev(target, t8, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t10, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t11, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, a);
    			append_dev(div2, t16);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_9$e(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_8$e(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_7$e(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_6$e(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_5$e(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}

    			if (/*firstSetup*/ ctx[3]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_4$e(ctx);
    					if_block5.c();
    					if_block5.m(t9.parentNode, t9);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*secondSetup*/ ctx[4]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_3$e(ctx);
    					if_block6.c();
    					if_block6.m(t10.parentNode, t10);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*thirdSetup*/ ctx[5]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_2$e(ctx);
    					if_block7.c();
    					if_block7.m(t11.parentNode, t11);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*fourthSetup*/ ctx[6]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_1$e(ctx);
    					if_block8.c();
    					if_block8.m(t12.parentNode, t12);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*fifthSetup*/ ctx[7]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block$e(ctx);
    					if_block9.c();
    					if_block9.m(t13.parentNode, t13);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div4, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t8);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t10);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t11);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(3, firstSetup = true);
    		$$invalidate(4, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(3, firstSetup = false);
    		$$invalidate(4, secondSetup = true);
    		$$invalidate(5, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(4, secondSetup = false);
    		$$invalidate(5, thirdSetup = true);
    		$$invalidate(6, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(5, thirdSetup = false);
    		$$invalidate(6, fourthSetup = true);
    		$$invalidate(7, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(6, fourthSetup = false);
    		$$invalidate(7, fifthSetup = true);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ImpactofIndividualAction> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("ImpactofIndividualAction", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(15, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(15, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(8, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(9, marginSides = $$props.marginSides);
    		if ("firstSetup" in $$props) $$invalidate(3, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(4, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(5, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(6, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(7, fifthSetup = $$props.fifthSetup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rotate,
    		next,
    		prev,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		distanceBLines,
    		marginSides,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		pagetitleText
    	];
    }

    class ImpactofIndividualAction extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			pagetitleText: 15,
    			rotate: 0,
    			next: 1,
    			prev: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ImpactofIndividualAction",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[15] === undefined && !("pagetitleText" in props)) {
    			console.warn("<ImpactofIndividualAction> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[0] === undefined && !("rotate" in props)) {
    			console.warn("<ImpactofIndividualAction> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[1] === undefined && !("next" in props)) {
    			console.warn("<ImpactofIndividualAction> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
    			console.warn("<ImpactofIndividualAction> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<ImpactofIndividualAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/specifics/CriticalDecadeIII.svelte generated by Svelte v3.23.0 */

    const file$h = "src/specifics/CriticalDecadeIII.svelte";

    // (82:0) {#if firstSetup}
    function create_if_block_18$b(ctx) {
    	let div;
    	let t;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			a = element("a");
    			attr_dev(div, "class", "buttonNext");
    			add_location(div, file$h, 82, 1, 1522);
    			attr_dev(a, "class", "buttonPrev");
    			attr_dev(a, "href", /*next*/ ctx[1]);
    			add_location(a, file$h, 83, 1, 1583);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, a, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*togglesecondSetup*/ ctx[15], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*next*/ 2) {
    				attr_dev(a, "href", /*next*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$b.name,
    		type: "if",
    		source: "(82:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (86:0) {#if secondSetup}
    function create_if_block_17$c(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$h, 86, 1, 1649);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$h, 87, 1, 1709);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglethirdSetup*/ ctx[16], false, false, false),
    					listen_dev(div1, "click", /*togglefirstSetup*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$c.name,
    		type: "if",
    		source: "(86:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (90:0) {#if thirdSetup}
    function create_if_block_16$c(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$h, 90, 1, 1792);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$h, 91, 1, 1853);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefourthSetup*/ ctx[17], false, false, false),
    					listen_dev(div1, "click", /*togglesecondSetup*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$c.name,
    		type: "if",
    		source: "(90:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (94:0) {#if fourthSetup}
    function create_if_block_15$c(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$h, 94, 1, 1938);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$h, 95, 1, 1998);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglefifthSetup*/ ctx[18], false, false, false),
    					listen_dev(div1, "click", /*togglethirdSetup*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$c.name,
    		type: "if",
    		source: "(94:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (98:0) {#if fifthSetup}
    function create_if_block_14$c(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$h, 98, 1, 2081);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$h, 99, 1, 2141);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*togglesixthSetup*/ ctx[19], false, false, false),
    					listen_dev(div1, "click", /*togglefourthSetup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$c.name,
    		type: "if",
    		source: "(98:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (102:0) {#if sixthSetup}
    function create_if_block_13$d(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$h, 102, 1, 2225);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$h, 103, 1, 2287);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleseventhSetup*/ ctx[20], false, false, false),
    					listen_dev(div1, "click", /*togglefifthSetup*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$d.name,
    		type: "if",
    		source: "(102:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (106:0) {#if seventhSetup}
    function create_if_block_12$d(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$h, 106, 1, 2372);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$h, 107, 1, 2433);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleeighthSetup*/ ctx[21], false, false, false),
    					listen_dev(div1, "click", /*togglesixthSetup*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$d.name,
    		type: "if",
    		source: "(106:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (110:0) {#if eightthSetup}
    function create_if_block_11$d(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "buttonNext");
    			add_location(div0, file$h, 110, 1, 2518);
    			attr_dev(div1, "class", "buttonPrev");
    			add_location(div1, file$h, 111, 1, 2579);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*toggleninethSetup*/ ctx[22], false, false, false),
    					listen_dev(div1, "click", /*toggleseventhSetup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$d.name,
    		type: "if",
    		source: "(110:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (114:0) {#if ninethSetup}
    function create_if_block_10$d(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "buttonPrev");
    			add_location(div, file$h, 115, 1, 2732);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleeighthSetup*/ ctx[21], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$d.name,
    		type: "if",
    		source: "(114:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (126:0) {#if firstSetup}
    function create_if_block_9$f(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Climate action is a fight for human rights and dignity. It involves dismantling a system of exponential growth of capital, built on exploitation of the resources, labour and lives of those who it deems ‘inferior’.");
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 126, 1, 3054);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$f.name,
    		type: "if",
    		source: "(126:0) {#if firstSetup}",
    		ctx
    	});

    	return block;
    }

    // (132:0) {#if secondSetup}
    function create_if_block_8$f(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("At this point future people, as a collective, have been added to the long list of oppressed groups. This system has always been violent and life-killing, but at this point it is running out of life to kill, and so it’s invading the — unwritten and empty, vulnerable even — future.");
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 132, 1, 3371);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$f.name,
    		type: "if",
    		source: "(132:0) {#if secondSetup}",
    		ctx
    	});

    	return block;
    }

    // (138:0) {#if thirdSetup}
    function create_if_block_7$f(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("bell hooks explained that in a system built on domination, greed and exploitation become normalized, and dehumanization becomes acceptable — even required.");
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 138, 1, 3765);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$f.name,
    		type: "if",
    		source: "(138:0) {#if thirdSetup}",
    		ctx
    	});

    	return block;
    }

    // (144:0) {#if fourthSetup}
    function create_if_block_6$f(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("“We” did not cause this crisis, but by continuing to support the system of exploitation that is causing it, we are responsible for it (particularly those of us who hold a ‘superior’ status within this system).");
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 144, 1, 4030);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$f.name,
    		type: "if",
    		source: "(144:0) {#if fourthSetup}",
    		ctx
    	});

    	return block;
    }

    // (150:0) {#if fifthSetup}
    function create_if_block_5$f(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("We as individuals cannot “save the world” with our individual lifestyle choices alone, they mainly serve to remind us to be climate countious, our real power lies in demanding a just society. A system of exploitation will continue to operate until we decide dehumanization is unaceptable, in any form.");
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 150, 1, 4341);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$f.name,
    		type: "if",
    		source: "(150:0) {#if fifthSetup}",
    		ctx
    	});

    	return block;
    }

    // (156:0) {#if sixthSetup}
    function create_if_block_4$f(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Lethal heat is rising. It is now, in this critical decade, our responsibility to civilize. To lower our tolerance for exploitation and refuse to compromise our values. We must humanize all people (now or then) and practice radical love!");
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 156, 1, 4744);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$f.name,
    		type: "if",
    		source: "(156:0) {#if sixthSetup}",
    		ctx
    	});

    	return block;
    }

    // (162:0) {#if seventhSetup}
    function create_if_block_3$f(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("“Society’s collective fear of love must be faced if we are to lay claim to a love ethic that can inspire us and give us the courage to make necessary changes.” — bell lhooks");
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 162, 1, 5084);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$f.name,
    		type: "if",
    		source: "(162:0) {#if seventhSetup}",
    		ctx
    	});

    	return block;
    }

    // (168:0) {#if eightthSetup}
    function create_if_block_2$f(ctx) {
    	let div;
    	let t0;
    	let i0;
    	let t2;
    	let i1;
    	let t4;
    	let i2;
    	let t6;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Climate action is not action of saving “the Earth” or “the World” or “the Future”. It’s an action of respecting and loving the life and humanity ");
    			i0 = element("i");
    			i0.textContent = "on";
    			t2 = text(" the Earth, ");
    			i1 = element("i");
    			i1.textContent = "in";
    			t4 = text(" the World and ");
    			i2 = element("i");
    			i2.textContent = "in";
    			t6 = text(" the Future.");
    			add_location(i0, file$h, 169, 147, 5579);
    			add_location(i1, file$h, 169, 173, 5605);
    			add_location(i2, file$h, 169, 202, 5634);
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div, file$h, 168, 1, 5372);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, i0);
    			append_dev(div, t2);
    			append_dev(div, i1);
    			append_dev(div, t4);
    			append_dev(div, i2);
    			append_dev(div, t6);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$f.name,
    		type: "if",
    		source: "(168:0) {#if eightthSetup}",
    		ctx
    	});

    	return block;
    }

    // (174:0) {#if ninethSetup}
    function create_if_block_1$f(ctx) {
    	let div;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("→ Take a side →,");
    			br = element("br");
    			t1 = text(" → make a pledge to love radically! →");
    			add_location(br, file$h, 175, 28, 5802);
    			attr_dev(div, "class", "pagetext svelte-xe93tw");
    			set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			set_style(div, "bottom", "35%");
    			add_location(div, file$h, 174, 1, 5701);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, br);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rotate*/ 1) {
    				set_style(div, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(174:0) {#if ninethSetup}",
    		ctx
    	});

    	return block;
    }

    // (211:0) {#if Popup}
    function create_if_block$f(ctx) {
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let p0;
    	let t2;
    	let br0;
    	let t3;
    	let br1;
    	let t4;
    	let p1;
    	let span0;
    	let t6;
    	let t7;
    	let p2;
    	let span1;
    	let t9;
    	let t10;
    	let p3;
    	let span2;
    	let t12;
    	let t13;
    	let p4;
    	let span3;
    	let t15;
    	let t16;
    	let p5;
    	let span4;
    	let t18;
    	let t19;
    	let p6;
    	let span5;
    	let t21;
    	let t22;
    	let p7;
    	let span6;
    	let t24;
    	let t25;
    	let p8;
    	let span7;
    	let t27;
    	let t28;
    	let p9;
    	let span8;
    	let t30;
    	let br2;
    	let t31;
    	let t32;
    	let br3;
    	let br4;
    	let t33;
    	let p10;
    	let t34;
    	let br5;
    	let t35;
    	let br6;
    	let br7;
    	let t36;
    	let p11;
    	let t37;
    	let br8;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "X";
    			t1 = space();
    			div1 = element("div");
    			p0 = element("p");
    			t2 = text("GREAT, Thank you!");
    			br0 = element("br");
    			t3 = text(" \n\t\tHere are some suggestional guidelines:");
    			br1 = element("br");
    			t4 = space();
    			p1 = element("p");
    			span0 = element("span");
    			span0.textContent = "-";
    			t6 = text(" Hold governments/politicians and businesses accountable to cut carbon emissions by half by 2030, stop supporting those who refuse to.");
    			t7 = space();
    			p2 = element("p");
    			span1 = element("span");
    			span1.textContent = "+";
    			t9 = text(" Give your vote to canditates that emphasize solutions, ...or run yourself!");
    			t10 = space();
    			p3 = element("p");
    			span2 = element("span");
    			span2.textContent = "-";
    			t12 = text(" Hold governments/politicians and businesses accountable for valuing human rights, stop supporting those who enforce/profit from systems of exploitation.");
    			t13 = space();
    			p4 = element("p");
    			span3 = element("span");
    			span3.textContent = "+";
    			t15 = text(" Give your money to organizations that pay their employees a living wage.");
    			t16 = space();
    			p5 = element("p");
    			span4 = element("span");
    			span4.textContent = "-";
    			t18 = text(" Fight wealth inequality.");
    			t19 = space();
    			p6 = element("p");
    			span5 = element("span");
    			span5.textContent = "-";
    			t21 = text(" Fight racial inequality.");
    			t22 = space();
    			p7 = element("p");
    			span6 = element("span");
    			span6.textContent = "-";
    			t24 = text(" Fight gender inequality. In strictly practical terms, a society that fails to listen to and educate women, deprives itself of important knowledge and points of view. (We are facing an existencial crisis and we need all the brainpower we can get.)");
    			t25 = space();
    			p8 = element("p");
    			span7 = element("span");
    			span7.textContent = "-";
    			t27 = text(" Try to cut your own CO2 emissions by half by 2030 and influence those around you to do the same. Individual lifestyle changes are a drop in the ocean but they count and they keep you motivated.");
    			t28 = space();
    			p9 = element("p");
    			span8 = element("span");
    			span8.textContent = "-";
    			t30 = text(" Practice Radical Love!");
    			br2 = element("br");
    			t31 = text("“See our lives and our fate as ultimately connected to those of everyone else on the planet.”Pracice actions that “show a respect and gratitude for life”. - bell hooks all about love");
    			t32 = space();
    			br3 = element("br");
    			br4 = element("br");
    			t33 = space();
    			p10 = element("p");
    			t34 = text("This is not an exhaustive list, take it, develope it and make it your own.");
    			br5 = element("br");
    			t35 = space();
    			br6 = element("br");
    			br7 = element("br");
    			t36 = space();
    			p11 = element("p");
    			t37 = text("LOVE");
    			br8 = element("br");
    			attr_dev(div0, "class", "closebuttonPopup");
    			add_location(div0, file$h, 212, 1, 7466);
    			add_location(br0, file$h, 214, 48, 7618);
    			add_location(br1, file$h, 215, 40, 7664);
    			attr_dev(p0, "class", "criticalTextPopup");
    			add_location(p0, file$h, 214, 2, 7572);
    			attr_dev(span0, "class", "meadow");
    			add_location(span0, file$h, 217, 5, 7681);
    			add_location(p1, file$h, 217, 2, 7678);
    			attr_dev(span1, "class", "meadow");
    			add_location(span1, file$h, 218, 5, 7859);
    			add_location(p2, file$h, 218, 2, 7856);
    			attr_dev(span2, "class", "meadow");
    			add_location(span2, file$h, 219, 5, 7978);
    			add_location(p3, file$h, 219, 2, 7975);
    			attr_dev(span3, "class", "meadow");
    			add_location(span3, file$h, 220, 5, 8175);
    			add_location(p4, file$h, 220, 2, 8172);
    			attr_dev(span4, "class", "meadow");
    			add_location(span4, file$h, 221, 5, 8292);
    			add_location(p5, file$h, 221, 2, 8289);
    			attr_dev(span5, "class", "meadow");
    			add_location(span5, file$h, 222, 5, 8442);
    			add_location(p6, file$h, 222, 2, 8439);
    			attr_dev(span6, "class", "meadow");
    			add_location(span6, file$h, 223, 5, 8511);
    			add_location(p7, file$h, 223, 2, 8508);
    			attr_dev(span7, "class", "meadow");
    			add_location(span7, file$h, 225, 5, 8878);
    			add_location(p8, file$h, 225, 2, 8875);
    			attr_dev(span8, "class", "meadow");
    			add_location(span8, file$h, 226, 5, 9116);
    			add_location(br2, file$h, 226, 62, 9173);
    			add_location(p9, file$h, 226, 2, 9113);
    			add_location(br3, file$h, 229, 2, 9370);
    			add_location(br4, file$h, 229, 6, 9374);
    			add_location(br5, file$h, 231, 94, 9474);
    			add_location(p10, file$h, 231, 2, 9382);
    			add_location(br6, file$h, 234, 2, 9536);
    			add_location(br7, file$h, 234, 6, 9540);
    			add_location(br8, file$h, 236, 8, 9602);
    			attr_dev(p11, "class", "meadow");
    			add_location(p11, file$h, 235, 2, 9547);
    			attr_dev(div1, "class", "textBoxPopup textPopup");
    			add_location(div1, file$h, 213, 1, 7533);
    			attr_dev(div2, "class", "popup");
    			add_location(div2, file$h, 211, 0, 7445);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, p0);
    			append_dev(p0, t2);
    			append_dev(p0, br0);
    			append_dev(p0, t3);
    			append_dev(p0, br1);
    			append_dev(div1, t4);
    			append_dev(div1, p1);
    			append_dev(p1, span0);
    			append_dev(p1, t6);
    			append_dev(div1, t7);
    			append_dev(div1, p2);
    			append_dev(p2, span1);
    			append_dev(p2, t9);
    			append_dev(div1, t10);
    			append_dev(div1, p3);
    			append_dev(p3, span2);
    			append_dev(p3, t12);
    			append_dev(div1, t13);
    			append_dev(div1, p4);
    			append_dev(p4, span3);
    			append_dev(p4, t15);
    			append_dev(div1, t16);
    			append_dev(div1, p5);
    			append_dev(p5, span4);
    			append_dev(p5, t18);
    			append_dev(div1, t19);
    			append_dev(div1, p6);
    			append_dev(p6, span5);
    			append_dev(p6, t21);
    			append_dev(div1, t22);
    			append_dev(div1, p7);
    			append_dev(p7, span6);
    			append_dev(p7, t24);
    			append_dev(div1, t25);
    			append_dev(div1, p8);
    			append_dev(p8, span7);
    			append_dev(p8, t27);
    			append_dev(div1, t28);
    			append_dev(div1, p9);
    			append_dev(p9, span8);
    			append_dev(p9, t30);
    			append_dev(p9, br2);
    			append_dev(p9, t31);
    			append_dev(div1, t32);
    			append_dev(div1, br3);
    			append_dev(div1, br4);
    			append_dev(div1, t33);
    			append_dev(div1, p10);
    			append_dev(p10, t34);
    			append_dev(p10, br5);
    			append_dev(div1, t35);
    			append_dev(div1, br6);
    			append_dev(div1, br7);
    			append_dev(div1, t36);
    			append_dev(div1, p11);
    			append_dev(p11, t37);
    			append_dev(p11, br8);

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*togglePopupClose*/ ctx[24], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(211:0) {#if Popup}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let div0;
    	let t9;
    	let br0;
    	let t10;
    	let br1;
    	let t11;
    	let br2;
    	let t12;
    	let br3;
    	let t13;
    	let br4;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let t22;
    	let t23;
    	let t24;
    	let div2;
    	let div1;
    	let t25;
    	let div4;
    	let div3;
    	let t26;
    	let div5;
    	let t27;
    	let div6;
    	let t28;
    	let t29;
    	let if_block18_anchor;
    	let mounted;
    	let dispose;
    	let if_block0 = /*firstSetup*/ ctx[2] && create_if_block_18$b(ctx);
    	let if_block1 = /*secondSetup*/ ctx[3] && create_if_block_17$c(ctx);
    	let if_block2 = /*thirdSetup*/ ctx[4] && create_if_block_16$c(ctx);
    	let if_block3 = /*fourthSetup*/ ctx[5] && create_if_block_15$c(ctx);
    	let if_block4 = /*fifthSetup*/ ctx[6] && create_if_block_14$c(ctx);
    	let if_block5 = /*sixthSetup*/ ctx[7] && create_if_block_13$d(ctx);
    	let if_block6 = /*seventhSetup*/ ctx[8] && create_if_block_12$d(ctx);
    	let if_block7 = /*eightthSetup*/ ctx[9] && create_if_block_11$d(ctx);
    	let if_block8 = /*ninethSetup*/ ctx[10] && create_if_block_10$d(ctx);
    	let if_block9 = /*firstSetup*/ ctx[2] && create_if_block_9$f(ctx);
    	let if_block10 = /*secondSetup*/ ctx[3] && create_if_block_8$f(ctx);
    	let if_block11 = /*thirdSetup*/ ctx[4] && create_if_block_7$f(ctx);
    	let if_block12 = /*fourthSetup*/ ctx[5] && create_if_block_6$f(ctx);
    	let if_block13 = /*fifthSetup*/ ctx[6] && create_if_block_5$f(ctx);
    	let if_block14 = /*sixthSetup*/ ctx[7] && create_if_block_4$f(ctx);
    	let if_block15 = /*seventhSetup*/ ctx[8] && create_if_block_3$f(ctx);
    	let if_block16 = /*eightthSetup*/ ctx[9] && create_if_block_2$f(ctx);
    	let if_block17 = /*ninethSetup*/ ctx[10] && create_if_block_1$f(ctx);
    	let if_block18 = /*Popup*/ ctx[11] && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			t6 = space();
    			if (if_block7) if_block7.c();
    			t7 = space();
    			if (if_block8) if_block8.c();
    			t8 = space();
    			div0 = element("div");
    			t9 = text("... is the");
    			br0 = element("br");
    			t10 = text("policy of");
    			br1 = element("br");
    			t11 = text("The");
    			br2 = element("br");
    			t12 = text("Critical");
    			br3 = element("br");
    			t13 = text("Decade:");
    			br4 = element("br");
    			t14 = text("III");
    			t15 = space();
    			if (if_block9) if_block9.c();
    			t16 = space();
    			if (if_block10) if_block10.c();
    			t17 = space();
    			if (if_block11) if_block11.c();
    			t18 = space();
    			if (if_block12) if_block12.c();
    			t19 = space();
    			if (if_block13) if_block13.c();
    			t20 = space();
    			if (if_block14) if_block14.c();
    			t21 = space();
    			if (if_block15) if_block15.c();
    			t22 = space();
    			if (if_block16) if_block16.c();
    			t23 = space();
    			if (if_block17) if_block17.c();
    			t24 = space();
    			div2 = element("div");
    			div1 = element("div");
    			t25 = space();
    			div4 = element("div");
    			div3 = element("div");
    			t26 = space();
    			div5 = element("div");
    			t27 = space();
    			div6 = element("div");
    			t28 = text("Make a pledge");
    			t29 = space();
    			if (if_block18) if_block18.c();
    			if_block18_anchor = empty();
    			add_location(br0, file$h, 122, 70, 2977);
    			add_location(br1, file$h, 122, 83, 2990);
    			add_location(br2, file$h, 122, 90, 2997);
    			add_location(br3, file$h, 122, 102, 3009);
    			add_location(br4, file$h, 122, 113, 3020);
    			attr_dev(div0, "class", "pagetitle svelte-xe93tw");
    			set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			add_location(div0, file$h, 122, 0, 2907);
    			attr_dev(div1, "class", "bottomLineText text svelte-xe93tw");
    			set_style(div1, "text-align", "right");
    			add_location(div1, file$h, 186, 2, 5932);
    			attr_dev(div2, "class", "text bottomLine svelte-xe93tw");
    			add_location(div2, file$h, 185, 0, 5900);
    			attr_dev(div3, "class", "progressline");
    			set_style(div3, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			add_location(div3, file$h, 200, 1, 7056);
    			attr_dev(div4, "class", "activedotnew activedotFan");
    			add_location(div4, file$h, 199, 0, 7015);
    			attr_dev(div5, "class", "horizontalLine left svelte-xe93tw");
    			set_style(div5, "width", "100%");
    			set_style(div5, "top", "calc(" + /*distanceBLines*/ ctx[12] + " * 8)");
    			set_style(div5, "border-top", "1px solid blue");
    			add_location(div5, file$h, 204, 0, 7148);
    			attr_dev(div6, "class", "text criticalText svelte-xe93tw");
    			set_style(div6, "left", /*marginSides*/ ctx[13]);
    			set_style(div6, "right", /*marginSides*/ ctx[13]);
    			set_style(div6, "top", "calc((" + /*distanceBLines*/ ctx[12] + " * 8)");
    			add_location(div6, file$h, 207, 0, 7272);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block8) if_block8.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t9);
    			append_dev(div0, br0);
    			append_dev(div0, t10);
    			append_dev(div0, br1);
    			append_dev(div0, t11);
    			append_dev(div0, br2);
    			append_dev(div0, t12);
    			append_dev(div0, br3);
    			append_dev(div0, t13);
    			append_dev(div0, br4);
    			append_dev(div0, t14);
    			insert_dev(target, t15, anchor);
    			if (if_block9) if_block9.m(target, anchor);
    			insert_dev(target, t16, anchor);
    			if (if_block10) if_block10.m(target, anchor);
    			insert_dev(target, t17, anchor);
    			if (if_block11) if_block11.m(target, anchor);
    			insert_dev(target, t18, anchor);
    			if (if_block12) if_block12.m(target, anchor);
    			insert_dev(target, t19, anchor);
    			if (if_block13) if_block13.m(target, anchor);
    			insert_dev(target, t20, anchor);
    			if (if_block14) if_block14.m(target, anchor);
    			insert_dev(target, t21, anchor);
    			if (if_block15) if_block15.m(target, anchor);
    			insert_dev(target, t22, anchor);
    			if (if_block16) if_block16.m(target, anchor);
    			insert_dev(target, t23, anchor);
    			if (if_block17) if_block17.m(target, anchor);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			insert_dev(target, t26, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t27, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, t28);
    			insert_dev(target, t29, anchor);
    			if (if_block18) if_block18.m(target, anchor);
    			insert_dev(target, if_block18_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div6, "click", /*togglePopup*/ ctx[23], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*firstSetup*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_18$b(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*secondSetup*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_17$c(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*thirdSetup*/ ctx[4]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_16$c(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*fourthSetup*/ ctx[5]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_15$c(ctx);
    					if_block3.c();
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*fifthSetup*/ ctx[6]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_14$c(ctx);
    					if_block4.c();
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*sixthSetup*/ ctx[7]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_13$d(ctx);
    					if_block5.c();
    					if_block5.m(t5.parentNode, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*seventhSetup*/ ctx[8]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_12$d(ctx);
    					if_block6.c();
    					if_block6.m(t6.parentNode, t6);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*eightthSetup*/ ctx[9]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_11$d(ctx);
    					if_block7.c();
    					if_block7.m(t7.parentNode, t7);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*ninethSetup*/ ctx[10]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_10$d(ctx);
    					if_block8.c();
    					if_block8.m(t8.parentNode, t8);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div0, "transform", "rotate(" + /*rotate*/ ctx[0] + ")");
    			}

    			if (/*firstSetup*/ ctx[2]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_9$f(ctx);
    					if_block9.c();
    					if_block9.m(t16.parentNode, t16);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (/*secondSetup*/ ctx[3]) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block_8$f(ctx);
    					if_block10.c();
    					if_block10.m(t17.parentNode, t17);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if (/*thirdSetup*/ ctx[4]) {
    				if (if_block11) {
    					if_block11.p(ctx, dirty);
    				} else {
    					if_block11 = create_if_block_7$f(ctx);
    					if_block11.c();
    					if_block11.m(t18.parentNode, t18);
    				}
    			} else if (if_block11) {
    				if_block11.d(1);
    				if_block11 = null;
    			}

    			if (/*fourthSetup*/ ctx[5]) {
    				if (if_block12) {
    					if_block12.p(ctx, dirty);
    				} else {
    					if_block12 = create_if_block_6$f(ctx);
    					if_block12.c();
    					if_block12.m(t19.parentNode, t19);
    				}
    			} else if (if_block12) {
    				if_block12.d(1);
    				if_block12 = null;
    			}

    			if (/*fifthSetup*/ ctx[6]) {
    				if (if_block13) {
    					if_block13.p(ctx, dirty);
    				} else {
    					if_block13 = create_if_block_5$f(ctx);
    					if_block13.c();
    					if_block13.m(t20.parentNode, t20);
    				}
    			} else if (if_block13) {
    				if_block13.d(1);
    				if_block13 = null;
    			}

    			if (/*sixthSetup*/ ctx[7]) {
    				if (if_block14) {
    					if_block14.p(ctx, dirty);
    				} else {
    					if_block14 = create_if_block_4$f(ctx);
    					if_block14.c();
    					if_block14.m(t21.parentNode, t21);
    				}
    			} else if (if_block14) {
    				if_block14.d(1);
    				if_block14 = null;
    			}

    			if (/*seventhSetup*/ ctx[8]) {
    				if (if_block15) {
    					if_block15.p(ctx, dirty);
    				} else {
    					if_block15 = create_if_block_3$f(ctx);
    					if_block15.c();
    					if_block15.m(t22.parentNode, t22);
    				}
    			} else if (if_block15) {
    				if_block15.d(1);
    				if_block15 = null;
    			}

    			if (/*eightthSetup*/ ctx[9]) {
    				if (if_block16) {
    					if_block16.p(ctx, dirty);
    				} else {
    					if_block16 = create_if_block_2$f(ctx);
    					if_block16.c();
    					if_block16.m(t23.parentNode, t23);
    				}
    			} else if (if_block16) {
    				if_block16.d(1);
    				if_block16 = null;
    			}

    			if (/*ninethSetup*/ ctx[10]) {
    				if (if_block17) {
    					if_block17.p(ctx, dirty);
    				} else {
    					if_block17 = create_if_block_1$f(ctx);
    					if_block17.c();
    					if_block17.m(t24.parentNode, t24);
    				}
    			} else if (if_block17) {
    				if_block17.d(1);
    				if_block17 = null;
    			}

    			if (dirty & /*rotate*/ 1) {
    				set_style(div3, "transform", "rotate(calc(0deg - " + /*rotate*/ ctx[0] + "))");
    			}

    			if (/*Popup*/ ctx[11]) {
    				if (if_block18) {
    					if_block18.p(ctx, dirty);
    				} else {
    					if_block18 = create_if_block$f(ctx);
    					if_block18.c();
    					if_block18.m(if_block18_anchor.parentNode, if_block18_anchor);
    				}
    			} else if (if_block18) {
    				if_block18.d(1);
    				if_block18 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block8) if_block8.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t15);
    			if (if_block9) if_block9.d(detaching);
    			if (detaching) detach_dev(t16);
    			if (if_block10) if_block10.d(detaching);
    			if (detaching) detach_dev(t17);
    			if (if_block11) if_block11.d(detaching);
    			if (detaching) detach_dev(t18);
    			if (if_block12) if_block12.d(detaching);
    			if (detaching) detach_dev(t19);
    			if (if_block13) if_block13.d(detaching);
    			if (detaching) detach_dev(t20);
    			if (if_block14) if_block14.d(detaching);
    			if (detaching) detach_dev(t21);
    			if (if_block15) if_block15.d(detaching);
    			if (detaching) detach_dev(t22);
    			if (if_block16) if_block16.d(detaching);
    			if (detaching) detach_dev(t23);
    			if (if_block17) if_block17.d(detaching);
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t26);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t27);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t29);
    			if (if_block18) if_block18.d(detaching);
    			if (detaching) detach_dev(if_block18_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { pagetitleText } = $$props;
    	let { rotate } = $$props;
    	let { next } = $$props;
    	let { prev } = $$props;
    	let distanceBLines = "calc((100% - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let firstSetup = true;
    	let secondSetup = false;
    	let thirdSetup = false;
    	let fourthSetup = false;
    	let fifthSetup = false;
    	let sixthSetup = false;
    	let seventhSetup = false;
    	let eightthSetup = false;
    	let ninethSetup = false;
    	let Popup = false;

    	const togglefirstSetup = () => {
    		$$invalidate(2, firstSetup = true);
    		$$invalidate(3, secondSetup = false);
    	};

    	const togglesecondSetup = () => {
    		$$invalidate(2, firstSetup = false);
    		$$invalidate(3, secondSetup = true);
    		$$invalidate(4, thirdSetup = false);
    	};

    	const togglethirdSetup = () => {
    		$$invalidate(3, secondSetup = false);
    		$$invalidate(4, thirdSetup = true);
    		$$invalidate(5, fourthSetup = false);
    	};

    	const togglefourthSetup = () => {
    		$$invalidate(4, thirdSetup = false);
    		$$invalidate(5, fourthSetup = true);
    		$$invalidate(6, fifthSetup = false);
    	};

    	const togglefifthSetup = () => {
    		$$invalidate(5, fourthSetup = false);
    		$$invalidate(6, fifthSetup = true);
    		$$invalidate(7, sixthSetup = false);
    	};

    	const togglesixthSetup = () => {
    		$$invalidate(6, fifthSetup = false);
    		$$invalidate(7, sixthSetup = true);
    		$$invalidate(8, seventhSetup = false);
    	};

    	const toggleseventhSetup = () => {
    		$$invalidate(7, sixthSetup = false);
    		$$invalidate(8, seventhSetup = true);
    		$$invalidate(9, eightthSetup = false);
    	};

    	const toggleeighthSetup = () => {
    		$$invalidate(8, seventhSetup = false);
    		$$invalidate(9, eightthSetup = true);
    		$$invalidate(10, ninethSetup = false);
    	};

    	const toggleninethSetup = () => {
    		$$invalidate(9, eightthSetup = false);
    		$$invalidate(10, ninethSetup = true);
    		tenthSetup = false;
    	};

    	const togglePopup = () => {
    		$$invalidate(11, Popup = true);
    	};

    	const togglePopupClose = () => {
    		$$invalidate(11, Popup = false);
    	};

    	const writable_props = ["pagetitleText", "rotate", "next", "prev"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CriticalDecadeIII> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("CriticalDecadeIII", $$slots, []);

    	$$self.$set = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(25, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(26, prev = $$props.prev);
    	};

    	$$self.$capture_state = () => ({
    		pagetitleText,
    		rotate,
    		next,
    		prev,
    		distanceBLines,
    		marginSides,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		Popup,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		togglePopup,
    		togglePopupClose
    	});

    	$$self.$inject_state = $$props => {
    		if ("pagetitleText" in $$props) $$invalidate(25, pagetitleText = $$props.pagetitleText);
    		if ("rotate" in $$props) $$invalidate(0, rotate = $$props.rotate);
    		if ("next" in $$props) $$invalidate(1, next = $$props.next);
    		if ("prev" in $$props) $$invalidate(26, prev = $$props.prev);
    		if ("distanceBLines" in $$props) $$invalidate(12, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(13, marginSides = $$props.marginSides);
    		if ("firstSetup" in $$props) $$invalidate(2, firstSetup = $$props.firstSetup);
    		if ("secondSetup" in $$props) $$invalidate(3, secondSetup = $$props.secondSetup);
    		if ("thirdSetup" in $$props) $$invalidate(4, thirdSetup = $$props.thirdSetup);
    		if ("fourthSetup" in $$props) $$invalidate(5, fourthSetup = $$props.fourthSetup);
    		if ("fifthSetup" in $$props) $$invalidate(6, fifthSetup = $$props.fifthSetup);
    		if ("sixthSetup" in $$props) $$invalidate(7, sixthSetup = $$props.sixthSetup);
    		if ("seventhSetup" in $$props) $$invalidate(8, seventhSetup = $$props.seventhSetup);
    		if ("eightthSetup" in $$props) $$invalidate(9, eightthSetup = $$props.eightthSetup);
    		if ("ninethSetup" in $$props) $$invalidate(10, ninethSetup = $$props.ninethSetup);
    		if ("Popup" in $$props) $$invalidate(11, Popup = $$props.Popup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rotate,
    		next,
    		firstSetup,
    		secondSetup,
    		thirdSetup,
    		fourthSetup,
    		fifthSetup,
    		sixthSetup,
    		seventhSetup,
    		eightthSetup,
    		ninethSetup,
    		Popup,
    		distanceBLines,
    		marginSides,
    		togglefirstSetup,
    		togglesecondSetup,
    		togglethirdSetup,
    		togglefourthSetup,
    		togglefifthSetup,
    		togglesixthSetup,
    		toggleseventhSetup,
    		toggleeighthSetup,
    		toggleninethSetup,
    		togglePopup,
    		togglePopupClose,
    		pagetitleText,
    		prev
    	];
    }

    class CriticalDecadeIII extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			pagetitleText: 25,
    			rotate: 0,
    			next: 1,
    			prev: 26
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CriticalDecadeIII",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pagetitleText*/ ctx[25] === undefined && !("pagetitleText" in props)) {
    			console.warn("<CriticalDecadeIII> was created without expected prop 'pagetitleText'");
    		}

    		if (/*rotate*/ ctx[0] === undefined && !("rotate" in props)) {
    			console.warn("<CriticalDecadeIII> was created without expected prop 'rotate'");
    		}

    		if (/*next*/ ctx[1] === undefined && !("next" in props)) {
    			console.warn("<CriticalDecadeIII> was created without expected prop 'next'");
    		}

    		if (/*prev*/ ctx[26] === undefined && !("prev" in props)) {
    			console.warn("<CriticalDecadeIII> was created without expected prop 'prev'");
    		}
    	}

    	get pagetitleText() {
    		throw new Error("<CriticalDecadeIII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagetitleText(value) {
    		throw new Error("<CriticalDecadeIII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<CriticalDecadeIII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<CriticalDecadeIII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		throw new Error("<CriticalDecadeIII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set next(value) {
    		throw new Error("<CriticalDecadeIII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prev() {
    		throw new Error("<CriticalDecadeIII>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prev(value) {
    		throw new Error("<CriticalDecadeIII>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.23.0 */
    const file$i = "src/App.svelte";

    // (75:0) {#if scrollToFront}
    function create_if_block_1$g(ctx) {
    	let a;
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let t3;
    	let div2;
    	let t4;
    	let sub;
    	let t6;
    	let img;
    	let img_src_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			div0 = element("div");
    			t0 = text("(Please lock your phone in portrait mode)");
    			t1 = space();
    			div1 = element("div");
    			t2 = text("(Click to open)");
    			t3 = space();
    			div2 = element("div");
    			t4 = text("Now & then");
    			sub = element("sub");
    			sub.textContent = "2";
    			t6 = space();
    			img = element("img");
    			attr_dev(div0, "class", "text criticalText animone svelte-1mio7bf");
    			set_style(div0, "left", /*marginSides*/ ctx[3]);
    			set_style(div0, "right", /*marginSides*/ ctx[3]);
    			set_style(div0, "top", "calc((" + /*distanceBLines*/ ctx[2] + " * 8)");
    			add_location(div0, file$i, 76, 2, 3713);
    			attr_dev(div1, "class", "text criticalText animtwo svelte-1mio7bf");
    			set_style(div1, "left", /*marginSides*/ ctx[3]);
    			set_style(div1, "right", /*marginSides*/ ctx[3]);
    			set_style(div1, "top", "calc((" + /*distanceBLines*/ ctx[2] + " * 8)");
    			add_location(div1, file$i, 79, 2, 3894);
    			add_location(sub, file$i, 82, 74, 4121);
    			attr_dev(div2, "class", "pagetitle svelte-1mio7bf");
    			set_style(div2, "transform", "rotate(-90deg)");
    			add_location(div2, file$i, 82, 2, 4049);
    			attr_dev(img, "class", "coverfan");
    			if (img.src !== (img_src_value = "imgs/fansmaller.jpg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$i, 83, 2, 4142);
    			attr_dev(a, "href", "#front");
    			attr_dev(a, "class", "scrollToFront");
    			add_location(a, file$i, 75, 1, 3649);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, div0);
    			append_dev(div0, t0);
    			append_dev(a, t1);
    			append_dev(a, div1);
    			append_dev(div1, t2);
    			append_dev(a, t3);
    			append_dev(a, div2);
    			append_dev(div2, t4);
    			append_dev(div2, sub);
    			append_dev(a, t6);
    			append_dev(a, img);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*toggleHide*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(75:0) {#if scrollToFront}",
    		ctx
    	});

    	return block;
    }

    // (88:0) {#if Main}
    function create_if_block$g(ctx) {
    	let div32;
    	let div1;
    	let div0;
    	let t0;
    	let div3;
    	let div2;
    	let t1;
    	let div5;
    	let div4;
    	let t2;
    	let div7;
    	let div6;
    	let t3;
    	let div9;
    	let div8;
    	let t4;
    	let div11;
    	let div10;
    	let t5;
    	let div13;
    	let div12;
    	let t6;
    	let div15;
    	let div14;
    	let t7;
    	let div17;
    	let div16;
    	let t8;
    	let div19;
    	let div18;
    	let t9;
    	let div21;
    	let div20;
    	let t10;
    	let div23;
    	let div22;
    	let t11;
    	let div25;
    	let div24;
    	let t12;
    	let div27;
    	let div26;
    	let t13;
    	let div29;
    	let div28;
    	let t14;
    	let div31;
    	let div30;
    	let t15;
    	let current;

    	const criticaldecadeiii = new CriticalDecadeIII({
    			props: {
    				pagetitleText: "...is the policy of the Critical Decade: III",
    				rotate: "90deg",
    				next: "#page2"
    			},
    			$$inline: true
    		});

    	const environmentaljusticeii = new EnvironmentalJusticeII({
    			props: {
    				pagetitleText: "Radical love...",
    				rotate: "78deg",
    				next: "#page3",
    				prev: "#page1"
    			},
    			$$inline: true
    		});

    	const usa = new USA({
    			props: {
    				pagetitleText: "The U.S.",
    				rotate: "66deg",
    				next: "#page4",
    				prev: "#page2"
    			},
    			$$inline: true
    		});

    	const brazil = new Brazil({
    			props: {
    				pagetitleText: "Brazil",
    				rotate: "54deg",
    				next: "#page5",
    				prev: "#page3"
    			},
    			$$inline: true
    		});

    	const environmentaljustice = new EnvironmentalJustice({
    			props: {
    				pagetitleText: "Environmental Justice: I",
    				rotate: "42deg",
    				next: "#page6",
    				prev: "#page4"
    			},
    			$$inline: true
    		});

    	const iceland = new Iceland({
    			props: {
    				pagetitleText: "Iceland",
    				rotate: "30deg",
    				next: "#page7",
    				prev: "#page5"
    			},
    			$$inline: true
    		});

    	const ghana = new Ghana({
    			props: {
    				pagetitleText: "Ghana",
    				rotate: "18deg",
    				next: "#page8",
    				prev: "#page6"
    			},
    			$$inline: true
    		});

    	const saudiarabia = new SaudiArabia({
    			props: {
    				pagetitleText: "Saudi Arabia",
    				rotate: "6deg",
    				next: "#page9",
    				prev: "#page7"
    			},
    			$$inline: true
    		});

    	const impactofindividualaction = new ImpactofIndividualAction({
    			props: {
    				pagetitleText: "Impact of Individual Action",
    				rotate: "-6deg",
    				next: "#page10",
    				prev: "#page8"
    			},
    			$$inline: true
    		});

    	const india = new India({
    			props: {
    				pagetitleText: "India",
    				rotate: "-18deg",
    				next: "#page11",
    				prev: "#page9"
    			},
    			$$inline: true
    		});

    	const criticaldecadeii = new CriticalDecadeII({
    			props: {
    				pagetitleText: "The Critical Decade: II",
    				rotate: "-30deg",
    				next: "#page12",
    				prev: "#page10"
    			},
    			$$inline: true
    		});

    	const criticaldecadei = new CriticalDecadeI({
    			props: {
    				pagetitleText: "The Critical Decade: I",
    				rotate: "-42deg",
    				next: "#page13",
    				prev: "#page11"
    			},
    			$$inline: true
    		});

    	const cambodia = new Cambodia({
    			props: {
    				pagetitleText: "Cambodia",
    				rotate: "-54deg",
    				next: "#page14",
    				prev: "#page12"
    			},
    			$$inline: true
    		});

    	const southkorea = new SouthKorea({
    			props: {
    				pagetitleText: "South Korea",
    				rotate: "-66deg",
    				next: "#page15",
    				prev: "#page13"
    			},
    			$$inline: true
    		});

    	const extremeheati = new ExtremeHeatI({
    			props: {
    				pagetitleText: "Extreme heat",
    				rotate: "-78deg",
    				next: "#front",
    				prev: "#page14"
    			},
    			$$inline: true
    		});

    	const cover = new Cover({
    			props: {
    				pagetitleText: "now & then",
    				rotate: "-90deg",
    				prev: "#page15"
    			},
    			$$inline: true
    		});

    	const footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div32 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(criticaldecadeiii.$$.fragment);
    			t0 = space();
    			div3 = element("div");
    			div2 = element("div");
    			create_component(environmentaljusticeii.$$.fragment);
    			t1 = space();
    			div5 = element("div");
    			div4 = element("div");
    			create_component(usa.$$.fragment);
    			t2 = space();
    			div7 = element("div");
    			div6 = element("div");
    			create_component(brazil.$$.fragment);
    			t3 = space();
    			div9 = element("div");
    			div8 = element("div");
    			create_component(environmentaljustice.$$.fragment);
    			t4 = space();
    			div11 = element("div");
    			div10 = element("div");
    			create_component(iceland.$$.fragment);
    			t5 = space();
    			div13 = element("div");
    			div12 = element("div");
    			create_component(ghana.$$.fragment);
    			t6 = space();
    			div15 = element("div");
    			div14 = element("div");
    			create_component(saudiarabia.$$.fragment);
    			t7 = space();
    			div17 = element("div");
    			div16 = element("div");
    			create_component(impactofindividualaction.$$.fragment);
    			t8 = space();
    			div19 = element("div");
    			div18 = element("div");
    			create_component(india.$$.fragment);
    			t9 = space();
    			div21 = element("div");
    			div20 = element("div");
    			create_component(criticaldecadeii.$$.fragment);
    			t10 = space();
    			div23 = element("div");
    			div22 = element("div");
    			create_component(criticaldecadei.$$.fragment);
    			t11 = space();
    			div25 = element("div");
    			div24 = element("div");
    			create_component(cambodia.$$.fragment);
    			t12 = space();
    			div27 = element("div");
    			div26 = element("div");
    			create_component(southkorea.$$.fragment);
    			t13 = space();
    			div29 = element("div");
    			div28 = element("div");
    			create_component(extremeheati.$$.fragment);
    			t14 = space();
    			div31 = element("div");
    			div30 = element("div");
    			create_component(cover.$$.fragment);
    			t15 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(div0, "class", "content");
    			add_location(div0, file$i, 96, 2, 4448);
    			attr_dev(div1, "class", "overflowBreaker");
    			add_location(div1, file$i, 95, 1, 4416);
    			attr_dev(div2, "class", "content");
    			add_location(div2, file$i, 99, 2, 4651);
    			attr_dev(div3, "class", "overflowBreaker");
    			add_location(div3, file$i, 98, 1, 4619);
    			attr_dev(div4, "class", "content country");
    			add_location(div4, file$i, 102, 2, 4844);
    			attr_dev(div5, "class", "overflowBreaker");
    			add_location(div5, file$i, 101, 1, 4812);
    			attr_dev(div6, "class", "content country");
    			add_location(div6, file$i, 105, 2, 5000);
    			attr_dev(div7, "class", "overflowBreaker");
    			add_location(div7, file$i, 104, 1, 4968);
    			attr_dev(div8, "class", "content");
    			add_location(div8, file$i, 108, 2, 5160);
    			attr_dev(div9, "class", "overflowBreaker");
    			add_location(div9, file$i, 107, 1, 5128);
    			attr_dev(div10, "class", "content country");
    			add_location(div10, file$i, 111, 2, 5363);
    			attr_dev(div11, "class", "overflowBreaker");
    			add_location(div11, file$i, 110, 1, 5331);
    			attr_dev(div12, "class", "content country");
    			add_location(div12, file$i, 114, 2, 5526);
    			attr_dev(div13, "class", "overflowBreaker");
    			add_location(div13, file$i, 113, 1, 5494);
    			attr_dev(div14, "class", "content country");
    			add_location(div14, file$i, 117, 2, 5683);
    			attr_dev(div15, "class", "overflowBreaker");
    			add_location(div15, file$i, 116, 1, 5651);
    			attr_dev(div16, "class", "content");
    			add_location(div16, file$i, 120, 2, 5858);
    			attr_dev(div17, "class", "overflowBreaker");
    			add_location(div17, file$i, 119, 1, 5826);
    			attr_dev(div18, "class", "content country");
    			add_location(div18, file$i, 123, 2, 6068);
    			attr_dev(div19, "class", "overflowBreaker");
    			add_location(div19, file$i, 122, 1, 6036);
    			attr_dev(div20, "class", "content");
    			add_location(div20, file$i, 126, 2, 6227);
    			attr_dev(div21, "class", "overflowBreaker");
    			add_location(div21, file$i, 125, 1, 6195);
    			attr_dev(div22, "class", "content");
    			add_location(div22, file$i, 129, 2, 6424);
    			attr_dev(div23, "class", "overflowBreaker");
    			add_location(div23, file$i, 128, 1, 6392);
    			attr_dev(div24, "class", "content country");
    			add_location(div24, file$i, 132, 2, 6618);
    			attr_dev(div25, "class", "overflowBreaker");
    			add_location(div25, file$i, 131, 1, 6586);
    			attr_dev(div26, "class", "content country");
    			add_location(div26, file$i, 135, 2, 6787);
    			attr_dev(div27, "class", "overflowBreaker");
    			add_location(div27, file$i, 134, 1, 6755);
    			attr_dev(div28, "class", "content");
    			add_location(div28, file$i, 138, 2, 6963);
    			attr_dev(div29, "class", "overflowBreaker");
    			add_location(div29, file$i, 137, 1, 6931);
    			attr_dev(div30, "class", "content");
    			add_location(div30, file$i, 141, 2, 7135);
    			attr_dev(div31, "class", "overflowBreaker");
    			add_location(div31, file$i, 140, 1, 7103);
    			attr_dev(div32, "class", "newmain");
    			add_location(div32, file$i, 88, 0, 4215);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div32, anchor);
    			append_dev(div32, div1);
    			append_dev(div1, div0);
    			mount_component(criticaldecadeiii, div0, null);
    			append_dev(div32, t0);
    			append_dev(div32, div3);
    			append_dev(div3, div2);
    			mount_component(environmentaljusticeii, div2, null);
    			append_dev(div32, t1);
    			append_dev(div32, div5);
    			append_dev(div5, div4);
    			mount_component(usa, div4, null);
    			append_dev(div32, t2);
    			append_dev(div32, div7);
    			append_dev(div7, div6);
    			mount_component(brazil, div6, null);
    			append_dev(div32, t3);
    			append_dev(div32, div9);
    			append_dev(div9, div8);
    			mount_component(environmentaljustice, div8, null);
    			append_dev(div32, t4);
    			append_dev(div32, div11);
    			append_dev(div11, div10);
    			mount_component(iceland, div10, null);
    			append_dev(div32, t5);
    			append_dev(div32, div13);
    			append_dev(div13, div12);
    			mount_component(ghana, div12, null);
    			append_dev(div32, t6);
    			append_dev(div32, div15);
    			append_dev(div15, div14);
    			mount_component(saudiarabia, div14, null);
    			append_dev(div32, t7);
    			append_dev(div32, div17);
    			append_dev(div17, div16);
    			mount_component(impactofindividualaction, div16, null);
    			append_dev(div32, t8);
    			append_dev(div32, div19);
    			append_dev(div19, div18);
    			mount_component(india, div18, null);
    			append_dev(div32, t9);
    			append_dev(div32, div21);
    			append_dev(div21, div20);
    			mount_component(criticaldecadeii, div20, null);
    			append_dev(div32, t10);
    			append_dev(div32, div23);
    			append_dev(div23, div22);
    			mount_component(criticaldecadei, div22, null);
    			append_dev(div32, t11);
    			append_dev(div32, div25);
    			append_dev(div25, div24);
    			mount_component(cambodia, div24, null);
    			append_dev(div32, t12);
    			append_dev(div32, div27);
    			append_dev(div27, div26);
    			mount_component(southkorea, div26, null);
    			append_dev(div32, t13);
    			append_dev(div32, div29);
    			append_dev(div29, div28);
    			mount_component(extremeheati, div28, null);
    			append_dev(div32, t14);
    			append_dev(div32, div31);
    			append_dev(div31, div30);
    			mount_component(cover, div30, null);
    			insert_dev(target, t15, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(criticaldecadeiii.$$.fragment, local);
    			transition_in(environmentaljusticeii.$$.fragment, local);
    			transition_in(usa.$$.fragment, local);
    			transition_in(brazil.$$.fragment, local);
    			transition_in(environmentaljustice.$$.fragment, local);
    			transition_in(iceland.$$.fragment, local);
    			transition_in(ghana.$$.fragment, local);
    			transition_in(saudiarabia.$$.fragment, local);
    			transition_in(impactofindividualaction.$$.fragment, local);
    			transition_in(india.$$.fragment, local);
    			transition_in(criticaldecadeii.$$.fragment, local);
    			transition_in(criticaldecadei.$$.fragment, local);
    			transition_in(cambodia.$$.fragment, local);
    			transition_in(southkorea.$$.fragment, local);
    			transition_in(extremeheati.$$.fragment, local);
    			transition_in(cover.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(criticaldecadeiii.$$.fragment, local);
    			transition_out(environmentaljusticeii.$$.fragment, local);
    			transition_out(usa.$$.fragment, local);
    			transition_out(brazil.$$.fragment, local);
    			transition_out(environmentaljustice.$$.fragment, local);
    			transition_out(iceland.$$.fragment, local);
    			transition_out(ghana.$$.fragment, local);
    			transition_out(saudiarabia.$$.fragment, local);
    			transition_out(impactofindividualaction.$$.fragment, local);
    			transition_out(india.$$.fragment, local);
    			transition_out(criticaldecadeii.$$.fragment, local);
    			transition_out(criticaldecadei.$$.fragment, local);
    			transition_out(cambodia.$$.fragment, local);
    			transition_out(southkorea.$$.fragment, local);
    			transition_out(extremeheati.$$.fragment, local);
    			transition_out(cover.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div32);
    			destroy_component(criticaldecadeiii);
    			destroy_component(environmentaljusticeii);
    			destroy_component(usa);
    			destroy_component(brazil);
    			destroy_component(environmentaljustice);
    			destroy_component(iceland);
    			destroy_component(ghana);
    			destroy_component(saudiarabia);
    			destroy_component(impactofindividualaction);
    			destroy_component(india);
    			destroy_component(criticaldecadeii);
    			destroy_component(criticaldecadei);
    			destroy_component(cambodia);
    			destroy_component(southkorea);
    			destroy_component(extremeheati);
    			destroy_component(cover);
    			if (detaching) detach_dev(t15);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(88:0) {#if Main}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let t0;
    	let div1;
    	let div0;
    	let t2;
    	let t3;
    	let if_block1_anchor;
    	let current;
    	const header = new Header({ $$inline: true });
    	let if_block0 = /*scrollToFront*/ ctx[0] && create_if_block_1$g(ctx);
    	let if_block1 = /*Main*/ ctx[1] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "(Please switch to mobile view)";
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(div0, "class", "please");
    			add_location(div0, file$i, 71, 1, 3563);
    			attr_dev(div1, "class", "desktopView");
    			add_location(div1, file$i, 70, 0, 3536);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t2, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*scrollToFront*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$g(ctx);
    					if_block0.c();
    					if_block0.m(t3.parentNode, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*Main*/ ctx[1]) {
    				if (if_block1) {
    					if (dirty & /*Main*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$g(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let distanceBLines = "calc((95vh - 1px) / 9 * 1)";
    	let marginSides = "calc(100vw / 16)";
    	let scrollToFront = true;
    	let Main = false;

    	const toggleHide = () => {
    		$$invalidate(0, scrollToFront = false);
    		$$invalidate(1, Main = true);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("App", $$slots, []);

    	$$self.$capture_state = () => ({
    		Footer,
    		Header,
    		Cover,
    		ExtremeHeatI,
    		CriticalDecadeI,
    		CriticalDecadeII,
    		USA,
    		Brazil,
    		Iceland,
    		Ghana,
    		SaudiArabia,
    		India,
    		Cambodia,
    		SouthKorea,
    		EnvironmentalJustice,
    		EnvironmentalJusticeII,
    		ImpactofIndividualAction,
    		CriticalDecadeIII,
    		distanceBLines,
    		marginSides,
    		scrollToFront,
    		Main,
    		toggleHide
    	});

    	$$self.$inject_state = $$props => {
    		if ("distanceBLines" in $$props) $$invalidate(2, distanceBLines = $$props.distanceBLines);
    		if ("marginSides" in $$props) $$invalidate(3, marginSides = $$props.marginSides);
    		if ("scrollToFront" in $$props) $$invalidate(0, scrollToFront = $$props.scrollToFront);
    		if ("Main" in $$props) $$invalidate(1, Main = $$props.Main);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [scrollToFront, Main, distanceBLines, marginSides, toggleHide];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    var app = new App({
    	target: document.body
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
